{
  "extends": "@tsconfig/strictest/tsconfig.json",
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["DOM", "DOM.Iterable", "ES2021"],
    "allowJs": true,
    "checkJs": false,
    "exactOptionalPropertyTypes": false,
    "importsNotUsedAsValues": "remove",
    "noEmit": true,
    "esModuleInterop": true,
    "module": "ES2020",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    // TODO: Remove me
    // This makes /packages/util implicitly work, which is actually undesirable!
    "baseUrl": ".",
    "paths": {
      // This is a hack because eslint is not picking up the correct tsconfig.json
      // inside the apps/web module. This is a temporary workaround
      // In practice no module outside apps/web should use the `@/` alias ever
      // In addition to opening the door to invalid imports this also prevents us
      // from two separate next.js apps in the same monorepo which might be relevant for future
      "@/*": ["apps/web/*"],
      "@usevenice/openapi-client": ["utils/openapi-client/src"],
      "@usevenice/openapi-client/*": ["utils/openapi-client/src/*"],
      "@usevenice/sdk": ["kits/sdk/src"],
      "@usevenice/sdk/*": ["kits/sdk/src/*"],
      "@usevenice/connect": ["kits/connect/src"],
      "@usevenice/connect/*": ["kits/connect/src/*"]
    }
  },
  "include": ["env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
