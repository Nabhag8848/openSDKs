/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/open-api/core': {
    /** Get Open Api Schema */
    get: operations['GetOpenApiSchema']
  }
  '/people': {
    /**
     * Find Many people
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **people**
     */
    get: operations['findManyPeople']
    /** Create One person */
    post: operations['createOnePerson']
  }
  '/people/{id}': {
    /**
     * Find One person
     * @description **depth** can be provided to request your **person**
     */
    get: operations['findOnePerson']
    /** Update One people */
    put: operations['UpdateOnePerson']
    /** Delete One person */
    delete: operations['deleteOnePerson']
  }
  '/viewFields': {
    /**
     * Find Many viewFields
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewFields**
     */
    get: operations['findManyViewFields']
    /** Create One viewField */
    post: operations['createOneViewField']
  }
  '/viewFields/{id}': {
    /**
     * Find One viewField
     * @description **depth** can be provided to request your **viewField**
     */
    get: operations['findOneViewField']
    /** Update One viewFields */
    put: operations['UpdateOneViewField']
    /** Delete One viewField */
    delete: operations['deleteOneViewField']
  }
  '/viewFilters': {
    /**
     * Find Many viewFilters
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewFilters**
     */
    get: operations['findManyViewFilters']
    /** Create One viewFilter */
    post: operations['createOneViewFilter']
  }
  '/viewFilters/{id}': {
    /**
     * Find One viewFilter
     * @description **depth** can be provided to request your **viewFilter**
     */
    get: operations['findOneViewFilter']
    /** Update One viewFilters */
    put: operations['UpdateOneViewFilter']
    /** Delete One viewFilter */
    delete: operations['deleteOneViewFilter']
  }
  '/viewSorts': {
    /**
     * Find Many viewSorts
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewSorts**
     */
    get: operations['findManyViewSorts']
    /** Create One viewSort */
    post: operations['createOneViewSort']
  }
  '/viewSorts/{id}': {
    /**
     * Find One viewSort
     * @description **depth** can be provided to request your **viewSort**
     */
    get: operations['findOneViewSort']
    /** Update One viewSorts */
    put: operations['UpdateOneViewSort']
    /** Delete One viewSort */
    delete: operations['deleteOneViewSort']
  }
  '/views': {
    /**
     * Find Many views
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **views**
     */
    get: operations['findManyViews']
    /** Create One view */
    post: operations['createOneView']
  }
  '/views/{id}': {
    /**
     * Find One view
     * @description **depth** can be provided to request your **view**
     */
    get: operations['findOneView']
    /** Update One views */
    put: operations['UpdateOneView']
    /** Delete One view */
    delete: operations['deleteOneView']
  }
  '/webhooks': {
    /**
     * Find Many webhooks
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **webhooks**
     */
    get: operations['findManyWebhooks']
    /** Create One webhook */
    post: operations['createOneWebhook']
  }
  '/webhooks/{id}': {
    /**
     * Find One webhook
     * @description **depth** can be provided to request your **webhook**
     */
    get: operations['findOneWebhook']
    /** Update One webhooks */
    put: operations['UpdateOneWebhook']
    /** Delete One webhook */
    delete: operations['deleteOneWebhook']
  }
  '/workspaceMembers': {
    /**
     * Find Many workspaceMembers
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **workspaceMembers**
     */
    get: operations['findManyWorkspaceMembers']
    /** Create One workspaceMember */
    post: operations['createOneWorkspaceMember']
  }
  '/workspaceMembers/{id}': {
    /**
     * Find One workspaceMember
     * @description **depth** can be provided to request your **workspaceMember**
     */
    get: operations['findOneWorkspaceMember']
    /** Update One workspaceMembers */
    put: operations['UpdateOneWorkspaceMember']
    /** Delete One workspaceMember */
    delete: operations['deleteOneWorkspaceMember']
  }
  '/messageThreads': {
    /**
     * Find Many messageThreads
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageThreads**
     */
    get: operations['findManyMessageThreads']
    /** Create One messageThread */
    post: operations['createOneMessageThread']
  }
  '/messageThreads/{id}': {
    /**
     * Find One messageThread
     * @description **depth** can be provided to request your **messageThread**
     */
    get: operations['findOneMessageThread']
    /** Update One messageThreads */
    put: operations['UpdateOneMessageThread']
    /** Delete One messageThread */
    delete: operations['deleteOneMessageThread']
  }
  '/messages': {
    /**
     * Find Many messages
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messages**
     */
    get: operations['findManyMessages']
    /** Create One message */
    post: operations['createOneMessage']
  }
  '/messages/{id}': {
    /**
     * Find One message
     * @description **depth** can be provided to request your **message**
     */
    get: operations['findOneMessage']
    /** Update One messages */
    put: operations['UpdateOneMessage']
    /** Delete One message */
    delete: operations['deleteOneMessage']
  }
  '/messageChannels': {
    /**
     * Find Many messageChannels
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageChannels**
     */
    get: operations['findManyMessageChannels']
    /** Create One messageChannel */
    post: operations['createOneMessageChannel']
  }
  '/messageChannels/{id}': {
    /**
     * Find One messageChannel
     * @description **depth** can be provided to request your **messageChannel**
     */
    get: operations['findOneMessageChannel']
    /** Update One messageChannels */
    put: operations['UpdateOneMessageChannel']
    /** Delete One messageChannel */
    delete: operations['deleteOneMessageChannel']
  }
  '/messageParticipants': {
    /**
     * Find Many messageParticipants
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageParticipants**
     */
    get: operations['findManyMessageParticipants']
    /** Create One messageParticipant */
    post: operations['createOneMessageParticipant']
  }
  '/messageParticipants/{id}': {
    /**
     * Find One messageParticipant
     * @description **depth** can be provided to request your **messageParticipant**
     */
    get: operations['findOneMessageParticipant']
    /** Update One messageParticipants */
    put: operations['UpdateOneMessageParticipant']
    /** Delete One messageParticipant */
    delete: operations['deleteOneMessageParticipant']
  }
  '/messageChannelMessageAssociations': {
    /**
     * Find Many messageChannelMessageAssociations
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageChannelMessageAssociations**
     */
    get: operations['findManyMessageChannelMessageAssociations']
    /** Create One messageChannelMessageAssociation */
    post: operations['createOneMessageChannelMessageAssociation']
  }
  '/messageChannelMessageAssociations/{id}': {
    /**
     * Find One messageChannelMessageAssociation
     * @description **depth** can be provided to request your **messageChannelMessageAssociation**
     */
    get: operations['findOneMessageChannelMessageAssociation']
    /** Update One messageChannelMessageAssociations */
    put: operations['UpdateOneMessageChannelMessageAssociation']
    /** Delete One messageChannelMessageAssociation */
    delete: operations['deleteOneMessageChannelMessageAssociation']
  }
  '/events': {
    /**
     * Find Many events
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **events**
     */
    get: operations['findManyEvents']
    /** Create One event */
    post: operations['createOneEvent']
  }
  '/events/{id}': {
    /**
     * Find One event
     * @description **depth** can be provided to request your **event**
     */
    get: operations['findOneEvent']
    /** Update One events */
    put: operations['UpdateOneEvent']
    /** Delete One event */
    delete: operations['deleteOneEvent']
  }
  '/activityTargets': {
    /**
     * Find Many activityTargets
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **activityTargets**
     */
    get: operations['findManyActivityTargets']
    /** Create One activityTarget */
    post: operations['createOneActivityTarget']
  }
  '/activityTargets/{id}': {
    /**
     * Find One activityTarget
     * @description **depth** can be provided to request your **activityTarget**
     */
    get: operations['findOneActivityTarget']
    /** Update One activityTargets */
    put: operations['UpdateOneActivityTarget']
    /** Delete One activityTarget */
    delete: operations['deleteOneActivityTarget']
  }
  '/activities': {
    /**
     * Find Many activities
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **activities**
     */
    get: operations['findManyActivities']
    /** Create One activity */
    post: operations['createOneActivity']
  }
  '/activities/{id}': {
    /**
     * Find One activity
     * @description **depth** can be provided to request your **activity**
     */
    get: operations['findOneActivity']
    /** Update One activities */
    put: operations['UpdateOneActivity']
    /** Delete One activity */
    delete: operations['deleteOneActivity']
  }
  '/apiKeys': {
    /**
     * Find Many apiKeys
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **apiKeys**
     */
    get: operations['findManyApiKeys']
    /** Create One apiKey */
    post: operations['createOneApiKey']
  }
  '/apiKeys/{id}': {
    /**
     * Find One apiKey
     * @description **depth** can be provided to request your **apiKey**
     */
    get: operations['findOneApiKey']
    /** Update One apiKeys */
    put: operations['UpdateOneApiKey']
    /** Delete One apiKey */
    delete: operations['deleteOneApiKey']
  }
  '/attachments': {
    /**
     * Find Many attachments
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **attachments**
     */
    get: operations['findManyAttachments']
    /** Create One attachment */
    post: operations['createOneAttachment']
  }
  '/attachments/{id}': {
    /**
     * Find One attachment
     * @description **depth** can be provided to request your **attachment**
     */
    get: operations['findOneAttachment']
    /** Update One attachments */
    put: operations['UpdateOneAttachment']
    /** Delete One attachment */
    delete: operations['deleteOneAttachment']
  }
  '/blocklists': {
    /**
     * Find Many blocklists
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **blocklists**
     */
    get: operations['findManyBlocklists']
    /** Create One blocklist */
    post: operations['createOneBlocklist']
  }
  '/blocklists/{id}': {
    /**
     * Find One blocklist
     * @description **depth** can be provided to request your **blocklist**
     */
    get: operations['findOneBlocklist']
    /** Update One blocklists */
    put: operations['UpdateOneBlocklist']
    /** Delete One blocklist */
    delete: operations['deleteOneBlocklist']
  }
  '/comments': {
    /**
     * Find Many comments
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **comments**
     */
    get: operations['findManyComments']
    /** Create One comment */
    post: operations['createOneComment']
  }
  '/comments/{id}': {
    /**
     * Find One comment
     * @description **depth** can be provided to request your **comment**
     */
    get: operations['findOneComment']
    /** Update One comments */
    put: operations['UpdateOneComment']
    /** Delete One comment */
    delete: operations['deleteOneComment']
  }
  '/companies': {
    /**
     * Find Many companies
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **companies**
     */
    get: operations['findManyCompanies']
    /** Create One company */
    post: operations['createOneCompany']
  }
  '/companies/{id}': {
    /**
     * Find One company
     * @description **depth** can be provided to request your **company**
     */
    get: operations['findOneCompany']
    /** Update One companies */
    put: operations['UpdateOneCompany']
    /** Delete One company */
    delete: operations['deleteOneCompany']
  }
  '/connectedAccounts': {
    /**
     * Find Many connectedAccounts
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **connectedAccounts**
     */
    get: operations['findManyConnectedAccounts']
    /** Create One connectedAccount */
    post: operations['createOneConnectedAccount']
  }
  '/connectedAccounts/{id}': {
    /**
     * Find One connectedAccount
     * @description **depth** can be provided to request your **connectedAccount**
     */
    get: operations['findOneConnectedAccount']
    /** Update One connectedAccounts */
    put: operations['UpdateOneConnectedAccount']
    /** Delete One connectedAccount */
    delete: operations['deleteOneConnectedAccount']
  }
  '/favorites': {
    /**
     * Find Many favorites
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **favorites**
     */
    get: operations['findManyFavorites']
    /** Create One favorite */
    post: operations['createOneFavorite']
  }
  '/favorites/{id}': {
    /**
     * Find One favorite
     * @description **depth** can be provided to request your **favorite**
     */
    get: operations['findOneFavorite']
    /** Update One favorites */
    put: operations['UpdateOneFavorite']
    /** Delete One favorite */
    delete: operations['deleteOneFavorite']
  }
  '/opportunities': {
    /**
     * Find Many opportunities
     * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **opportunities**
     */
    get: operations['findManyOpportunities']
    /** Create One opportunity */
    post: operations['createOneOpportunity']
  }
  '/opportunities/{id}': {
    /**
     * Find One opportunity
     * @description **depth** can be provided to request your **opportunity**
     */
    get: operations['findOneOpportunity']
    /** Update One opportunities */
    put: operations['UpdateOneOpportunity']
    /** Delete One opportunity */
    delete: operations['deleteOneOpportunity']
  }
}

export interface webhooks {
  'Create person': {
    post: {
      /** @description *create*.**person**, *&#42;*.**person**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.person' | 'create.person'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'person'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Person']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update person': {
    post: {
      /** @description *update*.**person**, *&#42;*.**person**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.person' | 'update.person'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'person'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Person']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete person': {
    post: {
      /** @description *delete*.**person**, *&#42;*.**person**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.person' | 'delete.person'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'person'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Person']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create viewField': {
    post: {
      /** @description *create*.**viewField**, *&#42;*.**viewField**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewField' | 'create.viewField'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewField'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewField']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update viewField': {
    post: {
      /** @description *update*.**viewField**, *&#42;*.**viewField**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewField' | 'update.viewField'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewField'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewField']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete viewField': {
    post: {
      /** @description *delete*.**viewField**, *&#42;*.**viewField**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewField' | 'delete.viewField'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewField'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewField']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create viewFilter': {
    post: {
      /** @description *create*.**viewFilter**, *&#42;*.**viewFilter**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewFilter' | 'create.viewFilter'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewFilter'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewFilter']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update viewFilter': {
    post: {
      /** @description *update*.**viewFilter**, *&#42;*.**viewFilter**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewFilter' | 'update.viewFilter'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewFilter'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewFilter']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete viewFilter': {
    post: {
      /** @description *delete*.**viewFilter**, *&#42;*.**viewFilter**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewFilter' | 'delete.viewFilter'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewFilter'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewFilter']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create viewSort': {
    post: {
      /** @description *create*.**viewSort**, *&#42;*.**viewSort**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewSort' | 'create.viewSort'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewSort'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewSort']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update viewSort': {
    post: {
      /** @description *update*.**viewSort**, *&#42;*.**viewSort**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewSort' | 'update.viewSort'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewSort'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewSort']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete viewSort': {
    post: {
      /** @description *delete*.**viewSort**, *&#42;*.**viewSort**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.viewSort' | 'delete.viewSort'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'viewSort'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ViewSort']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create view': {
    post: {
      /** @description *create*.**view**, *&#42;*.**view**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.view' | 'create.view'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'view'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['View']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update view': {
    post: {
      /** @description *update*.**view**, *&#42;*.**view**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.view' | 'update.view'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'view'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['View']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete view': {
    post: {
      /** @description *delete*.**view**, *&#42;*.**view**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.view' | 'delete.view'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'view'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['View']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create webhook': {
    post: {
      /** @description *create*.**webhook**, *&#42;*.**webhook**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.webhook' | 'create.webhook'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'webhook'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Webhook']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update webhook': {
    post: {
      /** @description *update*.**webhook**, *&#42;*.**webhook**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.webhook' | 'update.webhook'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'webhook'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Webhook']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete webhook': {
    post: {
      /** @description *delete*.**webhook**, *&#42;*.**webhook**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.webhook' | 'delete.webhook'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'webhook'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Webhook']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create workspaceMember': {
    post: {
      /** @description *create*.**workspaceMember**, *&#42;*.**workspaceMember**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.workspaceMember' | 'create.workspaceMember'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'workspaceMember'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['WorkspaceMember']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update workspaceMember': {
    post: {
      /** @description *update*.**workspaceMember**, *&#42;*.**workspaceMember**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.workspaceMember' | 'update.workspaceMember'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'workspaceMember'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['WorkspaceMember']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete workspaceMember': {
    post: {
      /** @description *delete*.**workspaceMember**, *&#42;*.**workspaceMember**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.workspaceMember' | 'delete.workspaceMember'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'workspaceMember'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['WorkspaceMember']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create messageThread': {
    post: {
      /** @description *create*.**messageThread**, *&#42;*.**messageThread**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageThread' | 'create.messageThread'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageThread'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageThread']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update messageThread': {
    post: {
      /** @description *update*.**messageThread**, *&#42;*.**messageThread**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageThread' | 'update.messageThread'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageThread'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageThread']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete messageThread': {
    post: {
      /** @description *delete*.**messageThread**, *&#42;*.**messageThread**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageThread' | 'delete.messageThread'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageThread'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageThread']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create message': {
    post: {
      /** @description *create*.**message**, *&#42;*.**message**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.message' | 'create.message'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'message'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Message']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update message': {
    post: {
      /** @description *update*.**message**, *&#42;*.**message**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.message' | 'update.message'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'message'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Message']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete message': {
    post: {
      /** @description *delete*.**message**, *&#42;*.**message**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.message' | 'delete.message'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'message'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Message']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create messageChannel': {
    post: {
      /** @description *create*.**messageChannel**, *&#42;*.**messageChannel**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageChannel' | 'create.messageChannel'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannel'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannel']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update messageChannel': {
    post: {
      /** @description *update*.**messageChannel**, *&#42;*.**messageChannel**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageChannel' | 'update.messageChannel'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannel'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannel']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete messageChannel': {
    post: {
      /** @description *delete*.**messageChannel**, *&#42;*.**messageChannel**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.messageChannel' | 'delete.messageChannel'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannel'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannel']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create messageParticipant': {
    post: {
      /** @description *create*.**messageParticipant**, *&#42;*.**messageParticipant**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageParticipant'
              | 'create.messageParticipant'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageParticipant'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageParticipant']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update messageParticipant': {
    post: {
      /** @description *update*.**messageParticipant**, *&#42;*.**messageParticipant**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageParticipant'
              | 'update.messageParticipant'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageParticipant'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageParticipant']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete messageParticipant': {
    post: {
      /** @description *delete*.**messageParticipant**, *&#42;*.**messageParticipant**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageParticipant'
              | 'delete.messageParticipant'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageParticipant'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageParticipant']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create messageChannelMessageAssociation': {
    post: {
      /** @description *create*.**messageChannelMessageAssociation**, *&#42;*.**messageChannelMessageAssociation**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageChannelMessageAssociation'
              | 'create.messageChannelMessageAssociation'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannelMessageAssociation'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannelMessageAssociation']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update messageChannelMessageAssociation': {
    post: {
      /** @description *update*.**messageChannelMessageAssociation**, *&#42;*.**messageChannelMessageAssociation**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageChannelMessageAssociation'
              | 'update.messageChannelMessageAssociation'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannelMessageAssociation'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannelMessageAssociation']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete messageChannelMessageAssociation': {
    post: {
      /** @description *delete*.**messageChannelMessageAssociation**, *&#42;*.**messageChannelMessageAssociation**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?:
              | '*.*'
              | '*.messageChannelMessageAssociation'
              | 'delete.messageChannelMessageAssociation'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'messageChannelMessageAssociation'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['MessageChannelMessageAssociation']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create event': {
    post: {
      /** @description *create*.**event**, *&#42;*.**event**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.event' | 'create.event'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'event'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Event']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update event': {
    post: {
      /** @description *update*.**event**, *&#42;*.**event**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.event' | 'update.event'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'event'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Event']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete event': {
    post: {
      /** @description *delete*.**event**, *&#42;*.**event**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.event' | 'delete.event'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'event'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Event']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create activityTarget': {
    post: {
      /** @description *create*.**activityTarget**, *&#42;*.**activityTarget**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activityTarget' | 'create.activityTarget'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activityTarget'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ActivityTarget']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update activityTarget': {
    post: {
      /** @description *update*.**activityTarget**, *&#42;*.**activityTarget**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activityTarget' | 'update.activityTarget'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activityTarget'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ActivityTarget']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete activityTarget': {
    post: {
      /** @description *delete*.**activityTarget**, *&#42;*.**activityTarget**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activityTarget' | 'delete.activityTarget'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activityTarget'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ActivityTarget']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create activity': {
    post: {
      /** @description *create*.**activity**, *&#42;*.**activity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activity' | 'create.activity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Activity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update activity': {
    post: {
      /** @description *update*.**activity**, *&#42;*.**activity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activity' | 'update.activity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Activity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete activity': {
    post: {
      /** @description *delete*.**activity**, *&#42;*.**activity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.activity' | 'delete.activity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'activity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Activity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create apiKey': {
    post: {
      /** @description *create*.**apiKey**, *&#42;*.**apiKey**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.apiKey' | 'create.apiKey'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'apiKey'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ApiKey']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update apiKey': {
    post: {
      /** @description *update*.**apiKey**, *&#42;*.**apiKey**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.apiKey' | 'update.apiKey'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'apiKey'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ApiKey']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete apiKey': {
    post: {
      /** @description *delete*.**apiKey**, *&#42;*.**apiKey**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.apiKey' | 'delete.apiKey'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'apiKey'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ApiKey']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create attachment': {
    post: {
      /** @description *create*.**attachment**, *&#42;*.**attachment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.attachment' | 'create.attachment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'attachment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Attachment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update attachment': {
    post: {
      /** @description *update*.**attachment**, *&#42;*.**attachment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.attachment' | 'update.attachment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'attachment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Attachment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete attachment': {
    post: {
      /** @description *delete*.**attachment**, *&#42;*.**attachment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.attachment' | 'delete.attachment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'attachment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Attachment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create blocklist': {
    post: {
      /** @description *create*.**blocklist**, *&#42;*.**blocklist**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.blocklist' | 'create.blocklist'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'blocklist'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Blocklist']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update blocklist': {
    post: {
      /** @description *update*.**blocklist**, *&#42;*.**blocklist**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.blocklist' | 'update.blocklist'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'blocklist'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Blocklist']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete blocklist': {
    post: {
      /** @description *delete*.**blocklist**, *&#42;*.**blocklist**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.blocklist' | 'delete.blocklist'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'blocklist'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Blocklist']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create comment': {
    post: {
      /** @description *create*.**comment**, *&#42;*.**comment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.comment' | 'create.comment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'comment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Comment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update comment': {
    post: {
      /** @description *update*.**comment**, *&#42;*.**comment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.comment' | 'update.comment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'comment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Comment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete comment': {
    post: {
      /** @description *delete*.**comment**, *&#42;*.**comment**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.comment' | 'delete.comment'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'comment'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Comment']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create company': {
    post: {
      /** @description *create*.**company**, *&#42;*.**company**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.company' | 'create.company'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'company'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Company']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update company': {
    post: {
      /** @description *update*.**company**, *&#42;*.**company**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.company' | 'update.company'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'company'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Company']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete company': {
    post: {
      /** @description *delete*.**company**, *&#42;*.**company**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.company' | 'delete.company'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'company'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Company']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create connectedAccount': {
    post: {
      /** @description *create*.**connectedAccount**, *&#42;*.**connectedAccount**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.connectedAccount' | 'create.connectedAccount'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'connectedAccount'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ConnectedAccount']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update connectedAccount': {
    post: {
      /** @description *update*.**connectedAccount**, *&#42;*.**connectedAccount**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.connectedAccount' | 'update.connectedAccount'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'connectedAccount'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ConnectedAccount']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete connectedAccount': {
    post: {
      /** @description *delete*.**connectedAccount**, *&#42;*.**connectedAccount**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.connectedAccount' | 'delete.connectedAccount'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'connectedAccount'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['ConnectedAccount']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create favorite': {
    post: {
      /** @description *create*.**favorite**, *&#42;*.**favorite**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.favorite' | 'create.favorite'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'favorite'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Favorite']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update favorite': {
    post: {
      /** @description *update*.**favorite**, *&#42;*.**favorite**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.favorite' | 'update.favorite'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'favorite'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Favorite']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete favorite': {
    post: {
      /** @description *delete*.**favorite**, *&#42;*.**favorite**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.favorite' | 'delete.favorite'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'favorite'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Favorite']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Create opportunity': {
    post: {
      /** @description *create*.**opportunity**, *&#42;*.**opportunity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.opportunity' | 'create.opportunity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'opportunity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Opportunity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Update opportunity': {
    post: {
      /** @description *update*.**opportunity**, *&#42;*.**opportunity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.opportunity' | 'update.opportunity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'opportunity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Opportunity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
  'Delete opportunity': {
    post: {
      /** @description *delete*.**opportunity**, *&#42;*.**opportunity**, *&#42;*.**&#42;** */
      requestBody?: {
        content: {
          'application/json': {
            /** @example https://example.com/incomingWebhook */
            targetUrl?: string
            /** @enum {string} */
            eventType?: '*.*' | '*.opportunity' | 'delete.opportunity'
            objectMetadata?: {
              /** @example 370985db-22d8-4463-8e5f-2271d30913bd */
              id?: string
              /** @enum {string} */
              nameSingular?: 'opportunity'
            }
            /** @example 872cfcf1-c79f-42bc-877d-5829f06eb3f9 */
            workspaceId?: string
            /** @example 90056586-1228-4e03-a507-70140aa85c05 */
            webhookId?: string
            /** @example 2024-02-14T11:27:01.779Z */
            eventDate?: string
            record?: components['schemas']['Opportunity']
          }
        }
      }
      responses: {
        /** @description Return a 200 status to indicate that the data was received successfully */
        200: {
          content: never
        }
      }
    }
  }
}

export interface components {
  schemas: {
    /**
     * @description A person
     * @example {}
     */
    Person: {
      /** @description Contact’s name */
      name?: {
        lastName?: string
        firstName?: string
      }
      /** @description Contact’s Email */
      email?: string
      /** @description Contact’s Linkedin account */
      linkedinLink?: {
        url?: string
        label?: string
      }
      /** @description Point of Contact for Opportunities */
      pointOfContactForOpportunities?: components['schemas']['Opportunity'][]
      /** @description Activities tied to the contact */
      activityTargets?: components['schemas']['ActivityTarget'][]
      /** @description Favorites linked to the contact */
      favorites?: components['schemas']['Favorite'][]
      /** @description Attachments linked to the contact. */
      attachments?: components['schemas']['Attachment'][]
      /** @description Message Participants */
      messageParticipants?: components['schemas']['MessageParticipant'][]
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Contact’s X/Twitter account */
      xLink?: {
        url?: string
        label?: string
      }
      /** @description Contact’s job title */
      jobTitle?: string
      /** @description Contact’s phone number */
      phone?: string
      /** @description Contact’s city */
      city?: string
      /** @description Contact’s avatar */
      avatarUrl?: string
      /** @description Person record Position */
      position?: number
      /** @description Contact’s company */
      company?: unknown
      /** @description Contact’s company id foreign key */
      companyId?: string
      /** @description Events linked to the company */
      events?: components['schemas']['Event'][]
    }
    /**
     * @description (System) View Fields
     * @example {
     *   "fieldMetadataId": ""
     * }
     */
    ViewField: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description View Field target field */
      fieldMetadataId: string
      /** @description View Field visibility */
      isVisible?: boolean
      /** @description View Field size */
      size?: number
      /** @description View Field position */
      position?: number
      /** @description View Field related view */
      view?: unknown
      /** @description View Field related view id foreign key */
      viewId?: string
    }
    /**
     * @description (System) View Filters
     * @example {
     *   "fieldMetadataId": ""
     * }
     */
    ViewFilter: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description View Filter target field */
      fieldMetadataId: string
      /** @description View Filter operand */
      operand?: string
      /** @description View Filter value */
      value?: string
      /** @description View Filter Display Value */
      displayValue?: string
      /** @description View Filter related view */
      view?: unknown
      /** @description View Filter related view id foreign key */
      viewId?: string
    }
    /**
     * @description (System) View Sorts
     * @example {
     *   "fieldMetadataId": ""
     * }
     */
    ViewSort: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description View Sort target field */
      fieldMetadataId: string
      /** @description View Sort direction */
      direction?: string
      /** @description View Sort related view */
      view?: unknown
      /** @description View Sort related view id foreign key */
      viewId?: string
    }
    /**
     * @description (System) Views
     * @example {
     *   "objectMetadataId": ""
     * }
     */
    View: {
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description View name */
      name?: string
      /** @description View type */
      type?: string
      /** @description View key */
      key?: string
      /** @description Id */
      id?: string
      /** @description View target object */
      objectMetadataId: string
      /** @description View icon */
      icon?: string
      /** @description View position */
      position?: number
      /** @description Describes if the view is in compact mode */
      isCompact?: boolean
      /** @description View Fields */
      viewFields?: components['schemas']['ViewField'][]
      /** @description View Filters */
      viewFilters?: components['schemas']['ViewFilter'][]
      /** @description View Sorts */
      viewSorts?: components['schemas']['ViewSort'][]
      /** @description View Kanban column field */
      kanbanFieldMetadataId?: string
    }
    /**
     * @description A webhook
     * @example {}
     */
    Webhook: {
      /** @description Webhook operation */
      operation?: string
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Webhook target url */
      targetUrl?: string
    }
    /**
     * @description A workspace member
     * @example {
     *   "userId": ""
     * }
     */
    WorkspaceMember: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Workspace member name */
      name?: {
        lastName?: string
        firstName?: string
      }
      /** @description Preferred color scheme */
      colorScheme?: string
      /** @description Preferred language */
      locale?: string
      /** @description Workspace member avatar */
      avatarUrl?: string
      /** @description Related user email address */
      userEmail?: string
      /** @description Associated User Id */
      userId: string
      /** @description Activities created by the workspace member */
      authoredActivities?: components['schemas']['Activity'][]
      /** @description Activities assigned to the workspace member */
      assignedActivities?: components['schemas']['Activity'][]
      /** @description Favorites linked to the workspace member */
      favorites?: components['schemas']['Favorite'][]
      /** @description Account owner for companies */
      accountOwnerForCompanies?: components['schemas']['Company'][]
      /** @description Attachments created by the workspace member */
      authoredAttachments?: components['schemas']['Attachment'][]
      /** @description Authored comments */
      authoredComments?: components['schemas']['Comment'][]
      /** @description Connected accounts */
      connectedAccounts?: components['schemas']['ConnectedAccount'][]
      /** @description Message Participants */
      messageParticipants?: components['schemas']['MessageParticipant'][]
      /** @description Blocklisted handles */
      blocklist?: components['schemas']['Blocklist'][]
      /** @description Events linked to the workspace member */
      events?: components['schemas']['Event'][]
    }
    /**
     * @description Message Thread
     * @example {}
     */
    MessageThread: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Messages from the thread. */
      messages?: components['schemas']['Message'][]
      /** @description Messages from the channel. */
      messageChannelMessageAssociations?: components['schemas']['MessageChannelMessageAssociation'][]
    }
    /**
     * @description Message
     * @example {}
     */
    Message: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Message id from the message header */
      headerMessageId?: string
      /** @description Message Direction */
      direction?: string
      /** @description Subject */
      subject?: string
      /** @description Text */
      text?: string
      /** @description Message Thread Id */
      messageThread?: unknown
      /** @description Message Thread Id id foreign key */
      messageThreadId?: string
      /** @description The date the message was received */
      receivedAt?: string
      /** @description Message Participants */
      messageParticipants?: components['schemas']['MessageParticipant'][]
      /** @description Messages from the channel. */
      messageChannelMessageAssociations?: components['schemas']['MessageChannelMessageAssociation'][]
    }
    /**
     * @description Message Channels
     * @example {
     *   "connectedAccountId": ""
     * }
     */
    MessageChannel: {
      /** @description Update date */
      updatedAt?: string
      /** @description Visibility */
      visibility?: string
      /** @description Handle */
      handle?: string
      /** @description Channel Type */
      type?: string
      /** @description Is Contact Auto Creation Enabled */
      isContactAutoCreationEnabled?: boolean
      /** @description Last sync cursor */
      syncCursor?: string
      /** @description Last sync date */
      syncedAt?: string
      /** @description Last sync status */
      syncStatus?: string
      /** @description Ongoing sync started at */
      ongoingSyncStartedAt?: string
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Connected Account */
      connectedAccount?: unknown
      /** @description Connected Account id foreign key */
      connectedAccountId: string
      /** @description Messages from the channel. */
      messageChannelMessageAssociations?: components['schemas']['MessageChannelMessageAssociation'][]
    }
    /**
     * @description Message Participants
     * @example {
     *   "messageId": ""
     * }
     */
    MessageParticipant: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Role */
      role?: string
      /** @description Handle */
      handle?: string
      /** @description Display Name */
      displayName?: string
      /** @description Message */
      message?: unknown
      /** @description Message id foreign key */
      messageId: string
      /** @description Person */
      person?: unknown
      /** @description Person id foreign key */
      personId?: string
      /** @description Workspace member */
      workspaceMember?: unknown
      /** @description Workspace member id foreign key */
      workspaceMemberId?: string
    }
    /**
     * @description Message Synced with a Message Channel
     * @example {}
     */
    MessageChannelMessageAssociation: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Message id from the messaging provider */
      messageExternalId?: string
      /** @description Thread id from the messaging provider */
      messageThreadExternalId?: string
      /** @description Message Channel Id */
      messageChannel?: unknown
      /** @description Message Channel Id id foreign key */
      messageChannelId?: string
      /** @description Message Id */
      message?: unknown
      /** @description Message Id id foreign key */
      messageId?: string
      /** @description Message Thread Id */
      messageThread?: unknown
      /** @description Message Thread Id id foreign key */
      messageThreadId?: string
    }
    /**
     * @description An event
     * @example {}
     */
    Event: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Event name/type */
      name?: string
      /** @description Json value for event details */
      properties?: unknown
      /** @description Event workspace member */
      workspaceMember?: unknown
      /** @description Event workspace member id foreign key */
      workspaceMemberId?: string
      /** @description Event person */
      person?: unknown
      /** @description Event person id foreign key */
      personId?: string
      /** @description Event company */
      company?: unknown
      /** @description Event company id foreign key */
      companyId?: string
      /** @description Events opportunity */
      opportunity?: unknown
      /** @description Events opportunity id foreign key */
      opportunityId?: string
    }
    /**
     * @description An activity target
     * @example {}
     */
    ActivityTarget: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description ActivityTarget activity */
      activity?: unknown
      /** @description ActivityTarget activity id foreign key */
      activityId?: string
      /** @description ActivityTarget person */
      person?: unknown
      /** @description ActivityTarget person id foreign key */
      personId?: string
      /** @description ActivityTarget company */
      company?: unknown
      /** @description ActivityTarget company id foreign key */
      companyId?: string
      /** @description ActivityTarget opportunity */
      opportunity?: unknown
      /** @description ActivityTarget opportunity id foreign key */
      opportunityId?: string
    }
    /**
     * @description An activity
     * @example {}
     */
    Activity: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Activity title */
      title?: string
      /** @description Activity body */
      body?: string
      /** @description Activity type */
      type?: string
      /** @description Activity reminder date */
      reminderAt?: string
      /** @description Activity due date */
      dueAt?: string
      /** @description Activity completion date */
      completedAt?: string
      /** @description Activity targets */
      activityTargets?: components['schemas']['ActivityTarget'][]
      /** @description Activity attachments */
      attachments?: components['schemas']['Attachment'][]
      /** @description Activity comments */
      comments?: components['schemas']['Comment'][]
      /** @description Activity author */
      author?: unknown
      /** @description Activity author id foreign key */
      authorId?: string
      /** @description Activity assignee */
      assignee?: unknown
      /** @description Activity assignee id foreign key */
      assigneeId?: string
    }
    /**
     * @description An api key
     * @example {
     *   "expiresAt": ""
     * }
     */
    ApiKey: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description ApiKey name */
      name?: string
      /** @description ApiKey expiration date */
      expiresAt: string
      /** @description ApiKey revocation date */
      revokedAt?: string
    }
    /**
     * @description An attachment
     * @example {
     *   "authorId": ""
     * }
     */
    Attachment: {
      /** @description Attachment name */
      name?: string
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Attachment full path */
      fullPath?: string
      /** @description Attachment type */
      type?: string
      /** @description Attachment author */
      author?: unknown
      /** @description Attachment author id foreign key */
      authorId: string
      /** @description Attachment activity */
      activity?: unknown
      /** @description Attachment activity id foreign key */
      activityId?: string
      /** @description Attachment person */
      person?: unknown
      /** @description Attachment person id foreign key */
      personId?: string
      /** @description Attachment company */
      company?: unknown
      /** @description Attachment company id foreign key */
      companyId?: string
      /** @description Attachment opportunity */
      opportunity?: unknown
      /** @description Attachment opportunity id foreign key */
      opportunityId?: string
    }
    /**
     * @description Blocklist
     * @example {
     *   "workspaceMemberId": ""
     * }
     */
    Blocklist: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Handle */
      handle?: string
      /** @description WorkspaceMember */
      workspaceMember?: unknown
      /** @description WorkspaceMember id foreign key */
      workspaceMemberId: string
    }
    /**
     * @description A comment
     * @example {
     *   "authorId": "",
     *   "activityId": ""
     * }
     */
    Comment: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Comment body */
      body?: string
      /** @description Comment author */
      author?: unknown
      /** @description Comment author id foreign key */
      authorId: string
      /** @description Comment activity */
      activity?: unknown
      /** @description Comment activity id foreign key */
      activityId: string
    }
    /**
     * @description A company
     * @example {}
     */
    Company: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description The company name */
      name?: string
      /** @description The company website URL. We use this url to fetch the company icon */
      domainName?: string
      /** @description The company address */
      address?: string
      /** @description The company Linkedin account */
      linkedinLink?: {
        url?: string
        label?: string
      }
      /** @description The company Twitter/X account */
      xLink?: {
        url?: string
        label?: string
      }
      /** @description Annual Recurring Revenue: The actual or estimated annual revenue of the company */
      annualRecurringRevenue?: {
        amountMicros?: string
        currencyCode?: string
      }
      /** @description Ideal Customer Profile:  Indicates whether the company is the most suitable and valuable customer for you */
      idealCustomerProfile?: boolean
      /** @description Number of employees in the company */
      employees?: number
      /** @description Company record position */
      position?: number
      /** @description People linked to the company. */
      people?: components['schemas']['Person'][]
      /** @description Your team member responsible for managing the company account */
      accountOwner?: unknown
      /** @description Your team member responsible for managing the company account id foreign key */
      accountOwnerId?: string
      /** @description Activities tied to the company */
      activityTargets?: components['schemas']['ActivityTarget'][]
      /** @description Opportunities linked to the company. */
      opportunities?: components['schemas']['Opportunity'][]
      /** @description Favorites linked to the company */
      favorites?: components['schemas']['Favorite'][]
      /** @description Attachments linked to the company. */
      attachments?: components['schemas']['Attachment'][]
      /** @description Events linked to the company */
      events?: components['schemas']['Event'][]
    }
    /**
     * @description A connected account
     * @example {
     *   "accountOwnerId": ""
     * }
     */
    ConnectedAccount: {
      /** @description Auth failed at */
      authFailedAt?: string
      /** @description Message Channel */
      messageChannels?: components['schemas']['MessageChannel'][]
      /** @description Last sync history ID */
      lastSyncHistoryId?: string
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description The account handle (email, username, phone number, etc.) */
      handle?: string
      /** @description The account provider */
      provider?: string
      /** @description Messaging provider access token */
      accessToken?: string
      /** @description Messaging provider refresh token */
      refreshToken?: string
      /** @description Account Owner */
      accountOwner?: unknown
      /** @description Account Owner id foreign key */
      accountOwnerId: string
    }
    /**
     * @description A favorite
     * @example {
     *   "workspaceMemberId": ""
     * }
     */
    Favorite: {
      /** @description Id */
      id?: string
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description Favorite position */
      position?: number
      /** @description Favorite workspace member */
      workspaceMember?: unknown
      /** @description Favorite workspace member id foreign key */
      workspaceMemberId: string
      /** @description Favorite person */
      person?: unknown
      /** @description Favorite person id foreign key */
      personId?: string
      /** @description Favorite company */
      company?: unknown
      /** @description Favorite company id foreign key */
      companyId?: string
      /** @description Favorite opportunity */
      opportunity?: unknown
      /** @description Favorite opportunity id foreign key */
      opportunityId?: string
    }
    /**
     * @description An opportunity
     * @example {}
     */
    Opportunity: {
      /** @description Creation date */
      createdAt?: string
      /** @description Update date */
      updatedAt?: string
      /** @description The opportunity name */
      name?: string
      /** @description Opportunity amount */
      amount?: {
        amountMicros?: string
        currencyCode?: string
      }
      /** @description Opportunity probability */
      probability?: string
      /** @description Opportunity stage */
      stage?: string
      /** @description Id */
      id?: string
      /** @description Opportunity close date */
      closeDate?: string
      /** @description Opportunity record position */
      position?: number
      /** @description Opportunity point of contact */
      pointOfContact?: unknown
      /** @description Opportunity point of contact id foreign key */
      pointOfContactId?: string
      /** @description Opportunity company */
      company?: unknown
      /** @description Opportunity company id foreign key */
      companyId?: string
      /** @description Favorites linked to the opportunity */
      favorites?: components['schemas']['Favorite'][]
      /** @description Activities tied to the opportunity */
      activityTargets?: components['schemas']['ActivityTarget'][]
      /** @description Attachments linked to the opportunity. */
      attachments?: components['schemas']['Attachment'][]
      /** @description Events linked to the opportunity. */
      events?: components['schemas']['Event'][]
    }
  }
  responses: {
    /** @description Invalid request */
    400: {
      content: {
        'application/json': {
          error?: string
        }
      }
    }
    /** @description Unauthorized */
    401: {
      content: {
        'application/json': {
          error?: string
        }
      }
    }
  }
  parameters: {
    /** @description Object id. */
    idPath: string
    /** @description Returns objects starting from a specific cursor. */
    lastCursor?: string
    /**
     * @description Filters objects returned.
     *     Should have the following shape: **field_1[COMPARATOR]:value_1,field_2[COMPARATOR]:value_2,...**
     *     Available comparators are **eq**, **neq**, **in**, **is**, **gt**, **gte**, **lt**, **lte**, **startsWith**, **like**, **ilike**.
     *     You can create more complex filters using conjunctions **or**, **and**, **not**.
     *     Default root conjunction is **and**.
     *     To filter **null** values use **field[is]:NULL** or **field[is]:NOT_NULL**
     *     To filter using **boolean** values use **field[eq]:true** or **field[eq]:false**
     */
    filter?: string
    /** @description Limits the depth objects returned. */
    depth?: 1 | 2
    /**
     * @description Sorts objects returned.
     *     Should have the following shape: **field_name_1,field_name_2[DIRECTION_2],...**
     *     Available directions are **AscNullsFirst**, **AscNullsLast**, **DescNullsFirst**, **DescNullsLast**.
     *     Default direction is **AscNullsFirst**
     */
    orderBy?: string
    /** @description Limits the number of objects returned. */
    limit?: number
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Get Open Api Schema */
  GetOpenApiSchema: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            openapi?: string
            info?: {
              title?: string
              description?: string
              termsOfService?: string
              contact?: {
                email?: string
              }
              license?: {
                name?: string
                url?: string
              }
            }
            servers?: unknown[]
            components?: {
              schemas?: Record<string, never>
              parameters?: Record<string, never>
              responses?: Record<string, never>
            }
            paths?: Record<string, never>
            tags?: Record<string, never>
          }
        }
      }
    }
  }
  /**
   * Find Many people
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **people**
   */
  findManyPeople: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              people?: components['schemas']['Person'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One person */
  createOnePerson: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Person']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              person?: components['schemas']['Person']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One person
   * @description **depth** can be provided to request your **person**
   */
  findOnePerson: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              person?: components['schemas']['Person']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One people */
  UpdateOnePerson: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Person']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              person?: components['schemas']['Person']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One person */
  deleteOnePerson: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              person?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many viewFields
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewFields**
   */
  findManyViewFields: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewFields?: components['schemas']['ViewField'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One viewField */
  createOneViewField: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewField']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              viewField?: components['schemas']['ViewField']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One viewField
   * @description **depth** can be provided to request your **viewField**
   */
  findOneViewField: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewField?: components['schemas']['ViewField']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One viewFields */
  UpdateOneViewField: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewField']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewField?: components['schemas']['ViewField']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One viewField */
  deleteOneViewField: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewField?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many viewFilters
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewFilters**
   */
  findManyViewFilters: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewFilters?: components['schemas']['ViewFilter'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One viewFilter */
  createOneViewFilter: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewFilter']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              viewFilter?: components['schemas']['ViewFilter']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One viewFilter
   * @description **depth** can be provided to request your **viewFilter**
   */
  findOneViewFilter: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewFilter?: components['schemas']['ViewFilter']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One viewFilters */
  UpdateOneViewFilter: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewFilter']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewFilter?: components['schemas']['ViewFilter']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One viewFilter */
  deleteOneViewFilter: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewFilter?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many viewSorts
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **viewSorts**
   */
  findManyViewSorts: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewSorts?: components['schemas']['ViewSort'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One viewSort */
  createOneViewSort: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewSort']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              viewSort?: components['schemas']['ViewSort']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One viewSort
   * @description **depth** can be provided to request your **viewSort**
   */
  findOneViewSort: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewSort?: components['schemas']['ViewSort']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One viewSorts */
  UpdateOneViewSort: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ViewSort']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewSort?: components['schemas']['ViewSort']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One viewSort */
  deleteOneViewSort: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              viewSort?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many views
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **views**
   */
  findManyViews: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              views?: components['schemas']['View'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One view */
  createOneView: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['View']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              view?: components['schemas']['View']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One view
   * @description **depth** can be provided to request your **view**
   */
  findOneView: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              view?: components['schemas']['View']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One views */
  UpdateOneView: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['View']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              view?: components['schemas']['View']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One view */
  deleteOneView: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              view?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many webhooks
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **webhooks**
   */
  findManyWebhooks: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              webhooks?: components['schemas']['Webhook'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One webhook */
  createOneWebhook: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Webhook']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              webhook?: components['schemas']['Webhook']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One webhook
   * @description **depth** can be provided to request your **webhook**
   */
  findOneWebhook: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              webhook?: components['schemas']['Webhook']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One webhooks */
  UpdateOneWebhook: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Webhook']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              webhook?: components['schemas']['Webhook']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One webhook */
  deleteOneWebhook: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              webhook?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many workspaceMembers
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **workspaceMembers**
   */
  findManyWorkspaceMembers: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              workspaceMembers?: components['schemas']['WorkspaceMember'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One workspaceMember */
  createOneWorkspaceMember: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['WorkspaceMember']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              workspaceMember?: components['schemas']['WorkspaceMember']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One workspaceMember
   * @description **depth** can be provided to request your **workspaceMember**
   */
  findOneWorkspaceMember: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              workspaceMember?: components['schemas']['WorkspaceMember']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One workspaceMembers */
  UpdateOneWorkspaceMember: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['WorkspaceMember']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              workspaceMember?: components['schemas']['WorkspaceMember']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One workspaceMember */
  deleteOneWorkspaceMember: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              workspaceMember?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many messageThreads
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageThreads**
   */
  findManyMessageThreads: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageThreads?: components['schemas']['MessageThread'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One messageThread */
  createOneMessageThread: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageThread']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              messageThread?: components['schemas']['MessageThread']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One messageThread
   * @description **depth** can be provided to request your **messageThread**
   */
  findOneMessageThread: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageThread?: components['schemas']['MessageThread']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One messageThreads */
  UpdateOneMessageThread: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageThread']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageThread?: components['schemas']['MessageThread']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One messageThread */
  deleteOneMessageThread: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageThread?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many messages
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messages**
   */
  findManyMessages: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messages?: components['schemas']['Message'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One message */
  createOneMessage: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Message']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              message?: components['schemas']['Message']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One message
   * @description **depth** can be provided to request your **message**
   */
  findOneMessage: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              message?: components['schemas']['Message']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One messages */
  UpdateOneMessage: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Message']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              message?: components['schemas']['Message']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One message */
  deleteOneMessage: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              message?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many messageChannels
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageChannels**
   */
  findManyMessageChannels: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannels?: components['schemas']['MessageChannel'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One messageChannel */
  createOneMessageChannel: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageChannel']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              messageChannel?: components['schemas']['MessageChannel']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One messageChannel
   * @description **depth** can be provided to request your **messageChannel**
   */
  findOneMessageChannel: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannel?: components['schemas']['MessageChannel']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One messageChannels */
  UpdateOneMessageChannel: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageChannel']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannel?: components['schemas']['MessageChannel']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One messageChannel */
  deleteOneMessageChannel: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannel?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many messageParticipants
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageParticipants**
   */
  findManyMessageParticipants: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageParticipants?: components['schemas']['MessageParticipant'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One messageParticipant */
  createOneMessageParticipant: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageParticipant']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              messageParticipant?: components['schemas']['MessageParticipant']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One messageParticipant
   * @description **depth** can be provided to request your **messageParticipant**
   */
  findOneMessageParticipant: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageParticipant?: components['schemas']['MessageParticipant']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One messageParticipants */
  UpdateOneMessageParticipant: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageParticipant']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageParticipant?: components['schemas']['MessageParticipant']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One messageParticipant */
  deleteOneMessageParticipant: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageParticipant?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many messageChannelMessageAssociations
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **messageChannelMessageAssociations**
   */
  findManyMessageChannelMessageAssociations: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannelMessageAssociations?: components['schemas']['MessageChannelMessageAssociation'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One messageChannelMessageAssociation */
  createOneMessageChannelMessageAssociation: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageChannelMessageAssociation']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              messageChannelMessageAssociation?: components['schemas']['MessageChannelMessageAssociation']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One messageChannelMessageAssociation
   * @description **depth** can be provided to request your **messageChannelMessageAssociation**
   */
  findOneMessageChannelMessageAssociation: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannelMessageAssociation?: components['schemas']['MessageChannelMessageAssociation']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One messageChannelMessageAssociations */
  UpdateOneMessageChannelMessageAssociation: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['MessageChannelMessageAssociation']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannelMessageAssociation?: components['schemas']['MessageChannelMessageAssociation']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One messageChannelMessageAssociation */
  deleteOneMessageChannelMessageAssociation: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              messageChannelMessageAssociation?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many events
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **events**
   */
  findManyEvents: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              events?: components['schemas']['Event'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One event */
  createOneEvent: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Event']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              event?: components['schemas']['Event']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One event
   * @description **depth** can be provided to request your **event**
   */
  findOneEvent: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              event?: components['schemas']['Event']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One events */
  UpdateOneEvent: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Event']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              event?: components['schemas']['Event']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One event */
  deleteOneEvent: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              event?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many activityTargets
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **activityTargets**
   */
  findManyActivityTargets: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activityTargets?: components['schemas']['ActivityTarget'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One activityTarget */
  createOneActivityTarget: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityTarget']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              activityTarget?: components['schemas']['ActivityTarget']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One activityTarget
   * @description **depth** can be provided to request your **activityTarget**
   */
  findOneActivityTarget: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activityTarget?: components['schemas']['ActivityTarget']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One activityTargets */
  UpdateOneActivityTarget: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityTarget']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activityTarget?: components['schemas']['ActivityTarget']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One activityTarget */
  deleteOneActivityTarget: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activityTarget?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many activities
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **activities**
   */
  findManyActivities: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activities?: components['schemas']['Activity'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One activity */
  createOneActivity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Activity']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              activity?: components['schemas']['Activity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One activity
   * @description **depth** can be provided to request your **activity**
   */
  findOneActivity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activity?: components['schemas']['Activity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One activities */
  UpdateOneActivity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Activity']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activity?: components['schemas']['Activity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One activity */
  deleteOneActivity: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              activity?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many apiKeys
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **apiKeys**
   */
  findManyApiKeys: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              apiKeys?: components['schemas']['ApiKey'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One apiKey */
  createOneApiKey: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ApiKey']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              apiKey?: components['schemas']['ApiKey']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One apiKey
   * @description **depth** can be provided to request your **apiKey**
   */
  findOneApiKey: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              apiKey?: components['schemas']['ApiKey']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One apiKeys */
  UpdateOneApiKey: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ApiKey']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              apiKey?: components['schemas']['ApiKey']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One apiKey */
  deleteOneApiKey: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              apiKey?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many attachments
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **attachments**
   */
  findManyAttachments: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              attachments?: components['schemas']['Attachment'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One attachment */
  createOneAttachment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Attachment']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              attachment?: components['schemas']['Attachment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One attachment
   * @description **depth** can be provided to request your **attachment**
   */
  findOneAttachment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              attachment?: components['schemas']['Attachment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One attachments */
  UpdateOneAttachment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Attachment']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              attachment?: components['schemas']['Attachment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One attachment */
  deleteOneAttachment: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              attachment?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many blocklists
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **blocklists**
   */
  findManyBlocklists: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              blocklists?: components['schemas']['Blocklist'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One blocklist */
  createOneBlocklist: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Blocklist']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              blocklist?: components['schemas']['Blocklist']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One blocklist
   * @description **depth** can be provided to request your **blocklist**
   */
  findOneBlocklist: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              blocklist?: components['schemas']['Blocklist']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One blocklists */
  UpdateOneBlocklist: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Blocklist']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              blocklist?: components['schemas']['Blocklist']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One blocklist */
  deleteOneBlocklist: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              blocklist?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many comments
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **comments**
   */
  findManyComments: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              comments?: components['schemas']['Comment'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One comment */
  createOneComment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Comment']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              comment?: components['schemas']['Comment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One comment
   * @description **depth** can be provided to request your **comment**
   */
  findOneComment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              comment?: components['schemas']['Comment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One comments */
  UpdateOneComment: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Comment']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              comment?: components['schemas']['Comment']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One comment */
  deleteOneComment: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              comment?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many companies
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **companies**
   */
  findManyCompanies: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              companies?: components['schemas']['Company'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One company */
  createOneCompany: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Company']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              company?: components['schemas']['Company']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One company
   * @description **depth** can be provided to request your **company**
   */
  findOneCompany: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              company?: components['schemas']['Company']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One companies */
  UpdateOneCompany: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Company']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              company?: components['schemas']['Company']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One company */
  deleteOneCompany: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              company?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many connectedAccounts
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **connectedAccounts**
   */
  findManyConnectedAccounts: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              connectedAccounts?: components['schemas']['ConnectedAccount'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One connectedAccount */
  createOneConnectedAccount: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ConnectedAccount']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              connectedAccount?: components['schemas']['ConnectedAccount']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One connectedAccount
   * @description **depth** can be provided to request your **connectedAccount**
   */
  findOneConnectedAccount: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              connectedAccount?: components['schemas']['ConnectedAccount']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One connectedAccounts */
  UpdateOneConnectedAccount: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['ConnectedAccount']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              connectedAccount?: components['schemas']['ConnectedAccount']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One connectedAccount */
  deleteOneConnectedAccount: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              connectedAccount?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many favorites
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **favorites**
   */
  findManyFavorites: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              favorites?: components['schemas']['Favorite'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One favorite */
  createOneFavorite: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Favorite']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              favorite?: components['schemas']['Favorite']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One favorite
   * @description **depth** can be provided to request your **favorite**
   */
  findOneFavorite: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              favorite?: components['schemas']['Favorite']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One favorites */
  UpdateOneFavorite: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Favorite']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              favorite?: components['schemas']['Favorite']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One favorite */
  deleteOneFavorite: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              favorite?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find Many opportunities
   * @description **order_by**, **filter**, **limit**, **depth** or **last_cursor** can be provided to request your **opportunities**
   */
  findManyOpportunities: {
    parameters: {
      query?: {
        order_by?: components['parameters']['orderBy']
        filter?: components['parameters']['filter']
        limit?: components['parameters']['limit']
        depth?: components['parameters']['depth']
        last_cursor?: components['parameters']['lastCursor']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              opportunities?: components['schemas']['Opportunity'][]
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Create One opportunity */
  createOneOpportunity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Opportunity']
      }
    }
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          'application/json': {
            data?: {
              opportunity?: components['schemas']['Opportunity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /**
   * Find One opportunity
   * @description **depth** can be provided to request your **opportunity**
   */
  findOneOpportunity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              opportunity?: components['schemas']['Opportunity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Update One opportunities */
  UpdateOneOpportunity: {
    parameters: {
      query?: {
        depth?: components['parameters']['depth']
      }
      path: {
        id: components['parameters']['idPath']
      }
    }
    /** @description body */
    requestBody: {
      content: {
        'application/json': components['schemas']['Opportunity']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              opportunity?: components['schemas']['Opportunity']
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
  /** Delete One opportunity */
  deleteOneOpportunity: {
    parameters: {
      path: {
        id: components['parameters']['idPath']
      }
    }
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          'application/json': {
            data?: {
              opportunity?: {
                /** Format: uuid */
                id?: string
              }
            }
          }
        }
      }
      400: components['responses']['400']
      401: components['responses']['401']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
