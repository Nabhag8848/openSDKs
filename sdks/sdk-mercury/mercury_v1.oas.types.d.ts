/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = {[P in Exclude<keyof T, keyof U>]?: never}
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never

export interface paths {
  '/accounts': {
    /**
     * /accounts
     * @description Retrieve information about all your bank accounts
     */
    get: operations['accounts']
  }
  '/account/{id}': {
    /**
     * /account/:id
     * @description Retrieve information about a specific account
     */
    get: operations['accountsid']
  }
  '/account/{id}/cards': {
    /**
     * /account/:id/cards
     * @description Retrieve information about cards associated with a specific account. Note that status and physical card status are two separate concepts. Either one being set to something other than "active" could cause a transaction to be declined. For example, your credit card could be active overall (status = "active"), but locked to prevent in-person usage of the physical card itself (physicalCardStatus = "locked"). Alternatively, your credit card could have no restrictions on the use of the physical card itself (physicalCardStatus = "active") but the overall card could be frozen (status = "frozen") to decline all authorizations, no matter the circumstance.
     */
    get: operations['accountidcards']
  }
  '/recipients': {
    /**
     * /recipients
     * @description Retrieve information about all of your recipients
     */
    get: operations['recipients-1']
    /**
     * /recipients
     * @description Add a new recipient
     */
    post: operations['recipients-2']
  }
  '/recipient/{id}': {
    /**
     * /recipient/:id
     * @description Retrieve information about a specific recipient
     */
    get: operations['recipientsid']
    /**
     * /recipient/:id
     * @description Edit information about a specific recipient
     */
    post: operations['recipientid']
  }
  '/account/{id}/transactions': {
    /**
     * /account/:id/transactions
     * @description Retrieve information about your transactions for a specific account
     */
    get: operations['transactions-1']
    /**
     * /account/:id/transactions
     * @description Create a new transaction, currently only supporting ACH payments
     */
    post: operations['transactions-2']
  }
  '/account/{id}/transaction/{transactionId}': {
    /**
     * /account/:id/transaction/:transactionId
     * @description Retrieve information about a specific transaction for a specific account
     */
    get: operations['accountidtransactiontransactionid']
  }
  '/account/{id}/statements': {
    /**
     * /account/:id/statements
     * @description Retrieve statement information for a depository account in a given time period (Note: For now, treasury and credit accounts are not supported on this endpoint. You may request this functionality by reaching out to support.)
     */
    get: operations['accountidstatement']
  }
  '/treasury': {
    /** /treasury */
    get: operations['treasury-1']
  }
  '/credit': {
    /** /credit */
    get: operations['credit-1']
  }
  '/account/{id}/request-send-money': {
    /**
     * /account/:id/request-send-money
     * @description Create an ACH payment that requires admin approval
     */
    post: operations['accountidrequestsendmoney']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * /accounts
   * @description Retrieve information about all your bank accounts
   */
  accounts: {
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            accounts?: {
              /** @example 12345 */
              accountNumber?: string
              /**
               * @default 0
               * @example 999910.38
               */
              availableBalance?: number
              /** @example 2019-09-04T00:43:41.01958Z */
              createdAt?: string
              /**
               * @default 0
               * @example 999910.38
               */
              currentBalance?: number
              /** @example 0ad81488-cead-11e9-80e2-8fecf9556cc6 */
              id?: string
              /** @example checking */
              kind?: string
              /** @example Mercury Checking ••5678 */
              name?: string
              /** @example 051502395 */
              routingNumber?: string
              /** @example active */
              status?: string
              /**
               * @default true
               * @example true
               */
              canReceiveTransactions?: boolean
              /** @example mercury */
              type?: string
              /** @example New primary account */
              nickname?: string
              /** @example Mercury Technologies Inc. */
              legalBusinessName?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id
   * @description Retrieve information about a specific account
   */
  accountsid: {
    parameters: {
      path: {
        /** @description Your 36-character account UUID. */
        id: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            /** @example 12345 */
            accountNumber?: string
            /**
             * @default 0
             * @example 999910.38
             */
            availableBalance?: number
            /** @example 2019-09-04T00:43:41.01958Z */
            createdAt?: string
            /**
             * @default 0
             * @example 999910.38
             */
            currentBalance?: number
            /** @example 0ad81488-cead-11e9-80e2-8fecf9556cc6 */
            id?: string
            /** @example checking */
            kind?: string
            /** @example Mercury Checking ••5678 */
            name?: string
            /** @example 051502395 */
            routingNumber?: string
            /** @example active */
            status?: string
            /**
             * @default true
             * @example true
             */
            canReceiveTransactions?: boolean
            /** @example mercury */
            type?: string
            /** @example Checking account */
            nickname?: string
            /** @example Mercury Technologies Inc. */
            legalBusinessName?: string
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': {
            errors?: {
              /** @example Couldn't find the resource for this ID */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/cards
   * @description Retrieve information about cards associated with a specific account. Note that status and physical card status are two separate concepts. Either one being set to something other than "active" could cause a transaction to be declined. For example, your credit card could be active overall (status = "active"), but locked to prevent in-person usage of the physical card itself (physicalCardStatus = "locked"). Alternatively, your credit card could have no restrictions on the use of the physical card itself (physicalCardStatus = "active") but the overall card could be frozen (status = "frozen") to decline all authorizations, no matter the circumstance.
   */
  accountidcards: {
    parameters: {
      path: {
        /** @description Your 36-character account uuid. */
        id: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            cards?: {
              /** @example 43d2560b-e468-4b13-a6c3-4aba9831c843 */
              cardId?: string
              /** @example 2019-09-04T00:43:41.01958Z */
              createdAt?: string
              /** @example 5678 */
              lastFourDigits?: string
              /** @example Big S. Pender */
              nameOnCard?: string
              /** @example visa */
              network?: string
              /** @example active */
              status?: string
              /** @example active */
              physicalCardStatus?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': {
            errors?: {
              /** @example Couldn't find the resource for this ID */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /recipients
   * @description Retrieve information about all of your recipients
   */
  'recipients-1': {
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            recipients?: {
              address?: unknown
              checkInfo?: unknown
              dateLastPaid?: unknown
              /** @example ach */
              defaultPaymentMethod?: string
              domesticWireRoutingInfo?: unknown
              electronicRoutingInfo?: unknown
              emails?: unknown[]
              /** @example 73dbe710-fb4a-11e9-b89d-07e77a363005 */
              id?: string
              internationalWireRoutingInfo?: unknown
              /** @example Rocco's Cafe */
              name?: string
              /** @example active */
              status?: string
            }[]
            /**
             * @default 0
             * @example 2
             */
            total?: number
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /recipients
   * @description Add a new recipient
   */
  'recipients-2': {
    requestBody?: {
      content: {
        'application/json': {
          name: string
          emails: string[]
          /** @description Information needed to send a physical check. */
          checkInfo?: {
            /** @description Mailing address for sending a physical check. */
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
          }
          /** @description "check" | "electronic" | "domesticWire" | "internationalWire" */
          paymentMethod: string
          /** @description Information needed to send an ACH. Note that all fields in this object are required. */
          electronicRoutingInfo?: {
            accountNumber: string
            routingNumber: string
            /** @description "businessChecking" | "businessSavings" | "personalChecking" | "personalSavings" */
            electronicAccountType: string
            /** @description This has to be the recipient's *legal address*. */
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
          }
          /** @description Information needed to send a domestic wire. Note that all fields in this object are required. */
          domesticWireRoutingInfo?: Record<string, never>
          /** @description Information needed to send an international wire. Note that iban, swiftCode, and address are always required, whereas country-specific fields are only required if the recipient resides in that country. */
          internationalWireRoutingInfo?: {
            iban: string
            swiftCode: string
            correspondentRoutingNumber?: string
            correspondentSwift?: string
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
            phoneNumber?: string
            canadianBankCode?: string
            canadianTransitNumber?: string
            australianBSBCode?: string
            indianIFSCCode?: string
          }
          /** @description Deprecated. Use checkInfo instead. */
          address?: {
            address1: string
            address2?: string
            city: string
            /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
            region: string
            postalCode: string
            /** @description ISO3166Alpha2 */
            country: string
          }
          nickname?: string
        }
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /recipient/:id
   * @description Retrieve information about a specific recipient
   */
  recipientsid: {
    parameters: {
      path: {
        /** @description 36-character recipient uuid. */
        id: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            address?: unknown
            checkInfo?: unknown
            dateLastPaid?: unknown
            /** @example ach */
            defaultPaymentMethod?: string
            domesticWireRoutingInfo?: unknown
            electronicRoutingInfo?: {
              /** @example 00009 */
              accountNumber?: string
              /** @example BANK OF AMERICA, N.A. */
              bankName?: string
              /** @example 122340358 */
              routingNumber?: string
              address?: {
                /** @example 3124 Cedar Lane */
                address1?: string
                address2?: unknown
                /** @example Wantagh */
                city?: string
                /** @example US */
                country?: string
                /** @example 11793 */
                postalCode?: string
                /** @example NY */
                region?: string
              }
              /** @example businessChecking */
              electronicAccountType?: string
            }
            emails?: string[]
            /** @example 0938883c-f1fe-11e9-b356-9ff04239ca51 */
            id?: string
            internationalWireRoutingInfo?: unknown
            /** @example Monroe Testperson */
            name?: string
            /** @example active */
            status?: string
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': {
            errors?: {
              /** @example Couldn't find the resource for this ID */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /recipient/:id
   * @description Edit information about a specific recipient
   */
  recipientid: {
    parameters: {
      path: {
        /** @description 36-character recipient uuid. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          name?: string
          nickname?: string
          emails?: string[]
          /** @description Information needed to send a check. */
          checkInfo?: {
            /** @description Mailing address for sending a physical check. */
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
          }
          /** @description Information needed to send an ACH. Note that all fields in this object are required. */
          electronicRoutingInfo?: {
            accountNumber: string
            routingNumber: string
            /** @description "businessChecking" | "businessSavings" | "personalChecking" | "personalSavings" */
            electronicAccountType: string
            /** @description This has to be the recipient's *legal address*. */
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
          }
          /** @description Information needed to send a domestic wire. Note that all fields in this object are required. */
          domesticWireRoutingInfo?: {
            accountNumber: string
            routingNumber: string
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
          }
          /** @description Information needed to send an international wire. Note that iban, swiftCode, and address are always required, whereas country-specific fields are only required if the recipient resides in that country. */
          internationalWireRoutingInfo?: {
            iban: string
            swiftCode: string
            correspondentRoutingNumber?: string
            correspondentSwift?: string
            address?: {
              address1: string
              address2?: string
              city: string
              /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
              region: string
              postalCode: string
              /** @description ISO3166Alpha2 */
              country: string
            }
            phoneNumber?: string
            canadianBankCode?: string
            canadianTransitNumber?: string
            australianBSBCode?: string
            indianIFSCCode?: string
          }
          /** @description Deprecated. Use checkInfo instead. */
          address?: {
            address1: string
            address2?: string
            city: string
            /** @description Either a two-letter US state code like "CA" for California or a free-form identification of a particular region worldwide */
            region: string
            postalCode: string
            /** @description ISO3166Alpha2 */
            country: string
          }
        }
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            address?: unknown
            checkInfo?: unknown
            dateLastPaid?: unknown
            /** @example ach */
            defaultPaymentMethod?: string
            domesticWireRoutingInfo?: unknown
            electronicRoutingInfo?: {
              /** @example 00009 */
              accountNumber?: string
              /** @example BANK OF AMERICA, N.A. */
              bankName?: string
              /** @example 122340358 */
              routingNumber?: string
              address?: {
                /** @example 3124 Cedar Lane */
                address1?: string
                address2?: unknown
                /** @example Wantagh */
                city?: string
                /** @example US */
                country?: string
                /** @example 11793 */
                postalCode?: string
                /** @example NY */
                region?: string
              }
              /** @example businessChecking */
              electronicAccountType?: string
            }
            emails?: string[]
            /** @example 0938883c-f1fe-11e9-b356-9ff04239ca51 */
            id?: string
            internationalWireRoutingInfo?: unknown
            /** @example Monroe Testperson */
            name?: string
            /** @example active */
            status?: string
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': {
            errors?: {
              /** @example Couldn't find the resource for this ID */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/transactions
   * @description Retrieve information about your transactions for a specific account
   */
  'transactions-1': {
    parameters: {
      query?: {
        /** @description Limit how many transactions you want to retrieve. */
        limit?: number
        /** @description The number of most recent transactions you want to omit. */
        offset?: number
        /** @description "pending" | "sent" | "cancelled" | "failed" */
        status?: string
        /** @description Earliest createdAt date to filter for. If it's not provided, it defaults to 30 days ago. Format: YYYY-MM-DD or an ISO 8601 string. Please note that your Mercury transactions on your Dashboard might have their postedAt date displayed, as opposed to createdAt */
        start?: string
        /** @description Latest createdAt date fo filter for. If it's not provided, it defaults to current day. Format: YYYY-MM-DD or an ISO 8601 string. Please note that your Mercury transactions on your Dashboard might have their postedAt date displayed, as opposed to createdAt */
        end?: string
        /** @description Search term to look for in transaction descriptions. */
        search?: string
      }
      path: {
        /** @description Your 36-character account uuid. */
        id: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            /**
             * @default 0
             * @example 2
             */
            total?: number
            transactions?: {
              /**
               * @default 0
               * @example 1000000
               */
              amount?: number
              bankDescription?: unknown
              /** @example dd486506-d66b-11e9-8d8a-0b2e6a550f30 */
              counterpartyId?: string
              /** @example Fake P. Erson */
              counterpartyName?: string
              counterpartyNickname?: unknown
              /** @example 2019-09-13T21:17:15.974788Z */
              createdAt?: string
              /** @example https://mercury.com/transactions/dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
              dashboardLink?: string
              details?: {
                address?: unknown
                domesticWireRoutingInfo?: unknown
                electronicRoutingInfo?: unknown
                internationalWireRoutingInfo?: unknown
                debitCardInfo?: {
                  /** @example a08d1b00-e8f8-11ec-a869-b783eb9b2601 */
                  id?: string
                }
              }
              /** @example 2019-09-13T21:17:17.387585Z */
              estimatedDeliveryDate?: string
              failedAt?: unknown
              /** @example dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
              id?: string
              /** @example externalTransfer */
              kind?: string
              note?: unknown
              /** @example 2019-09-13T21:17:17.387585Z */
              postedAt?: string
              reasonForFailure?: unknown
              /** @example sent */
              status?: string
              feeId?: unknown
              currencyExchangeInfo?: {
                /** @example USD */
                convertedFromCurrency?: string
                /** @example GBP */
                convertedToCurrency?: string
                /**
                 * @default 0
                 * @example 5
                 */
                convertedFromAmount?: number
                /**
                 * @default 0
                 * @example 3.99
                 */
                convertedToAmount?: number
                /**
                 * @default 0
                 * @example 0.05
                 */
                feeAmount?: number
                /**
                 * @default 0
                 * @example 0.01
                 */
                feePercentage?: number
                /**
                 * @default 0
                 * @example 0.798
                 */
                exchangeRate?: number
                /** @example d99358a8-db86-11ec-b497-5708fdcf68dc */
                feeTransactionId?: string
              }
              compliantWithReceiptPolicy?: unknown
              hasGeneratedReceipt?: unknown
              creditAccountPeriodId?: unknown
              mercuryCategory?: unknown
              generalLedgerCodeName?: unknown
              attachments?: {
                /** @example receipt.pdf */
                fileName?: string
                /** @example https://mercury.com/ */
                url?: string
                /** @example receipt */
                attachmentType?: string
              }[]
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/transactions
   * @description Create a new transaction, currently only supporting ACH payments
   */
  'transactions-2': {
    parameters: {
      path: {
        /** @description Your 36-character account uuid. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description Recipient ID from the [/recipients](https://mercurytechnologies.readme.io/reference#recipients-1) endpoint.
           * @default <recipient_id>
           */
          recipientId: string
          /**
           * Format: double
           * @description Amount of USD you want to send, must be a positive number.
           * @default 10
           */
          amount: number
          /**
           * @description Payment method to use, currently only supports "ach"
           * @default ach
           */
          paymentMethod: string
          /** @description Optional note */
          note?: string
          /** @description Optional external memo */
          externalMemo?: string
          /** @description Unique string identifying the transaction */
          idempotencyKey: string
        }
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description 400 */
      400: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example You cannot initiate a transaction within the same account */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, we ran into a problem with your organization */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Memos must be less than 140 characters */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, you have insufficient funds to make that transaction */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example No matching token found */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, you're not a member of that organization */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example Sorry, we couldn't find an account with that id */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, we couldn't find a counter transaction party with that id */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 409 */
      409: {
        content: {
          'application/json': {
            /**
             * @default 0
             * @example 1000000
             */
            amount?: number
            bankDescription?: unknown
            /** @example dd486506-d66b-11e9-8d8a-0b2e6a550f30 */
            counterpartyId?: string
            /** @example Fake P. Erson */
            counterpartyName?: string
            counterpartyNickname?: unknown
            /** @example 2019-09-13T21:17:15.974788Z */
            createdAt?: string
            /** @example https://mercury.co/transactions/dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            dashboardLink?: string
            details?: {
              address?: unknown
              domesticWireRoutingInfo?: unknown
              electronicRoutingInfo?: unknown
              internationalWireRoutingInfo?: unknown
            }
            /** @example 2019-09-13T21:17:17.387585Z */
            estimatedDeliveryDate?: string
            failedAt?: unknown
            /** @example dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            id?: string
            /** @example externalTransfer */
            kind?: string
            note?: unknown
            /** @example 2019-09-13T21:17:17.387585Z */
            postedAt?: string
            reasonForFailure?: unknown
            /** @example sent */
            status?: string
          }
        }
      }
      /** @description 500 */
      500: {
        content: {
          'application/json': {
            errors?: {
              /** @example Sorry, we ran into an error processing that payment. Please contact help@mercury.co */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/transaction/:transactionId
   * @description Retrieve information about a specific transaction for a specific account
   */
  accountidtransactiontransactionid: {
    parameters: {
      path: {
        /** @description Your 36-character account uuid. */
        id: string
        /** @description Your 36-character transaction uuid. */
        transactionId: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            /**
             * @default 0
             * @example 1000000
             */
            amount?: number
            bankDescription?: unknown
            /** @example dd486506-d66b-11e9-8d8a-0b2e6a550f30 */
            counterpartyId?: string
            /** @example Fake P. Erson */
            counterpartyName?: string
            counterpartyNickname?: unknown
            /** @example 2019-09-13T21:17:15.974788Z */
            createdAt?: string
            /** @example https://mercury.com/transactions/dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            dashboardLink?: string
            details?: {
              address?: unknown
              domesticWireRoutingInfo?: unknown
              electronicRoutingInfo?: unknown
              internationalWireRoutingInfo?: unknown
            }
            /** @example 2019-09-13T21:17:17.387585Z */
            estimatedDeliveryDate?: string
            failedAt?: unknown
            /** @example dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            id?: string
            /** @example externalTransfer */
            kind?: string
            note?: unknown
            /** @example 2019-09-13T21:17:17.387585Z */
            postedAt?: string
            reasonForFailure?: unknown
            /** @example sent */
            status?: string
            feeId?: unknown
            currencyExchangeInfo?: {
              /** @example USD */
              convertedFromCurrency?: string
              /** @example GBP */
              convertedToCurrency?: string
              /**
               * @default 0
               * @example 5
               */
              convertedFromAmount?: number
              /**
               * @default 0
               * @example 3.99
               */
              convertedToAmount?: number
              /**
               * @default 0
               * @example 0.05
               */
              feeAmount?: number
              /**
               * @default 0
               * @example 0.01
               */
              feePercentage?: number
              /**
               * @default 0
               * @example 0.798
               */
              exchangeRate?: number
              /** @example d99358a8-db86-11ec-b497-5708fdcf68dc */
              feeTransactionId?: string
            }
            compliantWithReceiptPolicy?: unknown
            hasGeneratedReceipt?: unknown
            creditAccountPeriodId?: unknown
            mercuryCategory?: unknown
            generalLedgerCodeName?: unknown
            attachments?: {
              /** @example receipt.pdf */
              fileName?: string
              /** @example https://mercury.com/ */
              url?: string
              /** @example receipt */
              attachmentType?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/statements
   * @description Retrieve statement information for a depository account in a given time period (Note: For now, treasury and credit accounts are not supported on this endpoint. You may request this functionality by reaching out to support.)
   */
  accountidstatement: {
    parameters: {
      query?: {
        /** @description Filter the statements so that their startDate is equal to or later than this date. Format: YYYY-MM-DD. */
        start?: string
        /** @description Filter the statements so that their endDate is less than or equal to this date. Format: YYYY-MM-DD. */
        end?: string
      }
      path: {
        /** @description Your 36-character account UUID. */
        id: string
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            statements?: {
              /** @example 1234567765 */
              accountNumber?: string
              companyLegalAddress?: {
                /** @example 660 Mission Street */
                address1?: string
                /** @example Floor 4 */
                address2?: string
                /** @example San Francisco */
                city?: string
                /** @example US */
                country?: string
                /** @example Mercury */
                name?: string
                /** @example 94105 */
                postalCode?: string
                /** @example CA */
                region?: string
              }
              /** @example Mercury Technologies, Inc. */
              companyLegalName?: string
              /** @example 82-1234567 */
              ein?: string
              /** @example 2020-03-31T23:59:59Z */
              endDate?: string
              /**
               * @default 0
               * @example 99509973.81
               */
              endingBalance?: number
              /** @example 012345678 */
              routingNumber?: string
              /** @example 2020-03-01T00:00:00Z */
              startDate?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': {
            errors?: {
              /** @example Couldn't find the resource for this ID */
              message?: string
            }
          }
        }
      }
    }
  }
  /** /treasury */
  'treasury-1': {
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            accounts?: {
              /**
               * @default 0
               * @example 999999.66
               */
              availableBalance?: number
              /** @example 2021-08-19T20:34:41.803931Z */
              createdAt?: string
              /**
               * @default 0
               * @example 999999.66
               */
              currentBalance?: number
              /** @example 68e679a8-e25b-11ea-eaaa-ab8b85777eed */
              id?: string
              /** @example active */
              status?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /** /credit */
  'credit-1': {
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': {
            accounts?: {
              /**
               * @default 0
               * @example 999999.66
               */
              availableBalance?: number
              /** @example 2021-08-19T20:34:41.803931Z */
              createdAt?: string
              /**
               * @default 0
               * @example 999999.66
               */
              currentBalance?: number
              /** @example 68e679a8-e25b-11ea-eaaa-ab8b85777eed */
              id?: string
              /** @example active */
              status?: string
            }[]
          }
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': {
            errors?: {
              /** @example No matching token found */
              message?: string
            }
          }
        }
      }
    }
  }
  /**
   * /account/:id/request-send-money
   * @description Create an ACH payment that requires admin approval
   */
  accountidrequestsendmoney: {
    parameters: {
      path: {
        /** @description Your 36-character account uuid. */
        id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description Recipient ID from the [/recipients](https://mercurytechnologies.readme.io/reference#recipients-1) endpoint.
           * @default <recipient_id>
           */
          recipientId: string
          /**
           * Format: double
           * @description Amount of USD you want to send, must be a positive number.
           * @default 10
           */
          amount: number
          /**
           * @description Payment method to use, currently only supports "ach"
           * @default ach
           */
          paymentMethod: string
          /** @description Optional note */
          note?: string
          /** @description Optional external memo */
          externalMemo?: string
          /** @description Unique string identifying the transaction */
          idempotencyKey: string
        }
      }
    }
    responses: {
      /** @description 200 */
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description 400 */
      400: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example You cannot initiate a transaction within the same account */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, we ran into a problem with your organization */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Memos must be less than 140 characters */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, you have insufficient funds to make that transaction */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 401 */
      401: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example No matching token found */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, you're not a member of that organization */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 404 */
      404: {
        content: {
          'application/json': OneOf<
            [
              {
                errors?: {
                  /** @example Sorry, we couldn't find an account with that id */
                  message?: string
                }
              },
              {
                errors?: {
                  /** @example Sorry, we couldn't find a counter transaction party with that id */
                  message?: string
                }
              },
            ]
          >
        }
      }
      /** @description 409 */
      409: {
        content: {
          'application/json': {
            /**
             * @default 0
             * @example 1000000
             */
            amount?: number
            bankDescription?: unknown
            /** @example dd486506-d66b-11e9-8d8a-0b2e6a550f30 */
            counterpartyId?: string
            /** @example Fake P. Erson */
            counterpartyName?: string
            counterpartyNickname?: unknown
            /** @example 2019-09-13T21:17:15.974788Z */
            createdAt?: string
            /** @example https://mercury.co/transactions/dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            dashboardLink?: string
            details?: {
              address?: unknown
              domesticWireRoutingInfo?: unknown
              electronicRoutingInfo?: unknown
              internationalWireRoutingInfo?: unknown
            }
            /** @example 2019-09-13T21:17:17.387585Z */
            estimatedDeliveryDate?: string
            failedAt?: unknown
            /** @example dd4896c0-d66b-11e9-8d8a-cf31cc71dda0 */
            id?: string
            /** @example externalTransfer */
            kind?: string
            note?: unknown
            /** @example 2019-09-13T21:17:17.387585Z */
            postedAt?: string
            reasonForFailure?: unknown
            /** @example sent */
            status?: string
          }
        }
      }
      /** @description 500 */
      500: {
        content: {
          'application/json': {
            errors?: {
              /** @example Sorry, we ran into an error processing that payment. Please contact help@mercury.co */
              message?: string
            }
          }
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
