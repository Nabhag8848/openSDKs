/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & {[P in K]-?: T[P]}

export interface paths {
  '/chat/channels': {
    /** @description Get all the channels */
    get: operations['chat_channels_getChannels']
  }
  '/chat/message': {
    /** @description Create a new message */
    post: operations['chat_messages_createMessage']
  }
  '/chat/users': {
    /** @description Get all the users */
    get: operations['chat_users_getUsers']
  }
  '/connection': {
    /** @description Get details of a connection for a specific tenant. */
    get: operations['connection_getConnection']
    /** @description Delete a connection for a specific tenant. */
    delete: operations['connection_deleteConnection']
  }
  '/connection/all': {
    /** @description Get details of all the connection for a specific account at Revert. */
    get: operations['connection_getAllConnections']
  }
  '/connection/webhook': {
    /** @description Get details of a connection webhook for a specific tenant. */
    get: operations['connection_getWebhook']
    /** @description Create a webhook endpoint that listens to a connection events of a specific tenant. */
    post: operations['connection_createWebhook']
    /** @description Delete the connection webhook for a specific tenant. */
    delete: operations['connection_deleteWebhook']
  }
  '/connection/integration-status/{revertPublicToken}': {
    /** @description Get the OAuth connection event status. This endpoint responds with a `http.ServerResponse` instead of `json`. */
    get: operations['connection_getIntegrationStatus']
  }
  '/connection/import': {
    /** @description Import multiple connections for a specific environment. Use this to bulk import connections as a one-time exercise. */
    post: operations['connection_importConnections']
  }
  '/crm/companies/{id}': {
    /** @description Get details of a company */
    get: operations['crm_company_getCompany']
    /** @description Update a company */
    patch: operations['crm_company_updateCompany']
  }
  '/crm/companies': {
    /** @description Get all the companies */
    get: operations['crm_company_getCompanies']
    /** @description Create a new company */
    post: operations['crm_company_createCompany']
  }
  '/crm/companies/search': {
    /** @description Search for companies */
    post: operations['crm_company_searchCompanies']
  }
  '/crm/contacts/{id}': {
    /** @description Get details of a contact */
    get: operations['crm_contact_getContact']
    /** @description Update a contact */
    patch: operations['crm_contact_updateContact']
  }
  '/crm/contacts': {
    /** @description Get all the contacts */
    get: operations['crm_contact_getContacts']
    /** @description Create a new contact */
    post: operations['crm_contact_createContact']
  }
  '/crm/contacts/search': {
    /** @description Search for contacts */
    post: operations['crm_contact_searchContacts']
  }
  '/crm/deals/{id}': {
    /** @description Get details of a deal */
    get: operations['crm_deal_getDeal']
    /** @description Update a deal */
    patch: operations['crm_deal_updateDeal']
  }
  '/crm/deals': {
    /** @description Get all the deals */
    get: operations['crm_deal_getDeals']
    /** @description Create a new deal */
    post: operations['crm_deal_createDeal']
  }
  '/crm/deals/search': {
    /** @description Search for deals */
    post: operations['crm_deal_searchDeals']
  }
  '/crm/events/{id}': {
    /** @description Get details of a event */
    get: operations['crm_event_getEvent']
    /** @description Delete details of an event in a CRM */
    delete: operations['crm_event_deleteEvent']
    /** @description Update a event */
    patch: operations['crm_event_updateEvent']
  }
  '/crm/events': {
    /** @description Get all the events */
    get: operations['crm_event_getEvents']
    /** @description Create a new event */
    post: operations['crm_event_createEvent']
  }
  '/crm/events/search': {
    /** @description Search for events */
    post: operations['crm_event_searchEvents']
  }
  '/crm/leads/{id}': {
    /** @description Get details of a lead */
    get: operations['crm_lead_getLead']
    /** @description Update a lead */
    patch: operations['crm_lead_updateLead']
  }
  '/crm/leads': {
    /** @description Get all the leads */
    get: operations['crm_lead_getLeads']
    /** @description Create a new lead */
    post: operations['crm_lead_createLead']
  }
  '/crm/leads/search': {
    /** @description Search for leads */
    post: operations['crm_lead_searchLeads']
  }
  '/crm/notes/{id}': {
    /** @description Get details of a note */
    get: operations['crm_note_getNote']
    /** @description Update a note */
    patch: operations['crm_note_updateNote']
  }
  '/crm/notes': {
    /** @description Get all the notes */
    get: operations['crm_note_getNotes']
    /** @description Create a new note */
    post: operations['crm_note_createNote']
  }
  '/crm/notes/search': {
    /** @description Search for notes */
    post: operations['crm_note_searchNotes']
  }
  '/crm/properties/{objectName}': {
    /** @description Get object properties for connection */
    get: operations['crm_properties_getObjectProperties']
    /** @description Set custom properties on an object for a given connection */
    post: operations['crm_properties_setCustomProperties']
  }
  '/crm/proxy': {
    /** @description Call the native CRM api for a specific connection */
    post: operations['crm_proxy_tunnel']
  }
  '/crm/tasks/{id}': {
    /** @description Get details of a task */
    get: operations['crm_task_getTask']
    /** @description Update a task */
    patch: operations['crm_task_updateTask']
  }
  '/crm/tasks': {
    /** @description Get all the tasks */
    get: operations['crm_task_getTasks']
    /** @description Create a new task */
    post: operations['crm_task_createTask']
  }
  '/crm/tasks/search': {
    /** @description Search for tasks */
    post: operations['crm_task_searchTasks']
  }
  '/crm/users/{id}': {
    /** @description Get details of a user */
    get: operations['crm_user_getUser']
  }
  '/crm/users': {
    /** @description Get all the users */
    get: operations['crm_user_getUsers']
    /** @description Create a new user */
    post: operations['crm_user_createUser']
  }
  '/field-mapping': {
    /** @description Get field mappings configs for a connection */
    get: operations['fieldMapping_getFieldMappingConfig']
    /** @description Create field mappings for a connection after user input */
    post: operations['fieldMapping_createFieldMapping']
    /** @description Delete field mappings for a connection */
    delete: operations['fieldMapping_deleteFieldMapping']
  }
  '/field-mapping/mappings': {
    /** @description Get field mappings for a connection */
    get: operations['fieldMapping_getFieldMappings']
  }
  '/field-mapping/config': {
    /** @description Create field mappings config for an account */
    post: operations['fieldMapping_createAccountFieldMappingConfig']
    /** @description Delete field mappings config for an account */
    delete: operations['fieldMapping_deleteAccountFieldMappingConfig']
  }
  '/internal/account': {
    /** @description Get details of a revert user account */
    post: operations['internal_account_getAccountDetails']
  }
  '/internal/account/credentials': {
    /** @description Update account credentials (customer app token, secret, scope) */
    post: operations['internal_account_updateAccountCredentials']
  }
  '/internal/analytics': {
    /** @description Get Analytics of your revert account */
    post: operations['internal_analytics_getAnalytics']
  }
  '/internal/telemetry': {
    /** @description Create telemetry entry for a deployment */
    post: operations['internal_telemetry_createTelemetryEntry']
  }
  '/metadata/crms': {
    /** @description Retrieve a list of CRMs available for this account from the database based on the public token. */
    get: operations['metadata_getCrms']
  }
  '/ticket/collections': {
    /** @description Get all the collections */
    get: operations['ticket_collection_getCollections']
  }
  '/ticket/comments/{id}': {
    /** @description Get details of a comment */
    get: operations['ticket_comment_getComment']
    /** @description Update comment */
    patch: operations['ticket_comment_updateComment']
  }
  '/ticket/comments': {
    /** @description Get all the comments */
    get: operations['ticket_comment_getComments']
    /** @description Post comment */
    post: operations['ticket_comment_createComment']
  }
  '/ticket/proxy': {
    /** @description Call the native Ticketing app's api for a specific connection */
    post: operations['ticket_proxy_tunnel']
  }
  '/ticket/tasks/{id}': {
    /** @description Get details of a task */
    get: operations['ticket_task_getTask']
    /** @description Update a task */
    patch: operations['ticket_task_updateTask']
  }
  '/ticket/tasks': {
    /** @description Get all the tasks */
    get: operations['ticket_task_getTasks']
    post: operations['ticket_task_createTask']
  }
  '/ticket/users/{id}': {
    /** @description Get details of a user */
    get: operations['ticket_user_getUser']
  }
  '/ticket/users': {
    /** @description Get all the users */
    get: operations['ticket_user_getUsers']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** chatGetChannelsResponse */
    chatGetChannelsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonChannel'][]
    }
    /** chatCreateorUpdateMessageRequest */
    chatCreateorUpdateMessageRequest: components['schemas']['commonMessage']
    /** chatCreateorUpdateMessageResponse */
    chatCreateorUpdateMessageResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonMessage']
    }
    /** chatGetUsersResponse */
    chatGetUsersResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonUserChat'][]
    }
    /** commonCompanyAssociation */
    commonCompanyAssociation: {
      /** @description The id of the deal to associate with company */
      dealId?: string | null
    }
    /** commonContactAssociation */
    commonContactAssociation: {
      /** @description The id of the deal to associate with contact */
      dealId?: string | null
      /** @description The id of lead to associate with contact for close crm */
      leadId?: string | null
    }
    /** commonDealAssociation */
    commonDealAssociation: {
      /** @description The id of the contact to associate with deal */
      contactId?: string | null
      /** @description The id of the company to associate with deal */
      companyId?: string | null
    }
    /** commonEventAssociation */
    commonEventAssociation: {
      /** @description The id of the deal to associate with event */
      dealId?: string | null
      /** @description The id of the contact to associate with event */
      contactId?: string | null
    }
    /** commonLeadAssociation */
    commonLeadAssociation: {
      /** @description The id of the contact to associate with lead */
      contactId?: string | null
      /** @description The id of the company to associate with lead */
      companyId?: string | null
      /** @description The id of the deal to associate with lead */
      dealId?: string | null
    }
    /** commonNoteAssociation */
    commonNoteAssociation: {
      /** @description The id of the contact to associate with note */
      contactId?: string | null
      /** @description The id of the company to associate with note */
      companyId?: string | null
      /** @description The id of the lead to associate with note */
      leadId?: string | null
      /** @description The id of the deal to associate with note */
      dealId?: string | null
    }
    /** commonTaskAssociation */
    commonTaskAssociation: {
      /** @description The id of the deal to associate with task */
      dealId?: string | null
    }
    /** commonUserAssociation */
    commonUserAssociation: {
      /** @description The id of the deal to associate with user */
      dealId?: string | null
    }
    /** commonBaseError */
    commonBaseError: {
      error: string
    }
    /** commonAccount */
    commonAccount: {
      id: string
      tenant_count: number
      private_token: string
      public_token: string
      domain: string
      skipWaitlist: boolean
      users?: components['schemas']['commonRevertUser'][] | null
      apps?: components['schemas']['commonApp'][] | null
    }
    /** commonApp */
    commonApp: {
      id: string
      tp_id: components['schemas']['commonTPID']
      scope?: string[] | null
      app_client_id?: string | null
      app_client_secret?: string | null
      owner_account_public_token: string
      account?: components['schemas']['commonAccount']
      connections?: components['schemas']['commonConnection'][] | null
      is_revert_app: boolean
      app_config?: components['schemas']['commonAppConfig']
    }
    /** commonRevertUser */
    commonRevertUser: {
      id: string
      domain: string
      email: string
      accountId: string
      account?: components['schemas']['commonAccount']
    }
    /** commonConnection */
    commonConnection: {
      tp_id: components['schemas']['commonTPID']
      tp_access_token: string
      tp_refresh_token?: string | null
      tp_customer_id: string
      t_id: string
      tp_account_url?: string | null
      owner_account_public_token: string
      app_client_id?: string | null
      app_client_secret?: string | null
      app?: components['schemas']['commonApp']
    }
    /**
     * commonTPID
     * @enum {string}
     */
    commonTPID:
      | 'hubspot'
      | 'zohocrm'
      | 'sfdc'
      | 'pipedrive'
      | 'slack'
      | 'closecrm'
      | 'ms_dynamics_365_sales'
    /**
     * commonStandardObject
     * @enum {string}
     */
    commonStandardObject:
      | 'company'
      | 'contact'
      | 'deal'
      | 'event'
      | 'lead'
      | 'note'
      | 'task'
      | 'user'
    /**
     * commonResponseStatus
     * @enum {string}
     */
    commonResponseStatus: 'ok' | 'error'
    /** commonConnectedApps */
    commonConnectedApps: {
      appName: string
      imageSrc: string
    }
    /** commonRecentConnections */
    commonRecentConnections: {
      id: string
      createdAt: string
    }
    /** commonRecentApiCalls */
    commonRecentApiCalls: {
      method: string
      path: string
      status: number
    }
    /** commonAnalytics */
    commonAnalytics: {
      totalConnections: number
      connectedApps?: components['schemas']['commonConnectedApps'][] | null
      recentConnections?:
        | components['schemas']['commonRecentConnections'][]
        | null
      recentApiCalls?: components['schemas']['commonRecentApiCalls'][] | null
    }
    /**
     * commonTicketStatus
     * @enum {string}
     */
    commonTicketStatus: 'open' | 'close' | 'in_progress'
    /**
     * commonTicketPriority
     * @enum {string}
     */
    commonTicketPriority: 'urgent' | 'high' | 'medium' | 'low' | 'lowest'
    /** commonAppConfig */
    commonAppConfig: {
      bot_token?: string | null
      org_url?: string | null
    }
    /** commonCommonUnifiedFields */
    commonCommonUnifiedFields: {
      /** @description The unique `id` of this object in Revert */
      id: string
      /** @description The unique `id` of this object in the downstream CRM. */
      remoteId: string
      /** @description Creation timestamp of the object. */
      createdTimestamp: unknown
      /** @description The last updated timestamp of the object. */
      updatedTimestamp: unknown
      /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
      additional?: unknown
    }
    /** commonLeadRead */
    commonLeadRead: {
      /** @description The first name of the lead in a CRM. */
      firstName: string
      /** @description The last name of the lead in a CRM. */
      lastName: string
      /** @description The phone number of the lead in a CRM. */
      phone: string
      /** @description The email of the lead in a CRM. */
      email: string
    }
    /** commonLeadWrite */
    commonLeadWrite: {
      associations?: components['schemas']['commonLeadAssociation']
    } & components['schemas']['commonLeadRead']
    /** commonLead */
    commonLead: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonLeadRead']
    /** commonDealRead */
    commonDealRead: {
      /** @description The deal amount mentioned in the CRM for this deal. */
      amount: number
      /** @description The priority attached to this deal. (not supported by pipedrive) */
      priority?: string | null
      /** @description Deal stage in the CRM. */
      stage: string
      /** @description The name of the deal in a CRM. */
      name: string
      /** @description Expected close date for this deal. (not supported by pipedrive search api) */
      expectedCloseDate: unknown
      /** @description Is `true` if the deal is closed (won). */
      isWon: boolean
      /** @description Probability of the deal getting closed, a decimal number between 0 to 1 (inclusive). */
      probability: number
    }
    /** commonDealWrite */
    commonDealWrite: {
      associations?: components['schemas']['commonDealAssociation']
    } & components['schemas']['commonDealRead']
    /** commonDeal */
    commonDeal: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonDealRead']
    /** commonNoteRead */
    commonNoteRead: {
      /** @description The contents of the note in plain text or HTML. */
      content: string
    }
    /** commonNoteWrite */
    commonNoteWrite: {
      associations?: components['schemas']['commonDealAssociation']
    } & components['schemas']['commonNoteRead']
    /** commonNote */
    commonNote: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonNoteRead']
    /** commonCompany */
    commonCompany: WithRequired<
      {
        /** @description Name of the company in a CRM. */
        name: string
        /** @description Industry associated with this company. (not supported by pipedrive) */
        industry: string
        /** @description Description of the company. (not supported by pipedrive) */
        description: string
        /** @description Annual revenue of the company. (not supported by pipedrive) */
        annualRevenue: number
        /** @description Number of employees or size of the company. */
        size: number
        /** @description Phone number of the company. (not supported by pipedrive) */
        phone: string
        /** @description Company address. */
        address: components['schemas']['commonCompanyAddress']
      } & components['schemas']['commonCommonUnifiedFields'],
      | 'name'
      | 'industry'
      | 'description'
      | 'annualRevenue'
      | 'size'
      | 'phone'
      | 'address'
    >
    /** commonCompanyAddress */
    commonCompanyAddress: {
      street?: string | null
      city: string
      state: string
      country: string
      zip: string
      postalCode: string
    }
    /** commonContactRead */
    commonContactRead: {
      /** @description The first name of the contact in a CRM. */
      firstName: string
      /** @description The last name of the contact in a CRM. */
      lastName: string
      /** @description The phone number of the contact in a CRM. */
      phone: string
      /** @description The email of the contact in a CRM. */
      email: string
    }
    /** commonContactWrite */
    commonContactWrite: {
      associations?: components['schemas']['commonContactAssociation']
    } & components['schemas']['commonContactRead']
    /** commonContact */
    commonContact: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonContactRead']
    /** commonEventRead */
    commonEventRead: {
      /** @description The type of the event in the CRM. */
      type: string
      /** @description The Subject of the event/meeting in the CRM. */
      subject: string
      /** @description Event start date time. */
      startDateTime: string
      /** @description Event end date time. */
      endDateTime: string
      /** @description Is `true` if the event is an all day event. */
      isAllDayEvent: boolean
      /** @description Description of the event/meeting. */
      description: string
      /** @description The location of the event/meeting. */
      location: string
    }
    /** commonEventWrite */
    commonEventWrite: {
      associations?: components['schemas']['commonEventAssociation']
    } & components['schemas']['commonEventRead']
    /** commonEvent */
    commonEvent: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonEventRead']
    /** commonTaskRead */
    commonTaskRead: {
      /** @description Subject of the task. */
      subject: string
      /** @description Body of the task description. */
      body: string
      /** @description The priority of the task in hand. (not supported by pipedrive) */
      priority: string
      /** @description Completion status of the task. */
      status: string
      /** @description The date when this task is due. */
      dueDate: unknown
    }
    /** commonTaskWrite */
    commonTaskWrite: {
      associations?: components['schemas']['commonTaskAssociation']
    }
    /** commonTask */
    commonTask: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonTaskRead']
    /**
     * commonUserWrite
     * @description Include the "businessUnitId" in the "additional" section, as it is a mandatory field for Microsoft Dynamics Sales.
     */
    commonUserWrite: {
      /** @description The first name of a user in a CRM. */
      firstName: string
      /** @description The last name of a user in a CRM. */
      lastName: string
      /** @description The phone number of a user in a CRM. */
      phone: string
      /** @description The email of a user in a CRM. */
      email: string
    }
    /** commonUser */
    commonUser: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonUserWrite']
    /** commonUserChat */
    commonUserChat: {
      /** @description Id of user according to connected communication app */
      id: string
      /** @description The name of user in communication app */
      name: string
      /** @description Date at which user account has been created */
      createdTimestamp: unknown
    }
    /** commonChannel */
    commonChannel: {
      /** @description Id of channel belonging to workspace */
      id: string
      /** @description The name of channel in communication app */
      name: string
      /** @description Date at which channel has been created */
      createdTimestamp: unknown
    }
    /** commonMessage */
    commonMessage: {
      /** @description Message sent by user */
      text: string
      /** @description Id of channel to which message was sent */
      channelId: string
    }
    /** commonTaskTicketWrite */
    commonTaskTicketWrite: {
      /** @description Name of the task. */
      name: string
      /** @description collection of IDs belonging to assignees. */
      assignees: string[]
      /** @description Description of the task. */
      description: string
      /** @description Current status of the task. */
      status: components['schemas']['commonTicketStatus']
      /** @description Priority of the task. */
      priority: components['schemas']['commonTicketPriority']
      /** @description ID of the task creator. */
      creatorId: string
      /** @description Due date for the given task. */
      dueDate: string
      /** @description Date at which task was completed. */
      completedDate: string
      /** @description Id of the parent task. */
      parentId: string
      /** @description Id of the list */
      listId: string
    }
    /** commonTaskTicket */
    commonTaskTicket: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonTaskTicketWrite']
    /** commonCommentTicketWrite */
    commonCommentTicketWrite: {
      /** @description The contents of the comment in plain text or HTML format. */
      body: string
      /** @description Task or Issue to which comment must belong */
      taskId: string
    }
    /** commonCommentTicket */
    commonCommentTicket: components['schemas']['commonCommonUnifiedFields'] &
      components['schemas']['commonCommentTicketWrite']
    /** GetConnectionResponse */
    GetConnectionResponse: {
      error?: string | null
    } & components['schemas']['commonConnection']
    /** GetAllConnectionResponse */
    GetAllConnectionResponse: components['schemas']['commonConnection'][]
    /** DeleteConnectionResponse */
    DeleteConnectionResponse: {
      status: components['schemas']['commonResponseStatus']
      deleted: components['schemas']['commonConnection']
    }
    /** CreateConnectionWebhookResponse */
    CreateConnectionWebhookResponse: {
      status: components['schemas']['commonResponseStatus']
      webhookUrl: string
      createdAt: string
      secret: string
      error?: string | null
      errorMessage?: unknown
    }
    /** GetConnectionWebhookResponse */
    GetConnectionWebhookResponse: {
      status: components['schemas']['commonResponseStatus']
      webhook: unknown
      error?: string | null
      errorMessage?: unknown
    }
    /** CreateConnectionWebhookRequest */
    CreateConnectionWebhookRequest: {
      webhookUrl: string
    }
    /** DeleteConnectionWebhookResponse */
    DeleteConnectionWebhookResponse: {
      status: components['schemas']['commonResponseStatus']
      error?: string | null
      errorMessage?: unknown
    }
    /** GetConnectStatusResponse */
    GetConnectStatusResponse: {
      publicToken: string
      status: components['schemas']['ConnectionStatus']
      integrationName: string
      tenantId: string
      tenantSecretToken?: string | null
    }
    /**
     * ConnectionStatus
     * @enum {string}
     */
    ConnectionStatus: 'SUCCESS' | 'FAILED'
    /** ConnectionImport */
    ConnectionImport: {
      tp_id: components['schemas']['commonTPID']
      tp_access_token: string
      tp_refresh_token: string
      /** @description The email id of the user who connected the app. */
      tp_customer_id: string
      t_id: string
      tp_account_url?: string | null
      app_client_id: string
      app_client_secret: string
      app_id: string
    }
    /** ImportConnectionsRequestBody */
    ImportConnectionsRequestBody: {
      connections: components['schemas']['ConnectionImport'][]
    }
    /** ImportConnectionsResponse */
    ImportConnectionsResponse: {
      status: components['schemas']['commonResponseStatus']
    }
    /** crmGetCompanyResponse */
    crmGetCompanyResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonCompany']
    }
    /** crmGetCompaniesResponse */
    crmGetCompaniesResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonCompany'][]
    }
    /** crmCreateOrUpdateCompanyRequest */
    crmCreateOrUpdateCompanyRequest: {
      associations?: components['schemas']['commonCompanyAssociation']
    } & components['schemas']['commonCompany']
    /** crmCreateOrUpdateCompanyResponse */
    crmCreateOrUpdateCompanyResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchCompaniesResponse */
    crmSearchCompaniesResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonCompany'][]
    }
    /** crmGetContactResponse */
    crmGetContactResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonContact']
    }
    /** crmGetContactsResponse */
    crmGetContactsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonContact'][]
    }
    /** crmCreateOrUpdateContactRequest */
    crmCreateOrUpdateContactRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonContactWrite'],
      'additional'
    >
    /** crmCreateOrUpdateContactResponse */
    crmCreateOrUpdateContactResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchContactsResponse */
    crmSearchContactsResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonContact'][]
    }
    /** crmGetDealResponse */
    crmGetDealResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonDeal']
    }
    /** crmGetDealsResponse */
    crmGetDealsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonDeal'][]
    }
    /** crmCreateOrUpdateDealRequest */
    crmCreateOrUpdateDealRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonDealWrite'],
      'additional'
    >
    /** crmCreateOrUpdateDealResponse */
    crmCreateOrUpdateDealResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchDealsResponse */
    crmSearchDealsResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonDeal'][]
    }
    /** crmGetEventResponse */
    crmGetEventResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonEvent']
    }
    /** crmGetEventsResponse */
    crmGetEventsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonEvent'][]
    }
    /** crmCreateOrUpdateEventRequest */
    crmCreateOrUpdateEventRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonEventWrite'],
      'additional'
    >
    /** crmCreateOrUpdateEventResponse */
    crmCreateOrUpdateEventResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchEventsResponse */
    crmSearchEventsResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonEvent'][]
    }
    /** crmDeleteEventResponse */
    crmDeleteEventResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
    }
    /** crmGetLeadResponse */
    crmGetLeadResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonLead']
    }
    /** crmGetLeadsResponse */
    crmGetLeadsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonLead'][]
    }
    /** crmCreateOrUpdateLeadRequest */
    crmCreateOrUpdateLeadRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonLeadWrite'],
      'additional'
    >
    /** crmCreateOrUpdateLeadResponse */
    crmCreateOrUpdateLeadResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchLeadsResponse */
    crmSearchLeadsResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonLead'][]
    }
    /** crmGetNoteResponse */
    crmGetNoteResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonNote']
    }
    /** crmGetNotesResponse */
    crmGetNotesResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonNote'][]
    }
    /** crmCreateOrUpdateNoteRequest */
    crmCreateOrUpdateNoteRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonNoteWrite'],
      'additional'
    >
    /** crmCreateOrUpdateNoteResponse */
    crmCreateOrUpdateNoteResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchNotesResponse */
    crmSearchNotesResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonNote'][]
    }
    /** crmFieldDetailsType */
    crmFieldDetailsType: {
      name: string
      type: string
      description: string
    }
    /** crmFieldDetailsTypeRead */
    crmFieldDetailsTypeRead: WithRequired<
      {
        isCustomField: boolean
      } & components['schemas']['crmFieldDetailsType'],
      'isCustomField'
    >
    /** crmFieldDetailsTypeRequest */
    crmFieldDetailsTypeRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['crmFieldDetailsType'],
      'additional'
    >
    /** crmSetObjectPropertiesRequest */
    crmSetObjectPropertiesRequest: components['schemas']['crmFieldDetailsTypeRequest']
    /** crmGetObjectPropertiesResponse */
    crmGetObjectPropertiesResponse: components['schemas']['crmFieldDetailsTypeRead'][]
    /** crmSetObjectPropertiesResponse */
    crmSetObjectPropertiesResponse: unknown
    /** crmProxyResponse */
    crmProxyResponse: {
      result: unknown
    }
    /** crmPostProxyRequestBody */
    crmPostProxyRequestBody: {
      path: string
      body?: unknown
      method: string
      queryParams?: unknown
    }
    /** crmGetTaskResponse */
    crmGetTaskResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonTask']
    }
    /** crmGetTasksResponse */
    crmGetTasksResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonTask'][]
    }
    /** crmCreateOrUpdateTaskRequest */
    crmCreateOrUpdateTaskRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonTaskWrite'],
      'additional'
    >
    /** crmCreateOrUpdateTaskResponse */
    crmCreateOrUpdateTaskResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchTasksResponse */
    crmSearchTasksResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonTask'][]
    }
    /** crmGetUserResponse */
    crmGetUserResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonUser']
    }
    /** crmGetUsersResponse */
    crmGetUsersResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonUser'][]
    }
    /** crmCreateOrUpdateUserRequest */
    crmCreateOrUpdateUserRequest: WithRequired<
      {
        /** @description Any fields that are not unified yet/non-unifiable come inside this `json` object. */
        additional: unknown
      } & components['schemas']['commonUserWrite'],
      'additional'
    >
    /** crmCreateOrUpdateUserResponse */
    crmCreateOrUpdateUserResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** crmSearchUsersResponse */
    crmSearchUsersResponse: {
      status: components['schemas']['commonResponseStatus']
      results: components['schemas']['commonUser'][]
    }
    /** MappableFieldType */
    MappableFieldType: {
      fieldName: string
      objectName: components['schemas']['commonStandardObject']
    }
    /** FieldMappingType */
    FieldMappingType: {
      sourceFieldName: string
      targetFieldName: string
      object: string
    }
    /** GetFieldMappingConfigResponse */
    GetFieldMappingConfigResponse: {
      canAddCustomMapping: boolean
      mappableFields: components['schemas']['MappableFieldType'][]
      fieldList: unknown
    }
    /** CreateFieldMappingRequestBody */
    CreateFieldMappingRequestBody: {
      standardMappings: components['schemas']['FieldMappingType'][]
      customMappings: components['schemas']['FieldMappingType'][]
    }
    /** CreateFieldMappingResponse */
    CreateFieldMappingResponse: {
      status: components['schemas']['commonResponseStatus']
    }
    /** DeleteFieldMappingResponse */
    DeleteFieldMappingResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
    }
    /** CreateAccountFieldMappingRequestBody */
    CreateAccountFieldMappingRequestBody: {
      allow_connection_override_custom_fields: boolean
      mappable_by_connection_field_list: components['schemas']['MappableFieldType'][]
    }
    /** CreateAccountFieldMappingResponse */
    CreateAccountFieldMappingResponse: {
      status: components['schemas']['commonResponseStatus']
    }
    /** DeleteAccountFieldMappingConfigResponse */
    DeleteAccountFieldMappingConfigResponse: {
      status: components['schemas']['commonResponseStatus']
    }
    /** GetFieldMappingsResponse */
    GetFieldMappingsResponse: {
      tpId: string
      mappings: components['schemas']['FieldMappingType'][]
    }
    /** internalGetAccountDetailsResponse */
    internalGetAccountDetailsResponse: {
      account: components['schemas']['commonAccount']
    }
    /** internalGetAnalyticsResponse */
    internalGetAnalyticsResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonAnalytics']
    }
    /** internalCreateTelemetryEntryResponse */
    internalCreateTelemetryEntryResponse: {
      status: string
    }
    /** CrmMetadataResponse */
    CrmMetadataResponse: {
      status: string
      data: components['schemas']['CrmMetadata'][]
      error?: string | null
    }
    /** CrmMetadata */
    CrmMetadata: {
      integrationId: string
      name: string
      imageSrc: string
      status: components['schemas']['CrmStatus']
      clientId?: string | null
      scopes: string[]
    }
    /**
     * CrmStatus
     * @enum {string}
     */
    CrmStatus: 'active' | 'inactive'
    /** ticketGetCollectionsResponse */
    ticketGetCollectionsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: unknown
    }
    /** ticketGetCommentResponse */
    ticketGetCommentResponse: {
      status: components['schemas']['commonResponseStatus']
      result: unknown
    }
    /** ticketGetCommentsResponse */
    ticketGetCommentsResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: unknown
    }
    /** ticketCreateOrUpdateCommentRequest */
    ticketCreateOrUpdateCommentRequest: components['schemas']['commonCommentTicketWrite']
    /** ticketCreateOrUpdateCommentResponse */
    ticketCreateOrUpdateCommentResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** ticketProxyResponse */
    ticketProxyResponse: {
      result: unknown
    }
    /** ticketPostProxyRequestBody */
    ticketPostProxyRequestBody: {
      path: string
      body?: unknown
      method: string
      queryParams?: unknown
    }
    /** ticketGetTaskResponse */
    ticketGetTaskResponse: {
      status: components['schemas']['commonResponseStatus']
      result: components['schemas']['commonTaskTicket']
    }
    /** ticketGetTasksResponse */
    ticketGetTasksResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: components['schemas']['commonTaskTicket'][]
    }
    /** ticketCreateOrUpdateTaskRequest */
    ticketCreateOrUpdateTaskRequest: components['schemas']['commonTaskTicketWrite']
    /** ticketCreateOrUpdateTaskResponse */
    ticketCreateOrUpdateTaskResponse: {
      status: components['schemas']['commonResponseStatus']
      message: string
      result: unknown
    }
    /** ticketGetUserResponse */
    ticketGetUserResponse: {
      status: components['schemas']['commonResponseStatus']
      result: unknown
    }
    /** ticketGetUsersResponse */
    ticketGetUsersResponse: {
      status: components['schemas']['commonResponseStatus']
      next?: string | null
      previous?: string | null
      results: unknown
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** @description Get all the channels */
  chat_channels_getChannels: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['chatGetChannelsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new message */
  chat_messages_createMessage: {
    requestBody: {
      content: {
        'application/json': components['schemas']['chatCreateorUpdateMessageRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['chatCreateorUpdateMessageResponse']
        }
      }
      400: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the users */
  chat_users_getUsers: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['chatGetUsersResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a connection for a specific tenant. */
  connection_getConnection: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetConnectionResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Delete a connection for a specific tenant. */
  connection_deleteConnection: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeleteConnectionResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of all the connection for a specific account at Revert. */
  connection_getAllConnections: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetAllConnectionResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a connection webhook for a specific tenant. */
  connection_getWebhook: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetConnectionWebhookResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a webhook endpoint that listens to a connection events of a specific tenant. */
  connection_createWebhook: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateConnectionWebhookRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateConnectionWebhookResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Delete the connection webhook for a specific tenant. */
  connection_deleteWebhook: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeleteConnectionWebhookResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get the OAuth connection event status. This endpoint responds with a `http.ServerResponse` instead of `json`. */
  connection_getIntegrationStatus: {
    parameters: {
      query: {
        tenantId: string
      }
      path: {
        revertPublicToken: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetConnectStatusResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Import multiple connections for a specific environment. Use this to bulk import connections as a one-time exercise. */
  connection_importConnections: {
    parameters: {
      header: {
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ImportConnectionsRequestBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ImportConnectionsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a company */
  crm_company_getCompany: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        /** @description The unique `id` of the company in the CRM. */
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetCompanyResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a company */
  crm_company_updateCompany: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['commonCompany']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateCompanyResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the companies */
  crm_company_getCompanies: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetCompaniesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new company */
  crm_company_createCompany: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateCompanyRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateCompanyResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for companies */
  crm_company_searchCompanies: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchCompaniesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a contact */
  crm_contact_getContact: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetContactResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a contact */
  crm_contact_updateContact: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateContactRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateContactResponse']
        }
      }
      400: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the contacts */
  crm_contact_getContacts: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetContactsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new contact */
  crm_contact_createContact: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateContactRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateContactResponse']
        }
      }
      400: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for contacts */
  crm_contact_searchContacts: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchContactsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a deal */
  crm_deal_getDeal: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetDealResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a deal */
  crm_deal_updateDeal: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateDealRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateDealResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the deals */
  crm_deal_getDeals: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetDealsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new deal */
  crm_deal_createDeal: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateDealRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateDealResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for deals */
  crm_deal_searchDeals: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchDealsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a event */
  crm_event_getEvent: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetEventResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Delete details of an event in a CRM */
  crm_event_deleteEvent: {
    parameters: {
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmDeleteEventResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a event */
  crm_event_updateEvent: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateEventRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateEventResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the events */
  crm_event_getEvents: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetEventsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new event */
  crm_event_createEvent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateEventRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateEventResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for events */
  crm_event_searchEvents: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchEventsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a lead */
  crm_lead_getLead: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetLeadResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a lead */
  crm_lead_updateLead: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateLeadRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateLeadResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the leads */
  crm_lead_getLeads: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetLeadsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new lead */
  crm_lead_createLead: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateLeadRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateLeadResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for leads */
  crm_lead_searchLeads: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchLeadsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a note */
  crm_note_getNote: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetNoteResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a note */
  crm_note_updateNote: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateNoteRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateNoteResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the notes */
  crm_note_getNotes: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetNotesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new note */
  crm_note_createNote: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateNoteRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateNoteResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for notes */
  crm_note_searchNotes: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchNotesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get object properties for connection */
  crm_properties_getObjectProperties: {
    parameters: {
      path: {
        objectName: components['schemas']['commonStandardObject']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetObjectPropertiesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Set custom properties on an object for a given connection */
  crm_properties_setCustomProperties: {
    parameters: {
      path: {
        objectName: components['schemas']['commonStandardObject']
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmSetObjectPropertiesRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSetObjectPropertiesResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Call the native CRM api for a specific connection */
  crm_proxy_tunnel: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmPostProxyRequestBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmProxyResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a task */
  crm_task_getTask: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetTaskResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a task */
  crm_task_updateTask: {
    parameters: {
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateTaskRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateTaskResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the tasks */
  crm_task_getTasks: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetTasksResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new task */
  crm_task_createTask: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateTaskRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateTaskResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Search for tasks */
  crm_task_searchTasks: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': {
          searchCriteria: unknown
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmSearchTasksResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a user */
  crm_user_getUser: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetUserResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the users */
  crm_user_getUsers: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmGetUsersResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create a new user */
  crm_user_createUser: {
    requestBody: {
      content: {
        'application/json': components['schemas']['crmCreateOrUpdateUserRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['crmCreateOrUpdateUserResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get field mappings configs for a connection */
  fieldMapping_getFieldMappingConfig: {
    parameters: {
      header: {
        /** @description Your public key, to be used on the frontend usually. */
        'x-revert-public-token': string
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
        /** @description The temp used to identify tenant. */
        'x-revert-t-token': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetFieldMappingConfigResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create field mappings for a connection after user input */
  fieldMapping_createFieldMapping: {
    parameters: {
      header: {
        /** @description Your public key, to be used on the frontend usually. */
        'x-revert-public-token': string
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
        /** @description The temp used to identify tenant. */
        'x-revert-t-token': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFieldMappingRequestBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateFieldMappingResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Delete field mappings for a connection */
  fieldMapping_deleteFieldMapping: {
    parameters: {
      header: {
        /** @description Your official API key for accessing revert apis. */
        'x-revert-api-token': string
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeleteFieldMappingResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get field mappings for a connection */
  fieldMapping_getFieldMappings: {
    parameters: {
      header: {
        /** @description Your official API key for accessing revert apis. */
        'x-revert-api-token': string
        /** @description The unique customer id used when the customer linked their account. */
        'x-revert-t-id': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['GetFieldMappingsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create field mappings config for an account */
  fieldMapping_createAccountFieldMappingConfig: {
    parameters: {
      header: {
        /** @description Your official API key for accessing revert apis. */
        'x-revert-api-token': string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAccountFieldMappingRequestBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CreateAccountFieldMappingResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Delete field mappings config for an account */
  fieldMapping_deleteAccountFieldMappingConfig: {
    parameters: {
      header: {
        /** @description Your official API key for accessing revert apis. */
        'x-revert-api-token': string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['DeleteAccountFieldMappingConfigResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a revert user account */
  internal_account_getAccountDetails: {
    requestBody: {
      content: {
        'application/json': {
          userId: string
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['internalGetAccountDetailsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update account credentials (customer app token, secret, scope) */
  internal_account_updateAccountCredentials: {
    requestBody: {
      content: {
        'application/json': {
          clientId?: string | null
          clientSecret?: string | null
          scopes?: string[] | null
          tpId: components['schemas']['commonTPID']
          isRevertApp: boolean
          appId: string
          appConfig?: components['schemas']['commonAppConfig']
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['commonApp']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get Analytics of your revert account */
  internal_analytics_getAnalytics: {
    requestBody: {
      content: {
        'application/json': {
          userId: string
          environment: string
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['internalGetAnalyticsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Create telemetry entry for a deployment */
  internal_telemetry_createTelemetryEntry: {
    requestBody: {
      content: {
        'application/json': {
          numberOfUsers: number
          numberOfAccounts: number
          numberOfConnections: number
          numberOfApiCalls: number
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['internalCreateTelemetryEntryResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Retrieve a list of CRMs available for this account from the database based on the public token. */
  metadata_getCrms: {
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['CrmMetadataResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the collections */
  ticket_collection_getCollections: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetCollectionsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a comment */
  ticket_comment_getComment: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetCommentResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update comment */
  ticket_comment_updateComment: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ticketCreateOrUpdateCommentRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketCreateOrUpdateCommentResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the comments */
  ticket_comment_getComments: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetCommentsResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Post comment */
  ticket_comment_createComment: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ticketCreateOrUpdateCommentRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketCreateOrUpdateCommentResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Call the native Ticketing app's api for a specific connection */
  ticket_proxy_tunnel: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ticketPostProxyRequestBody']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketProxyResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a task */
  ticket_task_getTask: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetTaskResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Update a task */
  ticket_task_updateTask: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ticketCreateOrUpdateTaskRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketCreateOrUpdateTaskResponse']
        }
      }
      400: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the tasks */
  ticket_task_getTasks: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetTasksResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  ticket_task_createTask: {
    parameters: {
      query?: {
        fields?: string | null
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ticketCreateOrUpdateTaskRequest']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketCreateOrUpdateTaskResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get details of a user */
  ticket_user_getUser: {
    parameters: {
      query?: {
        fields?: string | null
      }
      path: {
        id: string
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetUserResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
  /** @description Get all the users */
  ticket_user_getUsers: {
    parameters: {
      query?: {
        fields?: string | null
        pageSize?: string | null
        cursor?: string | null
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['ticketGetUsersResponse']
        }
      }
      401: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      404: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
      500: {
        content: {
          'application/json': components['schemas']['commonBaseError']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
