{
  "components": {
    "schemas": {
      "AccountBalance": {
        "properties": {
          "closing_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "The closing balance for the day",
            "example": 25000.45
          },
          "currency": {
            "description": "Currency of the balance",
            "example": "USD",
            "type": "string"
          },
          "date": {
            "description": "Date of the balance",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "closing_amount"
        ],
        "type": "object"
      },
      "AccountBalance1": {
        "properties": {
          "account_id": {
            "example": "checking_account_202348",
            "maxLength": 400,
            "type": "string"
          },
          "batch_closing_balance": {
            "description": "The closing balance for this account after the transactions in this batch",
            "example": 25000.45,
            "type": "number"
          }
        },
        "required": [
          "account_id",
          "batch_closing_balance"
        ],
        "type": "object"
      },
      "Address": {
        "properties": {
          "city": {
            "type": "string"
          },
          "line_1": {
            "type": "string"
          },
          "line_2": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Annotation": {
        "properties": {
          "annotator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnnotatorPublic"
              }
            ],
            "readOnly": true
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category1"
              }
            ],
            "readOnly": true
          },
          "confidence": {
            "readOnly": true,
            "type": "number"
          },
          "model_version": {
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnnotatorPublic": {
        "properties": {
          "context": {
            "enum": [
              "sync",
              "async_",
              "manual",
              "undetermined"
            ],
            "type": "string"
          },
          "priority_type": {
            "enum": [
              "gold_standard",
              "client_feedback",
              "tagging_ui",
              "reconcile",
              "heuristic",
              "classifier",
              "undetermined"
            ],
            "type": "string"
          }
        },
        "required": [
          "context",
          "priority_type"
        ],
        "type": "object"
      },
      "AnomalyParams": {
        "properties": {
          "category_label_or_heron_id": {
            "description": "Label or Heron ID of category to find anomalies for",
            "example": "Revenue",
            "type": "string"
          }
        },
        "required": [
          "category_label_or_heron_id"
        ],
        "type": "object"
      },
      "AnomalySchema": {
        "properties": {
          "amount": {
            "description": "Converted amount of transaction in currency",
            "example": 42.42,
            "type": "number"
          },
          "anomaly_score": {
            "description": "Anomaly score 0-1, where 1 is very anomalous, and 0 is not anomalous",
            "example": 0.5,
            "type": "number"
          },
          "currency": {
            "description": "Currency code for amount that transaction was converted to",
            "example": "USD",
            "type": "string"
          },
          "heron_id": {
            "description": "Heron ID of the Transaction",
            "example": "txn_dWAr8wpiTDD5iDMAGrEQpC",
            "type": "string"
          },
          "reference_id": {
            "description": "Customer-provided reference ID for the Transaction",
            "example": "1342db06-feb7-4c33-a157-4351d74a98e9",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BankStatementSummaryRow": {
        "properties": {
          "average_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Average balance"
          },
          "ending_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Ending balance"
          },
          "mca_debits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "MCA debits amount"
          },
          "negative_balance_days": {
            "description": "Number of days with negative balance",
            "type": "integer"
          },
          "no_deposits": {
            "description": "Number of deposit transactions",
            "type": "integer"
          },
          "no_od_nsf": {
            "description": "Number of overdraft or NSF transactions",
            "type": "integer"
          },
          "no_revenue": {
            "description": "Number of revenue transactions",
            "type": "integer"
          },
          "no_withdrawals": {
            "description": "Number of withdrawals transactions",
            "type": "integer"
          },
          "non_revenue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Non-revenue amount"
          },
          "starting_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Starting balance for the period"
          },
          "total_deposits": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Total deposit amount"
          },
          "total_revenue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Total revenue amount"
          },
          "total_withdrawals": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Total withdrawal amount"
          }
        },
        "type": "object"
      },
      "BooleanCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BulkCategoryFeedback": {
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CategoryFeedback"
          },
          "source": {
            "default": null,
            "description": "your identifier for where the feedback comes from e.g. bob_the_underwriter",
            "maxLength": 120,
            "nullable": true,
            "type": "string"
          },
          "transaction_heron_id": {
            "description": "heron id of transaction",
            "example": "txn_d7Q9zm7iGrJBAXGbSRXSar",
            "type": "string"
          }
        },
        "required": [
          "transaction_heron_id"
        ],
        "type": "object"
      },
      "Category": {
        "properties": {
          "analytics_group": {
            "description": "The analytics group of the category",
            "enum": [
              "revenue",
              "cost_of_goods_sold",
              "operational_expenses",
              "tax_expenses",
              "intra_company",
              "debt",
              "equity",
              "other_income",
              "special_items",
              "other"
            ],
            "example": "revenue",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "created": {
            "description": "Timestamp for when the category was created",
            "example": "2024-05-31T14:08:35.928230",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the category",
            "example": "Rent for offices, workspaces or storage facilities",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of the category generated by Heron Data",
            "example": "ctg_H6nXpo5biHVayEHkrFSVRk",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "description": "The label of the category",
            "example": "Rent",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "Category1": {
        "properties": {
          "heron_id": {
            "description": "Unique ID of the category generated by Heron Data",
            "example": "ctg_H6nXpo5biHVayEHkrFSVRk",
            "readOnly": true,
            "type": "string"
          },
          "label": {
            "description": "The label of the category",
            "example": "Rent",
            "type": "string"
          }
        },
        "required": [
          "label"
        ],
        "type": "object"
      },
      "CategoryFeedback": {
        "properties": {
          "heron_id": {
            "description": "heron_id of the correct category",
            "example": "ctg_PzxdVHjuEmYYnqM2bUhTek",
            "type": "string"
          },
          "label": {
            "description": "label of the correct category",
            "example": "Insurance",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Check": {
        "properties": {
          "attribute_label": {
            "nullable": true,
            "type": "string"
          },
          "boolean_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanCheck"
              }
            ],
            "default": null,
            "nullable": true
          },
          "composite_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompositeCheck"
              }
            ],
            "default": null,
            "nullable": true
          },
          "date_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateCheck"
              }
            ],
            "default": null,
            "nullable": true
          },
          "date_delta_to_now_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateDeltaToNowCheck"
              }
            ],
            "default": null,
            "nullable": true
          },
          "numeric_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NumericCheck"
              }
            ],
            "default": null,
            "nullable": true
          },
          "string_check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringCheck"
              }
            ],
            "default": null,
            "nullable": true
          }
        },
        "type": "object"
      },
      "CheckEvaluation": {
        "properties": {
          "attribute_value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CompanyAttributeValue"
              }
            ],
            "default": null,
            "nullable": true
          },
          "check": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Check"
              }
            ],
            "default": null,
            "nullable": true
          },
          "evaluations": {
            "default": null,
            "items": {
              "$ref": "#/components/schemas/CheckEvaluation"
            },
            "nullable": true,
            "type": "array"
          },
          "result": {
            "enum": [
              "pass",
              "failed",
              "missing_data"
            ]
          }
        },
        "type": "object"
      },
      "CompanyAttributeValue": {
        "properties": {
          "attribute_label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompanyOverviewLayoutSchema": {
        "properties": {
          "group_name": {
            "type": "string"
          },
          "id": {
            "description": "A unique id used to reference the group",
            "type": "string"
          },
          "widgets": {
            "items": {
              "$ref": "#/components/schemas/Widget"
            },
            "type": "array"
          }
        },
        "required": [
          "group_name",
          "id",
          "widgets"
        ],
        "type": "object"
      },
      "CompositeCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "checks": {
            "items": {
              "$ref": "#/components/schemas/Check"
            },
            "type": "array"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "AND",
              "OR"
            ]
          }
        },
        "type": "object"
      },
      "CrmConfig": {
        "properties": {
          "data_source_accounts_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmObjectConfig"
              }
            ],
            "default": null,
            "description": "The data source accounts configuration for the CRM integration",
            "nullable": true
          },
          "default_id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmObjectId"
              }
            ],
            "default": null,
            "description": "The default object id for the CRM integration",
            "nullable": true
          },
          "object_configs": {
            "default": [],
            "description": "The object configurations for the CRM integration",
            "items": {
              "$ref": "#/components/schemas/CrmObjectConfig"
            },
            "type": "array"
          },
          "policy_evaluation_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmPolicyEvaluationConfig"
              }
            ],
            "default": null,
            "description": "The policy evaluation configuration for the CRM integration",
            "nullable": true
          },
          "sync_file_classes": {
            "additionalProperties": {
              "type": "boolean"
            },
            "default": {},
            "description": "Whether to sync files of a given class, including emails",
            "type": "object"
          },
          "value_mappings": {
            "default": [],
            "description": "A list of value mappings for the CRM integration",
            "items": {
              "$ref": "#/components/schemas/CrmValueMapping"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CrmExternalLookupConfig": {
        "properties": {
          "external_lookup_fields_and": {
            "description": "External lookup fields are what is used to try match potential new objects to existing objects in the CRM (i.e., for deduplication). Used in the and condition.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "external_lookup_fields_or": {
            "description": "External lookup fields are what is used to try match potential new objects to existing objects in the CRM (i.e., for deduplication). Used in the or condition.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sort_field_name": {
            "default": "CreatedDate",
            "description": "The field name to sort by when doing the external lookup",
            "example": "CreatedDate",
            "type": "string"
          },
          "sort_order": {
            "description": "The sort order when doing the external lookup",
            "enum": [
              "ASC",
              "DESC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CrmFieldMapping": {
        "properties": {
          "external_lookup_field_name": {
            "default": null,
            "description": "Override field name to use for external lookup instead of the field_name",
            "nullable": true,
            "type": "string"
          },
          "external_object_name_for_id": {
            "description": "The external object whose id we want to use populate the field value",
            "example": "Account",
            "nullable": true,
            "type": "string"
          },
          "field_name": {
            "description": "The name of the field in the CRM",
            "example": "Name",
            "type": "string"
          },
          "heron_company_attribute_label": {
            "description": "The label of the company attribute in Heron",
            "example": "owner_1_first_name",
            "nullable": true,
            "type": "string"
          },
          "regex_remove": {
            "description": "Any pattern that should be removed from the company attribute value",
            "example": "pattern",
            "nullable": true,
            "type": "string"
          },
          "required": {
            "default": false,
            "description": "Whether the field is required",
            "example": true,
            "type": "boolean"
          },
          "static_value": {
            "description": "A static value for the field",
            "example": "static value",
            "nullable": true,
            "type": "string"
          },
          "static_value_key": {
            "description": "The value key of the static data",
            "enum": [
              "date_today"
            ],
            "nullable": true,
            "type": "string"
          },
          "value_mapping_name": {
            "description": "Name of the value mapping to use for the field",
            "example": "state",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "field_name"
        ],
        "type": "object"
      },
      "CrmIntegrationPatchSchema": {
        "additionalProperties": true,
        "properties": {
          "auth": {
            "description": "Authentication details for the CRM integration",
            "type": "object",
            "writeOnly": true
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmConfig"
              }
            ],
            "description": "The configuration for the CRM integration"
          },
          "heron_id": {
            "readOnly": true,
            "type": "string"
          },
          "instance_url": {
            "description": "Base URL of the CRM integration",
            "example": "https://sandbox.salesforce.com",
            "format": "url",
            "type": "string"
          },
          "is_enabled": {
            "default": true,
            "description": "Whether the integration is enabled",
            "example": true,
            "type": "boolean"
          },
          "is_live": {
            "default": true,
            "description": "Whether the integration is live",
            "example": true,
            "type": "boolean"
          },
          "provider": {
            "description": "The CRM provider",
            "enum": [
              "salesforce",
              "lendsmart",
              "orgmeter",
              "centrex",
              "lendsaas"
            ],
            "type": "string"
          },
          "secret": {
            "description": "A secret key for the CRM integration",
            "type": "string",
            "writeOnly": true
          }
        },
        "type": "object"
      },
      "CrmIntegrationSchema": {
        "additionalProperties": true,
        "properties": {
          "auth": {
            "description": "Authentication details for the CRM integration",
            "type": "object",
            "writeOnly": true
          },
          "config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmConfig"
              }
            ],
            "description": "The configuration for the CRM integration"
          },
          "heron_id": {
            "readOnly": true,
            "type": "string"
          },
          "instance_url": {
            "description": "Base URL of the CRM integration",
            "example": "https://sandbox.salesforce.com",
            "format": "url",
            "type": "string"
          },
          "is_enabled": {
            "default": true,
            "description": "Whether the integration is enabled",
            "example": true,
            "type": "boolean"
          },
          "is_live": {
            "default": true,
            "description": "Whether the integration is live",
            "example": true,
            "type": "boolean"
          },
          "provider": {
            "description": "The CRM provider",
            "enum": [
              "salesforce",
              "lendsmart",
              "orgmeter",
              "centrex",
              "lendsaas"
            ],
            "type": "string"
          },
          "secret": {
            "description": "A secret key for the CRM integration",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "auth",
          "config",
          "instance_url",
          "provider",
          "secret"
        ],
        "type": "object"
      },
      "CrmObjectConfig": {
        "properties": {
          "description": {
            "description": "Human-readable description of the object",
            "example": "A company or person",
            "nullable": true,
            "type": "string"
          },
          "external_lookup_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CrmExternalLookupConfig"
              }
            ],
            "default": null,
            "description": "Configuration for external lookup",
            "nullable": true
          },
          "external_name": {
            "description": "The exact name of the object in the CRM",
            "example": "Account",
            "type": "string"
          },
          "field_mappings": {
            "description": "Mapping for Heron fields to object fields in CRM",
            "items": {
              "$ref": "#/components/schemas/CrmFieldMapping"
            },
            "type": "array"
          },
          "is_optional": {
            "default": false,
            "description": "Whether the object is optional. Optional means that if object fails it will not stop execution of CRM sync",
            "type": "boolean"
          },
          "key": {
            "description": "key should be unique among objects within an integration",
            "example": "Account",
            "type": "string"
          },
          "required_ids": {
            "description": "List of object ids that new object needs",
            "items": {
              "$ref": "#/components/schemas/CrmObjectId"
            },
            "type": "array"
          },
          "static_data": {
            "description": "Stores static data used by the integration, for example status fields",
            "items": {
              "$ref": "#/components/schemas/CrmStaticData"
            },
            "type": "array"
          }
        },
        "required": [
          "external_name",
          "key"
        ],
        "type": "object"
      },
      "CrmObjectId": {
        "properties": {
          "alias": {
            "default": null,
            "description": "An alias for the object in the CRM",
            "example": "Company",
            "nullable": true,
            "type": "string"
          },
          "external_name": {
            "description": "The exact name of the object in the CRM",
            "example": "Account",
            "type": "string"
          }
        },
        "required": [
          "external_name"
        ],
        "type": "object"
      },
      "CrmPolicyEvaluationConfig": {
        "properties": {
          "external_object_name": {
            "description": "The object to write policy evaluation results to",
            "example": "Opportunity",
            "type": "string"
          },
          "failure_reason_external_name": {
            "description": "The field to write policy evaluation failure reason to",
            "example": "Failure_Reason__c",
            "type": "string"
          },
          "result_external_name": {
            "description": "The field to write policy evaluation results",
            "example": "Submission_Result_from_Heron__c",
            "type": "string"
          }
        },
        "required": [
          "external_object_name"
        ],
        "type": "object"
      },
      "CrmStaticData": {
        "properties": {
          "key": {
            "description": "The key of the static data",
            "example": "status",
            "type": "string"
          },
          "value": {
            "description": "The value of the static data",
            "example": "active"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "CrmValueMapping": {
        "properties": {
          "description": {
            "description": "A human-readable description of the value mapping",
            "example": "The status of the company",
            "nullable": true,
            "type": "string"
          },
          "mapping": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The mapping of values",
            "example": {
              "CA": "California",
              "NY": "New York"
            },
            "type": "object"
          },
          "name": {
            "description": "The name of the value mapping",
            "example": "Status",
            "type": "string"
          }
        },
        "required": [
          "mapping",
          "name"
        ],
        "type": "object"
      },
      "DataSource": {
        "properties": {
          "status": {
            "description": "Status of the data source entity, where applicable (e.g. pdfs, integration links)",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded",
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid",
              "unknown"
            ],
            "example": "new",
            "type": "string"
          },
          "type": {
            "description": "Data source type",
            "enum": [
              "api",
              "csv",
              "pdf",
              "integration_link",
              "legacy",
              "legacy_pdf",
              "legacy_integration_link"
            ],
            "example": "pdf",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "DataSourceAccount": {
        "properties": {
          "account_id": {
            "description": "Unique account id associated with the data source account",
            "example": "202348",
            "type": "string"
          },
          "anomaly_score": {
            "description": "For pdf bank statement account sources, where the value is between 0 and 1000, with 1000 being the most anomalous",
            "example": 200,
            "type": "integer"
          },
          "balances": {
            "description": "List of balances associated with the account",
            "example": [
              {
                "closing_amount": 25000.45,
                "currency": "USD",
                "date": "2022-01-01"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency of the account",
            "example": "USD",
            "type": "string"
          },
          "end_date": {
            "description": "End date of the account",
            "example": "2022-01-31",
            "format": "date",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID for data source generated by Heron",
            "example": "dso_2RKyxRjQ52y7UVZpUjChJk",
            "type": "string"
          },
          "institution_name": {
            "description": "Name of the institution",
            "example": "Chase",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether or not the account is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          },
          "max_date": {
            "description": "Latest date of transactions associated with the data source account",
            "example": "2022-01-31",
            "format": "date",
            "type": "string"
          },
          "min_date": {
            "description": "Earliest date of transactions associated with the data source account",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "Name of the account",
            "example": "Checking Account",
            "type": "string"
          },
          "num_transactions": {
            "description": "Number of transactions associated with the data source account",
            "example": 120,
            "type": "integer"
          },
          "number": {
            "description": "Number of the account",
            "example": "123456789",
            "type": "string"
          },
          "owner_name": {
            "description": "Name of the account owner",
            "example": "John Doe",
            "type": "string"
          },
          "reference_id": {
            "description": "This is the account ID provided as part of the transaction",
            "example": "account-202348",
            "type": "string"
          },
          "start_date": {
            "description": "Start date of the account",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "transactions_match_balances": {
            "description": "For pdf bank statements, represents whether all transactions extracted match the balances extracted",
            "example": true,
            "type": "boolean"
          },
          "type": {
            "description": "Type of the account",
            "example": "Checking",
            "type": "string"
          }
        },
        "required": [
          "is_enabled"
        ],
        "type": "object"
      },
      "DataSourceAccountSummary": {
        "properties": {
          "account": {
            "$ref": "#/components/schemas/EndUserDataSourceAccount"
          },
          "summary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankStatementSummaryRow"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "DataSourceAccountSummaryPublicSchema": {
        "properties": {
          "data_source_account_summaries": {
            "items": {
              "$ref": "#/components/schemas/DataSourceAccountSummary"
            },
            "type": "array"
          },
          "end_user": {
            "$ref": "#/components/schemas/EndUser1"
          }
        },
        "type": "object"
      },
      "DataSourceMetadata": {
        "properties": {
          "currency": {
            "description": "Currency associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "USD",
            "type": "string"
          },
          "filename": {
            "description": "Name of the file uploaded, where applicable (e.g. pdfs)",
            "example": "202348_JAN_2022.pdf",
            "type": "string"
          },
          "integration_heron_id": {
            "description": "Unique Heron ID associated with an integration",
            "example": "itg_SaHAq6XB52EeYMxVJUKwhM",
            "type": "string"
          },
          "integration_item_id": {
            "description": "Unique item id associated with integration link data sources",
            "example": "Ed6bjNrDLJfGvZWwnkQlfxwoNz54B5C97ejBr",
            "type": "string"
          },
          "last_successful_sync": {
            "description": "Last successful sync date associated with integration link data sources",
            "example": "2024-05-31T14:08:36.808199",
            "format": "date-time",
            "type": "string"
          },
          "notes": {
            "description": "Notes associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "error with processing, 52 invalid transaction(s) extracted from statement",
            "type": "string"
          },
          "parsing_version": {
            "description": "Parsing version associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "1.0.0",
            "type": "string"
          },
          "sub_type": {
            "description": "Sub type of the data source entity, where applicable (e.g. integration links)",
            "example": "transaction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "equal",
              "not_equal",
              "before",
              "before_or_on",
              "after",
              "after_or_on"
            ]
          },
          "value": {
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateDeltaToNowCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "greater_than",
              "less_than"
            ]
          },
          "value": {
            "default": null,
            "nullable": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "DeleteTransactionParams": {
        "properties": {
          "account_id": {
            "default": null,
            "description": "account_id of transactions to be deleted",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id of transactions to be deleted",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "default": null,
            "description": "(legacy) Heron ID of transaction to be deleted",
            "example": "txn_Gpm5DgmgQbrTzXKpDE3YjH",
            "nullable": true,
            "type": "string"
          },
          "heron_ids": {
            "default": [],
            "description": "Heron IDs of transactions to be deleted",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "only_duplicates": {
            "default": null,
            "description": "if true, deletes only transactions that are marked as duplicates",
            "nullable": true,
            "type": "boolean"
          },
          "reference_ids": {
            "default": [],
            "description": "Reference IDs of transactions to be deleted",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "request_id": {
            "default": null,
            "description": "Request ID of transactions to be deleted",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DriversLicenceFrontResponseSchema": {
        "properties": {
          "address_city": {
            "type": "string"
          },
          "address_line_1": {
            "type": "string"
          },
          "address_state": {
            "enum": [
              "AK",
              "AL",
              "AR",
              "AZ",
              "CA",
              "CO",
              "CT",
              "DC",
              "DE",
              "FL",
              "GA",
              "HI",
              "IA",
              "ID",
              "IL",
              "IN",
              "KS",
              "KY",
              "LA",
              "MA",
              "MD",
              "ME",
              "MI",
              "MN",
              "MO",
              "MS",
              "MT",
              "NC",
              "ND",
              "NE",
              "NH",
              "NJ",
              "NM",
              "NV",
              "NY",
              "OH",
              "OK",
              "OR",
              "PA",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VA",
              "VT",
              "WA",
              "WI",
              "WV",
              "WY",
              "PR"
            ],
            "type": "string"
          },
          "address_zip": {
            "type": "string"
          },
          "date_of_birth": {
            "format": "date",
            "type": "string"
          },
          "document_number": {
            "type": "string"
          },
          "expiration_date": {
            "format": "date",
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "issuing_date": {
            "format": "date",
            "type": "string"
          },
          "issuing_state": {
            "enum": [
              "AK",
              "AL",
              "AR",
              "AZ",
              "CA",
              "CO",
              "CT",
              "DC",
              "DE",
              "FL",
              "GA",
              "HI",
              "IA",
              "ID",
              "IL",
              "IN",
              "KS",
              "KY",
              "LA",
              "MA",
              "MD",
              "ME",
              "MI",
              "MN",
              "MO",
              "MS",
              "MT",
              "NC",
              "ND",
              "NE",
              "NH",
              "NJ",
              "NM",
              "NV",
              "NY",
              "OH",
              "OK",
              "OR",
              "PA",
              "RI",
              "SC",
              "SD",
              "TN",
              "TX",
              "UT",
              "VA",
              "VT",
              "WA",
              "WI",
              "WV",
              "WY",
              "PR"
            ],
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "middle_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailTemplatePatchSchema": {
        "additionalProperties": true,
        "properties": {
          "heron_id": {
            "description": "Unique identifier for the email template",
            "readOnly": true,
            "type": "string"
          },
          "html_body": {
            "description": "The body of the email to send.",
            "type": "string"
          },
          "name": {
            "description": "Unique name of the email template. Used to match which email template to send. Only alphanumeric characters, underscores, and dashes are allowed.",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "to_address": {
            "default": null,
            "description": "The email address to send the email to",
            "format": "email",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailTemplateSchema": {
        "additionalProperties": true,
        "properties": {
          "heron_id": {
            "description": "Unique identifier for the email template",
            "readOnly": true,
            "type": "string"
          },
          "html_body": {
            "description": "The body of the email to send.",
            "type": "string"
          },
          "name": {
            "description": "Unique name of the email template. Used to match which email template to send. Only alphanumeric characters, underscores, and dashes are allowed.",
            "maxLength": 50,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string"
          },
          "to_address": {
            "default": null,
            "description": "The email address to send the email to",
            "format": "email",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "html_body",
          "name"
        ],
        "type": "object"
      },
      "EndUser": {
        "properties": {
          "confidence": {
            "description": "Aggregated confidence for the end user across all transactions; between 0 and 1",
            "example": 0.42,
            "readOnly": true,
            "type": "number"
          },
          "created": {
            "description": "When the end user was created in Heron system",
            "example": "2024-04-19T14:08:37.080630",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "criteria": {
            "description": "List of scorecard metrics",
            "items": {
              "$ref": "#/components/schemas/MetricOutput"
            },
            "readOnly": true,
            "type": "array"
          },
          "data_sources": {
            "description": "List of data source summaries for the end user",
            "items": {
              "$ref": "#/components/schemas/DataSource"
            },
            "readOnly": true,
            "type": "array"
          },
          "end_user_id": {
            "description": "id defined by user; links to the end_user_id for transactions",
            "example": "4457fb08-db5e-4251-9f9b-eda6bc526a9a",
            "maxLength": 140,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_2fTTyqtpPR8r2mvfBzkehg",
            "readOnly": true,
            "type": "string"
          },
          "is_portfolio": {
            "description": "Whether the end user is part of a lending portfolio",
            "example": true,
            "type": "boolean"
          },
          "last_processed_at": {
            "description": "When the end user was last successfully processed in Heron system",
            "example": "2024-05-31T14:08:37.080944",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the end user was last updated in Heron system",
            "example": "2024-05-31T14:08:37.080675",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of end user; may help to improve categorisation accuracy",
            "example": "Company Name Inc.",
            "maxLength": 128,
            "nullable": true,
            "type": "string"
          },
          "profit_and_loss_layout": {
            "nullable": true
          },
          "status": {
            "description": "Status of end user; 'ready' triggers async processing, 'review_requested' triggers manual review request",
            "enum": [
              "new",
              "ready",
              "processed",
              "reviewed",
              "review_requested",
              "failed"
            ],
            "example": "ready",
            "type": "string"
          }
        },
        "required": [
          "end_user_id"
        ],
        "type": "object"
      },
      "EndUser1": {
        "properties": {
          "end_user_id": {
            "description": "id defined by user; links to the end_user_id for transactions",
            "example": "4457fb08-db5e-4251-9f9b-eda6bc526a9a",
            "maxLength": 140,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_2fTTyqtpPR8r2mvfBzkehg",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of end user; may help to improve categorisation accuracy",
            "example": "Company Name Inc.",
            "maxLength": 128,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "end_user_id"
        ],
        "type": "object"
      },
      "EndUser2": {
        "properties": {
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_2fTTyqtpPR8r2mvfBzkehg",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserAccountBalance": {
        "properties": {
          "account_id": {
            "description": "Account associated with balance",
            "type": "string"
          },
          "account_info": {
            "$ref": "#/components/schemas/EndUserAccountInfo"
          },
          "balance": {
            "description": "Balance amount",
            "type": "number"
          },
          "balance_converted": {
            "description": "Converted balance amount in target currency",
            "type": "number"
          },
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "currency_converted": {
            "description": "Conversion currency code. ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "is_computed": {
            "description": "Whether the balance has been imputed using forward fill",
            "type": "boolean"
          },
          "is_latest": {
            "description": "Whether the date is the latest non-imputed balance for the account",
            "type": "boolean"
          },
          "timestamp": {
            "description": "Timestamp of the latest transaction",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserAccountBalanceForecast": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "balances": {
            "items": {
              "$ref": "#/components/schemas/EndUserBalanceForecast"
            },
            "type": "array"
          },
          "currency": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserAccountInfo": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "institution_name": {
            "description": "Name of the institution",
            "example": "Chase",
            "type": "string"
          },
          "name": {
            "description": "Name of the account",
            "example": "Checking Account",
            "type": "string"
          },
          "number": {
            "description": "Number of the account",
            "example": "123456789",
            "type": "string"
          },
          "owner_name": {
            "description": "Name of the account owner",
            "example": "John Doe",
            "type": "string"
          },
          "type": {
            "description": "Type of the account",
            "example": "Checking",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserBalanceForecast": {
        "properties": {
          "date": {
            "description": "Forecast date at specified date granularity",
            "example": "2024-05-31",
            "type": "string"
          },
          "predicted": {
            "description": "Predicted converted balance",
            "example": 42.42,
            "type": "number"
          },
          "predicted_lower": {
            "description": "Predict amount lower bound",
            "example": 4.24,
            "type": "number"
          },
          "predicted_upper": {
            "description": "Predicted amount upper bound",
            "example": 420.42,
            "type": "number"
          }
        },
        "type": "object"
      },
      "EndUserBalanceInputParams": {
        "properties": {
          "date_max": {
            "default": null,
            "description": "Filter for transactions with date earlier than the input value (inclusive). It has precedence over timestamp_max",
            "example": "2024-05-30",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "date_min": {
            "default": null,
            "description": "Filter for transactions with timestamp after the input value (inclusive). It has precedence over timestamp_min",
            "example": "2024-05-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "include_forecast": {
            "default": false,
            "description": "If true, forecasts the balances of each account",
            "type": "boolean"
          },
          "timestamp_max": {
            "default": null,
            "description": "Deprecated (use date_max instead). Filter for transactions with timestamp earlier than the input value",
            "example": "2024-05-30T14:08:36.315731",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "timestamp_min": {
            "default": null,
            "description": "Deprecated (use date_min instead). Filter for transactions with timestamp after the input value",
            "example": "2024-05-31T14:08:36.315666",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": [
              "GBP",
              "USD",
              "EUR"
            ],
            "example": "USD",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserBalanceOutputSchema": {
        "properties": {
          "daily_balances": {
            "items": {
              "$ref": "#/components/schemas/EndUserDailyBalance"
            },
            "type": "array"
          },
          "forecasted": {
            "items": {
              "$ref": "#/components/schemas/EndUserAccountBalanceForecast"
            },
            "type": "array"
          },
          "summary": {
            "$ref": "#/components/schemas/EndUserDailyBalance"
          }
        },
        "type": "object"
      },
      "EndUserBankStatementSummary": {
        "properties": {
          "average": {
            "$ref": "#/components/schemas/BankStatementSummaryRow"
          },
          "by_data_source_account_heron_id": {
            "additionalProperties": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankStatementSummaryRow"
                }
              ],
              "nullable": true
            },
            "description": "Summary of bank statement by data source account. Keys are heron ids of the data source account",
            "type": "object"
          },
          "by_month": {
            "additionalProperties": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankStatementSummaryRow"
                }
              ],
              "nullable": true
            },
            "description": "Summary of bank statement by month (only populated when grouping is calendar_month))",
            "type": "object"
          },
          "grouping": {
            "description": "Describes how the report was grouped. It supports either by calendar month or rolling 30-day period",
            "readOnly": true,
            "type": "string"
          },
          "rolling_30_days_from_last_txn": {
            "additionalProperties": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankStatementSummaryRow"
                }
              ],
              "nullable": true
            },
            "description": "Summary of bank statement by rolling 30 days (only populated when grouping is rolling_30_days). Keys are the start date of the 30-day period using latest transaction date date as the end date",
            "type": "object"
          },
          "rolling_30_days_from_today": {
            "additionalProperties": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/BankStatementSummaryRow"
                }
              ],
              "nullable": true
            },
            "description": "Summary of bank statement by rolling 30 days (only populated when grouping is rolling_30_days_from_today). Keys are the start date of the 30-day period using today as the end date",
            "type": "object"
          },
          "total": {
            "$ref": "#/components/schemas/BankStatementSummaryRow"
          }
        },
        "required": [
          "grouping"
        ],
        "type": "object"
      },
      "EndUserBankStatementSummaryParams": {
        "properties": {
          "grouping": {
            "default": "by_month",
            "description": "Determines how to group transactions. It supports calendar month (by_month) or rolling 30-day period (from last txns with rolling_30_days_from_last_txn or from today with rolling_30_days_from_today)",
            "enum": [
              "by_month",
              "by_data_source_account_heron_id",
              "rolling_30_days_from_last_txn",
              "rolling_30_days_from_today"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserDailyBalance": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/EndUserAccountBalance"
            },
            "type": "array"
          },
          "accounts_not_converted": {
            "items": {
              "$ref": "#/components/schemas/EndUserAccountBalance"
            },
            "type": "array"
          },
          "balance": {
            "description": "Balance amount",
            "type": "number"
          },
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "Date of balance",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserDataSource": {
        "properties": {
          "created": {
            "description": "When the data source was created in Heron system",
            "example": "2024-04-19T14:08:36.808759",
            "format": "date-time",
            "type": "string"
          },
          "data_source_accounts": {
            "description": "List of data source accounts associated with the data source",
            "example": [
              {
                "account_id": "202348",
                "anomaly_score": 200,
                "enabled": true,
                "max_date": "2022-01-31",
                "min_date": "2022-01-01",
                "num_transactions": 120,
                "transactions_match_balances": true
              }
            ],
            "items": {
              "$ref": "#/components/schemas/DataSourceAccount"
            },
            "type": "array"
          },
          "heron_id": {
            "description": "Unique ID for data source generated by Heron",
            "example": "dso_8LdDYA4K8U7zA9he7BDdRX",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "default": true,
            "description": "Whether or not the data source is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          },
          "last_updated": {
            "description": "When the data source was last updated in Heron system",
            "example": "2024-05-31T14:08:36.808793",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataSourceMetadata"
              }
            ],
            "description": "Metadata associated with the data source",
            "example": {
              "filename": "202348_JAN_2022.pdf",
              "status": "processed"
            }
          },
          "reference_id": {
            "description": "Unique ID to identify the data source",
            "example": "pdf_82WHsJQMHtJjZRkvP4LXkt",
            "type": "string"
          },
          "status": {
            "description": "Status of the data source entity, where applicable (e.g. pdfs, integration links)",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded",
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid",
              "unknown"
            ],
            "example": "new",
            "type": "string"
          },
          "type": {
            "description": "Data source type",
            "enum": [
              "api",
              "csv",
              "pdf",
              "integration_link",
              "legacy",
              "legacy_pdf",
              "legacy_integration_link"
            ],
            "example": "pdf",
            "type": "string"
          }
        },
        "required": [
          "created",
          "data_source_accounts",
          "heron_id",
          "last_updated",
          "reference_id",
          "type"
        ],
        "type": "object"
      },
      "EndUserDataSourceAccount": {
        "properties": {
          "account_id": {
            "description": "Unique account id associated with the data source account",
            "example": "202348",
            "type": "string"
          },
          "anomaly_score": {
            "description": "For pdf bank statement account sources, where the value is between 0 and 1000, with 1000 being the most anomalous",
            "example": 200,
            "type": "integer"
          },
          "balances": {
            "description": "List of balances associated with the account",
            "example": [
              {
                "closing_amount": 25000.45,
                "currency": "USD",
                "date": "2022-01-01"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            },
            "type": "array"
          },
          "currency": {
            "description": "Currency of the account",
            "example": "USD",
            "type": "string"
          },
          "end_date": {
            "description": "End date of the account",
            "example": "2022-01-31",
            "format": "date",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID for data source generated by Heron",
            "example": "dso_2RKyxRjQ52y7UVZpUjChJk",
            "type": "string"
          },
          "institution_name": {
            "description": "Name of the institution",
            "example": "Chase",
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether or not the account is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          },
          "max_date": {
            "description": "Latest date of transactions associated with the data source account",
            "example": "2022-01-31",
            "format": "date",
            "type": "string"
          },
          "min_date": {
            "description": "Earliest date of transactions associated with the data source account",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "Name of the account",
            "example": "Checking Account",
            "type": "string"
          },
          "num_transactions": {
            "description": "Number of transactions associated with the data source account",
            "example": 120,
            "type": "integer"
          },
          "number": {
            "description": "Number of the account",
            "example": "123456789",
            "type": "string"
          },
          "owner_name": {
            "description": "Name of the account owner",
            "example": "John Doe",
            "type": "string"
          },
          "reference_id": {
            "description": "This is the account ID provided as part of the transaction",
            "example": "account-202348",
            "type": "string"
          },
          "start_date": {
            "description": "Start date of the account",
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          },
          "transactions_match_balances": {
            "description": "For pdf bank statements, represents whether all transactions extracted match the balances extracted",
            "example": true,
            "type": "boolean"
          },
          "type": {
            "description": "Type of the account",
            "example": "Checking",
            "type": "string"
          }
        },
        "required": [
          "is_enabled"
        ],
        "type": "object"
      },
      "EndUserDataSourceAccountUpdateSchema": {
        "properties": {
          "is_enabled": {
            "description": "Whether or not the account is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EndUserDataSourceMetadata": {
        "properties": {
          "currency": {
            "description": "Currency associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "USD",
            "type": "string"
          },
          "filename": {
            "description": "Name of the file uploaded, where applicable (e.g. pdfs)",
            "example": "202348_JAN_2022.pdf",
            "type": "string"
          },
          "integration_heron_id": {
            "description": "Unique Heron ID associated with an integration",
            "example": "itg_SaHAq6XB52EeYMxVJUKwhM",
            "type": "string"
          },
          "integration_item_id": {
            "description": "Unique item id associated with integration link data sources",
            "example": "Ed6bjNrDLJfGvZWwnkQlfxwoNz54B5C97ejBr",
            "type": "string"
          },
          "last_successful_sync": {
            "description": "Last successful sync date associated with integration link data sources",
            "example": "2024-05-31T14:08:36.808199",
            "format": "date-time",
            "type": "string"
          },
          "notes": {
            "description": "Notes associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "error with processing, 52 invalid transaction(s) extracted from statement",
            "type": "string"
          },
          "parsing_version": {
            "description": "Parsing version associated with the data source entity, where applicable (e.g. pdfs)",
            "example": "1.0.0",
            "type": "string"
          },
          "sub_type": {
            "description": "Sub type of the data source entity, where applicable (e.g. integration links)",
            "example": "transaction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserDataSourceSummaries": {
        "properties": {
          "status": {
            "description": "Status of the data source entity, where applicable (e.g. pdfs, integration links)",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded",
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid",
              "unknown"
            ],
            "example": "new",
            "type": "string"
          },
          "type": {
            "description": "Data source type",
            "enum": [
              "api",
              "csv",
              "pdf",
              "integration_link",
              "legacy",
              "legacy_pdf",
              "legacy_integration_link"
            ],
            "example": "pdf",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "EndUserDataSourceUpdateSchema": {
        "properties": {
          "is_enabled": {
            "default": true,
            "description": "Whether or not the data source is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EndUserDataSources": {
        "properties": {
          "created": {
            "description": "When the data source was created in Heron system",
            "example": "2024-04-19T14:08:36.808759",
            "format": "date-time",
            "type": "string"
          },
          "data_source_accounts": {
            "description": "List of data source accounts associated with the data source",
            "example": [
              {
                "account_id": "202348",
                "anomaly_score": 200,
                "enabled": true,
                "max_date": "2022-01-31",
                "min_date": "2022-01-01",
                "num_transactions": 120,
                "transactions_match_balances": true
              }
            ],
            "items": {
              "$ref": "#/components/schemas/EndUserDataSourceAccount"
            },
            "type": "array"
          },
          "heron_id": {
            "description": "Unique ID for data source generated by Heron",
            "example": "dso_8LdDYA4K8U7zA9he7BDdRX",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "default": true,
            "description": "Whether or not the data source is enabled. If disabled, hides related transactions from analytics",
            "example": true,
            "type": "boolean"
          },
          "last_updated": {
            "description": "When the data source was last updated in Heron system",
            "example": "2024-05-31T14:08:36.808793",
            "format": "date-time",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndUserDataSourceMetadata"
              }
            ],
            "description": "Metadata associated with the data source",
            "example": {
              "filename": "202348_JAN_2022.pdf",
              "status": "processed"
            }
          },
          "reference_id": {
            "description": "Unique ID to identify the data source",
            "example": "pdf_82WHsJQMHtJjZRkvP4LXkt",
            "type": "string"
          },
          "status": {
            "description": "Status of the data source entity, where applicable (e.g. pdfs, integration links)",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded",
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid",
              "unknown"
            ],
            "example": "new",
            "type": "string"
          },
          "type": {
            "description": "Data source type",
            "enum": [
              "api",
              "csv",
              "pdf",
              "integration_link",
              "legacy",
              "legacy_pdf",
              "legacy_integration_link"
            ],
            "example": "pdf",
            "type": "string"
          }
        },
        "required": [
          "created",
          "data_source_accounts",
          "heron_id",
          "last_updated",
          "reference_id",
          "type"
        ],
        "type": "object"
      },
      "EndUserEmail": {
        "properties": {
          "date_sent": {
            "format": "date-time",
            "type": "string"
          },
          "date_sent_string": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "from_address_domain": {
            "type": "string"
          },
          "from_name": {
            "type": "string"
          },
          "html_body": {
            "type": "string"
          },
          "html_or_text_body": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          },
          "text_body": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserEmailSchema": {
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "date_sent": {
            "format": "date-time",
            "type": "string"
          },
          "date_sent_string": {
            "type": "string"
          },
          "from_address": {
            "type": "string"
          },
          "from_address_domain": {
            "type": "string"
          },
          "from_name": {
            "type": "string"
          },
          "heron_id": {
            "type": "string"
          },
          "html_body": {
            "type": "string"
          },
          "html_or_text_body": {
            "type": "string"
          },
          "integration_id": {
            "type": "integer"
          },
          "subject": {
            "type": "string"
          },
          "subject_cleaned": {
            "type": "string"
          },
          "text_body": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserEnrichParams": {
        "properties": {
          "priority": {
            "default": "normal",
            "description": "Priority for async enrichment",
            "enum": [
              "normal",
              "high"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserFileBase64Schema": {
        "properties": {
          "file_b64": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserFileSchema": {
        "properties": {
          "bank_statement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PdfGet"
              }
            ],
            "example": null,
            "nullable": true,
            "readOnly": true
          },
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "file_class": {
            "enum": [
              "other",
              "iso_application_form",
              "bank_statement",
              "debt_summary",
              "email",
              "invoice",
              "drivers_licence_front"
            ],
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "heron_id": {
            "type": "string"
          },
          "iso_application": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetIsoApplication"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "reference_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserFileUpdateSchema": {
        "properties": {
          "file_class": {
            "enum": [
              "other",
              "iso_application_form",
              "bank_statement",
              "debt_summary",
              "email",
              "invoice",
              "drivers_licence_front"
            ],
            "type": "string"
          },
          "reference_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserFileUploadSchema": {
        "properties": {
          "file_base64": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "reference_id": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "file_base64",
          "filename"
        ],
        "type": "object"
      },
      "EndUserForecastInputParams": {
        "properties": {
          "category_heron_id": {
            "description": "Heron ID of category to be forecasted; either category_heron_id or category_label must be present",
            "example": "ctg_AwHi7vybh7ZfMKcAJwZSuf",
            "type": "string"
          },
          "category_label": {
            "description": "Label of category to be forecasted; either category_heron_id or category_label must be present",
            "example": "Revenue",
            "type": "string"
          },
          "date_granularity": {
            "default": "month",
            "description": "Aggregate results over time, i.e., aggregate by week or by month",
            "enum": [
              "week",
              "month"
            ],
            "example": "month",
            "type": "string"
          },
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "from_date": {
            "default": null,
            "description": "The earliest transaction timestamp date to use in forecasting",
            "example": "2022-01-01",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": [
              "GBP",
              "USD",
              "EUR"
            ],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "The latest transaction timestamp date to use in forecasting",
            "example": "2022-01-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserForecastOutputSchema": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "Forecast date at specified date granularity",
            "example": "2024-05-31",
            "type": "string"
          },
          "predicted": {
            "description": "Predicted amount",
            "example": 42.42,
            "type": "number"
          },
          "predicted_lower": {
            "description": "Predict amount lower bound",
            "example": 4.24,
            "type": "number"
          },
          "predicted_upper": {
            "description": "Predicted amount upper bound",
            "example": 420.42,
            "type": "number"
          }
        },
        "type": "object"
      },
      "EndUserInformationPatchSchema": {
        "properties": {
          "amount_requested": {
            "type": "number"
          },
          "annual_revenue": {
            "type": "number"
          },
          "business_start_date": {
            "format": "date",
            "type": "string"
          },
          "company_billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "company_email": {
            "type": "string"
          },
          "company_legal_business_name": {
            "type": "string"
          },
          "company_phone_number": {
            "type": "string"
          },
          "company_physical_address": {
            "$ref": "#/components/schemas/Address"
          },
          "company_website": {
            "type": "string"
          },
          "dba": {
            "description": "Doing business as",
            "type": "string"
          },
          "federal_tax_id": {
            "type": "string"
          },
          "industry_type": {
            "type": "string"
          },
          "loan_purpose": {
            "type": "string"
          },
          "monthly_revenue": {
            "type": "number"
          },
          "naics": {
            "type": "string"
          },
          "owner_1": {
            "$ref": "#/components/schemas/Owner"
          },
          "owner_2": {
            "$ref": "#/components/schemas/Owner"
          },
          "predicted_industry_probability": {
            "type": "number"
          },
          "source_type": {
            "description": "Source of the end user information",
            "enum": [
              "api",
              "iso_application_form",
              "heron_industry_classifier",
              "rel6_industry_classifier"
            ],
            "example": "iso_application_form",
            "type": "string"
          },
          "state_of_incorporation": {
            "type": "string"
          },
          "type_of_business_entity": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserInformationSchema": {
        "properties": {
          "amount_requested": {
            "type": "number"
          },
          "annual_revenue": {
            "type": "number"
          },
          "business_start_date": {
            "format": "date",
            "type": "string"
          },
          "company_billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "company_email": {
            "type": "string"
          },
          "company_legal_business_name": {
            "type": "string"
          },
          "company_phone_number": {
            "type": "string"
          },
          "company_physical_address": {
            "$ref": "#/components/schemas/Address"
          },
          "company_website": {
            "type": "string"
          },
          "dba": {
            "description": "Doing business as",
            "type": "string"
          },
          "federal_tax_id": {
            "type": "string"
          },
          "industry_type": {
            "type": "string"
          },
          "loan_purpose": {
            "type": "string"
          },
          "monthly_revenue": {
            "type": "number"
          },
          "naics": {
            "type": "string"
          },
          "owner_1": {
            "$ref": "#/components/schemas/Owner"
          },
          "owner_2": {
            "$ref": "#/components/schemas/Owner"
          },
          "predicted_industry_probability": {
            "type": "number"
          },
          "source_type": {
            "description": "Source of the end user information",
            "enum": [
              "api",
              "iso_application_form",
              "heron_industry_classifier",
              "rel6_industry_classifier"
            ],
            "example": "iso_application_form",
            "type": "string"
          },
          "state_of_incorporation": {
            "type": "string"
          },
          "type_of_business_entity": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserMerchantSummary": {
        "properties": {
          "by_merchant_summary": {
            "items": {
              "$ref": "#/components/schemas/MerchantSummaryRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EndUserMerchantSummaryParams": {
        "properties": {
          "category_label_or_heron_id": {
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "category_label_or_heron_id"
        ],
        "type": "object"
      },
      "EndUserPostParams": {
        "properties": {
          "confidence": {
            "description": "Aggregated confidence for the end user across all transactions; between 0 and 1",
            "example": 0.42,
            "readOnly": true,
            "type": "number"
          },
          "created": {
            "description": "When the end user was created in Heron system",
            "example": "2024-04-19T14:08:37.080630",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "criteria": {
            "description": "List of scorecard metrics",
            "items": {
              "$ref": "#/components/schemas/MetricOutput"
            },
            "readOnly": true,
            "type": "array"
          },
          "data_sources": {
            "description": "List of data source summaries for the end user",
            "items": {
              "$ref": "#/components/schemas/DataSource"
            },
            "readOnly": true,
            "type": "array"
          },
          "end_user_id": {
            "description": "id defined by user; links to the end_user_id for transactions",
            "example": "4457fb08-db5e-4251-9f9b-eda6bc526a9a",
            "maxLength": 140,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for end user generated by Heron",
            "example": "eus_2fTTyqtpPR8r2mvfBzkehg",
            "readOnly": true,
            "type": "string"
          },
          "is_portfolio": {
            "description": "Whether the end user is part of a lending portfolio",
            "example": true,
            "type": "boolean"
          },
          "last_processed_at": {
            "description": "When the end user was last successfully processed in Heron system",
            "example": "2024-05-31T14:08:37.080944",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the end user was last updated in Heron system",
            "example": "2024-05-31T14:08:37.080675",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Name of end user; may help to improve categorisation accuracy",
            "example": "Company Name Inc.",
            "maxLength": 128,
            "nullable": true,
            "type": "string"
          },
          "profit_and_loss_layout": {
            "nullable": true
          }
        },
        "required": [
          "end_user_id"
        ],
        "type": "object"
      },
      "EndUserReadEnrichedParams": {
        "properties": {
          "last_updated_min": {
            "default": null,
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat",
            "example": "2024-05-31T14:08:37.085406",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Results page",
            "minimum": 1,
            "type": "integer"
          },
          "per_page": {
            "default": 100,
            "description": "Desired results per page",
            "maximum": 50000,
            "minimum": 1,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EndUserReadParams": {
        "properties": {
          "criteria": {
            "default": null,
            "description": "Information about the end user that can be used as rules for underwriting",
            "example": {
              "history_days": {
                "value": 40
              }
            },
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "end_user_id": {
            "default": null,
            "description": "Filter by ID associated with end_user_id field in transactions",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "default": null,
            "description": "Unique ID generated by Heron",
            "example": "eus_fCYZGMib7Lh2h68p95Wqgn",
            "nullable": true,
            "type": "string"
          },
          "include_data_sources": {
            "default": false,
            "description": "Whether the to include data sources for each end user",
            "example": true,
            "type": "boolean"
          },
          "include_scorecard_metrics": {
            "default": false,
            "description": "Whether to include scorecard metrics for each end user (under field criteria)",
            "example": true,
            "type": "boolean"
          },
          "is_portfolio": {
            "default": null,
            "description": "Whether the end user is part of a lending portfolio",
            "example": true,
            "nullable": true,
            "type": "boolean"
          },
          "limit": {
            "default": 1000,
            "description": "Pagination limit per page",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "name": {
            "default": null,
            "description": "Filter by name associated with end user",
            "example": "your_end_user_name",
            "nullable": true,
            "type": "string"
          },
          "order_by": {
            "default": "last_updated_desc",
            "description": "Order to return end users by",
            "enum": [
              "last_updated_desc",
              "last_updated_asc",
              "created_desc",
              "created_asc"
            ],
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Pagination page number",
            "minimum": 1,
            "type": "integer"
          },
          "status": {
            "default": null,
            "description": "Filter by status of end user",
            "enum": [
              "new",
              "ready",
              "processed",
              "reviewed",
              "review_requested",
              "failed"
            ],
            "example": "reviewed",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserStatsInputParams": {
        "properties": {
          "category_heron_ids": {
            "default": [],
            "description": "Filter by specific categories",
            "example": [
              "ctg_cxVBMJfL2r2UJy4YnSMD5u",
              "ctg_TSvwKY37xSL6GDxgLgQjm7"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "date_granularity": {
            "default": "month",
            "description": "Aggregate results over time, e.g., by week or by quarter",
            "enum": [
              "day",
              "week",
              "month",
              "quarter",
              "year"
            ],
            "example": "month",
            "type": "string"
          },
          "end_user_heron_id": {
            "default": null,
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
            "nullable": true,
            "type": "string"
          },
          "end_user_id": {
            "default": null,
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "example": "your_end_user_id",
            "nullable": true,
            "type": "string"
          },
          "from_date": {
            "default": null,
            "description": "Filter for transactions with timestamp after the input value (as date)",
            "example": "2024-05-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "group_by": {
            "default": "category",
            "description": "Pivot results by merchant or by category",
            "enum": [
              "category",
              "merchant"
            ],
            "example": "category",
            "type": "string"
          },
          "merchant_heron_ids": {
            "default": [],
            "description": "Filter by specific merchants",
            "example": [
              "mrc_JddNQ5amLyp46LbhBUJejV",
              "mrc_VWUJcqb72BmtbCUqEUjXWq"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "to_currency": {
            "description": "ISO 4217 currency code to convert to",
            "enum": [
              "GBP",
              "USD",
              "EUR"
            ],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "Filter for transactions with timestamp before the input value (as date)",
            "example": "2024-05-30",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputMetrics": {
        "properties": {
          "inflow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"
              }
            ],
            "description": "Metrics only counting inflows"
          },
          "net": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"
              }
            ],
            "description": "Net metrics"
          },
          "outflow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndUserStatsOutputMetricsInstance"
              }
            ],
            "description": "Metrics only counting outflows"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputMetricsInstance": {
        "properties": {
          "amount": {
            "description": "Aggregate amount of transactions",
            "example": 42.42,
            "type": "number"
          },
          "avg_amount": {
            "description": "Average value of transactions",
            "example": 1.01,
            "type": "number"
          },
          "n": {
            "description": "Number of transactions",
            "example": 42,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EndUserStatsOutputSchema": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "dt": {
            "description": "Date, impacted by input date granularity",
            "example": "2024-05-31",
            "type": "string"
          },
          "heron_id": {
            "description": "Heron ID of either merchant or category, depending on what was specified in group_by",
            "example": "mrc_7XEQNdbSMXbX7Rr5H2QWaF",
            "type": "string"
          },
          "label": {
            "description": "Label of either merchant or category, depending on what was specified in group_by",
            "example": "Revenue",
            "type": "string"
          },
          "metrics": {
            "$ref": "#/components/schemas/EndUserStatsOutputMetrics"
          }
        },
        "type": "object"
      },
      "EndUserTransactionPostAsync": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "description",
          "reference_id"
        ],
        "type": "object"
      },
      "EndUserTransactionsPostAsyncSchema": {
        "properties": {
          "balances": {
            "description": "Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied.",
            "items": {
              "$ref": "#/components/schemas/AccountBalance1"
            },
            "nullable": true,
            "type": "array"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/EndUserTransactionPostAsync"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "GetIsoApplication": {
        "properties": {
          "heron_id": {
            "description": "The ISO application's heron_id",
            "example": "iso_6hBjQT9k6KP2rLCXwjUJff",
            "type": "string"
          },
          "processing_status": {
            "description": "The processing status of the file.",
            "enum": [
              "new",
              "processing",
              "processed",
              "failed"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "required": [
          "heron_id",
          "processing_status"
        ],
        "type": "object"
      },
      "GetIsoApplicationSchema": {
        "properties": {
          "created": {
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "end_user_heron_id": {
            "description": "The heron_id of the end_user associated with the iso application, if available",
            "readOnly": true,
            "type": "string"
          },
          "end_user_id": {
            "description": "The end_user_id of the end_user associated with the iso application, if available",
            "readOnly": true,
            "type": "string"
          },
          "field_validations": {
            "items": {
              "$ref": "#/components/schemas/IsoApplicationFieldValidation"
            },
            "type": "array"
          },
          "filename": {
            "description": "The original filename of the ISO application form",
            "example": "iso_app.pdf",
            "type": "string"
          },
          "heron_id": {
            "description": "The ISO application's heron_id",
            "example": "iso_6hBjQT9k6KP2rLCXwjUJff",
            "type": "string"
          },
          "processing_status": {
            "description": "The processing status of the file.",
            "enum": [
              "new",
              "processing",
              "processed",
              "failed"
            ],
            "example": "processed",
            "type": "string"
          },
          "quality_status": {
            "description": "The overall field validation results. 'fully_matched' indicated all field validations have passed. 'review_required' indicates one or more field validations failed.",
            "enum": [
              "fully_matched",
              "review_required"
            ],
            "example": "fully_matched",
            "nullable": true,
            "type": "string"
          },
          "result": {
            "additionalProperties": {
              "$ref": "#/components/schemas/IsoApplicationFieldResult"
            },
            "description": "The extracted keys/values from the form, normalised to Heron's field schema. Keys will only be present in results if they are found in the original file. For a full list of fields, see the documentation.",
            "type": "object"
          },
          "source_email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndUserEmail"
              }
            ],
            "description": "Original email that contained ISO application, if applicable",
            "nullable": true,
            "readOnly": true
          }
        },
        "required": [
          "filename",
          "heron_id",
          "processing_status",
          "quality_status"
        ],
        "type": "object"
      },
      "GetTransactionParams": {
        "properties": {
          "category_heron_id": {
            "default": [],
            "description": "Filter by the heron_id of the category that the transaction is annotated with",
            "example": "ctg_k3D2QzKXsFP2iZ8S8JJ9aa",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "confidence_max": {
            "description": "Filter by maximum confidence of annotation associated with transaction",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "confidence_min": {
            "description": "Filter by minimum confidence of annotation associated with transaction",
            "maximum": 1,
            "minimum": 0,
            "type": "number"
          },
          "created_date_max": {
            "description": "Filter by latest transaction upload date - when Heron received the transaction",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "created_date_min": {
            "description": "Filter by earliest transaction upload date - when Heron received the transaction",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "description_keyword": {
            "description": "Filter by keyword match on transaction description; case insensitive",
            "type": "string"
          },
          "description_regex": {
            "description": "Filter by regex matching transaction description",
            "type": "string"
          },
          "end_user_id": {
            "description": "End user id of transaction",
            "type": "string"
          },
          "from_date": {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "format": "date",
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Filter by whether the transaction has a matching transaction",
            "type": "boolean"
          },
          "has_merchant": {
            "default": null,
            "description": "Filter by whether the transaction has a merchant entity associated with it",
            "nullable": true,
            "type": "boolean"
          },
          "heron_id": {
            "description": "Heron generated Id of transaction",
            "example": "txn_FNACrsReFPgnVwtroAWyND",
            "type": "string"
          },
          "include_duplicates": {
            "description": "Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true.",
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Filter by whether the transaction is recurring",
            "type": "boolean"
          },
          "last_updated_max": {
            "description": "Filter for transactions whose values were last updated in Heron systems before the specified input value",
            "example": "2024-05-31T14:08:36.302403",
            "format": "date-time",
            "type": "string"
          },
          "last_updated_min": {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value",
            "example": "2024-05-31T14:08:36.302383",
            "format": "date-time",
            "type": "string"
          },
          "limit": {
            "default": 1000,
            "description": "Number of transactions to return per page",
            "maximum": 10000,
            "minimum": 1,
            "type": "integer"
          },
          "max_amount": {
            "description": "Filter by maximum amount of transaction",
            "type": "number"
          },
          "merchant_group_id": {
            "description": "Filter by merchant group id",
            "type": "string"
          },
          "merchant_heron_id": {
            "description": "Filter by merchant heron id",
            "type": "string"
          },
          "min_amount": {
            "description": "Filter by minimum amount of transaction",
            "type": "number"
          },
          "order_by": {
            "default": "id_asc",
            "description": "What to order transactions by",
            "enum": [
              "amount_asc",
              "amount_desc",
              "abs_amount_asc",
              "abs_amount_desc",
              "description_asc",
              "description_desc",
              "timestamp_asc",
              "timestamp_desc",
              "id_asc",
              "id_desc",
              "confidence_asc",
              "confidence_desc"
            ],
            "type": "string"
          },
          "page": {
            "default": 1,
            "description": "Page of transaction to return",
            "minimum": 1,
            "type": "integer"
          },
          "reference_id": {
            "description": "Reference Id of transaction",
            "type": "string"
          },
          "request_id": {
            "description": "Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates.",
            "type": "string"
          },
          "timestamp_date_max": {
            "description": "Filter by latest transaction timestamp",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "timestamp_date_min": {
            "description": "Filter by earliest transaction timestamp",
            "example": "2020-04-27",
            "format": "date",
            "type": "string"
          },
          "to_date": {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "format": "date",
            "type": "string"
          },
          "transaction_code": {
            "description": "Filter by transaction code",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HeronScoreFeatureGroupContribution": {
        "properties": {
          "relative_contribution": {
            "type": "number"
          },
          "relative_population_avg": {
            "type": "number"
          }
        },
        "type": "object"
      },
      "HeronScoreSchema": {
        "properties": {
          "data_quality_issues": {
            "description": "A list of data quality issues that may have impacted the score",
            "items": {
              "enum": [
                "transactions_without_timestamps",
                "date_range_too_low",
                "confidence_too_low",
                "ctg_coverage_too_low",
                "data_volume_too_low",
                "data_not_fresh"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "feature_groups_contributions": {
            "additionalProperties": {
              "$ref": "#/components/schemas/HeronScoreFeatureGroupContribution"
            },
            "type": "object"
          },
          "predicted_at": {
            "description": "When the Heron Score was predicted",
            "format": "date-time",
            "type": "string"
          },
          "reference_timestamp": {
            "description": "When the Heron Score was calculated for; by default the last transaction timestamp for the company",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "enum": [
              "not_available",
              "partially_available",
              "available"
            ],
            "type": "string"
          },
          "value": {
            "description": "The Heron Score value",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IndustryParams": {
        "properties": {
          "naics_code_max_digits": {
            "description": "Maximum number of digits in NAICS code",
            "example": 6,
            "maximum": 6,
            "minimum": 2,
            "type": "integer"
          },
          "naics_code_min_digits": {
            "description": "Minimum number of digits in NAICS code",
            "example": 2,
            "maximum": 6,
            "minimum": 2,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "IndustrySchema": {
        "properties": {
          "label": {
            "description": "The text name of the taxonomy value",
            "example": "Fruit and Vegetable Preserving and Specialty Food Manufacturing",
            "type": "string"
          },
          "probability": {
            "description": "The probability that the end user is associated with the industry; we will always return the highest probability industry",
            "example": 0.42,
            "type": "number"
          },
          "taxonomy": {
            "description": "Industry classification system used",
            "example": "naics",
            "type": "string"
          },
          "taxonomy_value": {
            "description": "The predicted industry for the end user according to taxonomy",
            "example": "3114",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InscribeAccount": {
        "properties": {
          "account_type": {
            "nullable": true,
            "type": "string"
          },
          "beginning_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InscribeNumberPrediction"
              }
            ],
            "nullable": true
          },
          "ending_balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InscribeNumberPrediction"
              }
            ],
            "nullable": true
          },
          "institution_name": {
            "nullable": true,
            "type": "string"
          },
          "number": {
            "$ref": "#/components/schemas/InscribeStringPrediction"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/InscribeTransaction"
            },
            "type": "array"
          },
          "transactions_match_balances": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InscribeNumberPrediction": {
        "properties": {
          "confidence": {
            "type": "number"
          },
          "normalized": {
            "type": "integer"
          },
          "raw": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InscribeParsedDetails": {
        "properties": {
          "bank_accounts": {
            "items": {
              "$ref": "#/components/schemas/InscribeAccount"
            },
            "type": "array"
          },
          "name": {
            "$ref": "#/components/schemas/InscribeParsedDetailsName"
          }
        },
        "type": "object"
      },
      "InscribeParsedDetailsName": {
        "properties": {
          "raw": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InscribeSchema": {
        "properties": {
          "customer_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "parsed_details": {
            "$ref": "#/components/schemas/InscribeParsedDetails"
          }
        },
        "type": "object"
      },
      "InscribeStringPrediction": {
        "properties": {
          "confidence": {
            "type": "number"
          },
          "normalized": {
            "type": "string"
          },
          "raw": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "InscribeTransaction": {
        "properties": {
          "amount": {
            "type": "integer"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "IntegrationLinkNewSchema": {
        "properties": {
          "access_token": {
            "description": "The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "nullable": false,
            "type": "string",
            "writeOnly": true
          },
          "created": {
            "description": "When the integration link was created in Heron system",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "data_source_heron_id": {
            "type": "string"
          },
          "end_user_id": {
            "description": "A unique identifier for your end user (customer) generated by you",
            "example": "75098e25-66dd-4568-9c25-a2b0a725528e",
            "type": "string",
            "writeOnly": true
          },
          "end_user_name": {
            "description": "An human readable name for this end user, like the company legal name",
            "example": "Acme Corp",
            "type": "string",
            "writeOnly": true
          },
          "item_id": {
            "description": "Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'.",
            "example": "M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op",
            "nullable": false,
            "type": "string"
          },
          "last_successful_sync": {
            "description": "When the integration link was last successfully synced",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the integration link was last updated in Heron system",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "The integration link status",
            "enum": [
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid"
            ],
            "example": "active",
            "readOnly": true,
            "type": "string"
          },
          "status_message": {
            "description": "A message describing the 'erroring' status of the integration link",
            "example": "[ITEM_LOGIN_REQUIRED] the login details of this item have changed (credentials, MFA, or required user action) and a user login is required to update this information. use Link's update mode to restore the item to a good state",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The integration link type, inherited from the integration: plaid_assets_report or plaid_integration",
            "example": "plaid_assets_report",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "end_user_id",
          "item_id"
        ],
        "type": "object"
      },
      "IntegrationLinkSchema": {
        "properties": {
          "access_token": {
            "description": "The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "nullable": false,
            "type": "string",
            "writeOnly": true
          },
          "created": {
            "description": "When the integration link was created in Heron system",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "end_user_id": {
            "description": "A unique identifier for your end user (customer) generated by you",
            "example": "75098e25-66dd-4568-9c25-a2b0a725528e",
            "type": "string",
            "writeOnly": true
          },
          "end_user_name": {
            "description": "An human readable name for this end user, like the company legal name",
            "example": "Acme Corp",
            "type": "string",
            "writeOnly": true
          },
          "item_id": {
            "description": "Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'.",
            "example": "M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op",
            "nullable": false,
            "type": "string"
          },
          "last_successful_sync": {
            "description": "When the integration link was last successfully synced",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the integration link was last updated in Heron system",
            "example": "2020-01-01T00:00:00Z",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "description": "The integration link status",
            "enum": [
              "pending",
              "active",
              "syncing",
              "erroring",
              "sync_disabled",
              "deleted_in_plaid"
            ],
            "example": "active",
            "readOnly": true,
            "type": "string"
          },
          "status_message": {
            "description": "A message describing the 'erroring' status of the integration link",
            "example": "[ITEM_LOGIN_REQUIRED] the login details of this item have changed (credentials, MFA, or required user action) and a user login is required to update this information. use Link's update mode to restore the item to a good state",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The integration link type, inherited from the integration: plaid_assets_report or plaid_integration",
            "example": "plaid_assets_report",
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "access_token",
          "end_user_id",
          "item_id"
        ],
        "type": "object"
      },
      "IntegrationLinkUpdateSchema": {
        "properties": {
          "access_token": {
            "description": "The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)",
            "example": "access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6",
            "type": "string",
            "writeOnly": true
          }
        },
        "required": [
          "access_token"
        ],
        "type": "object"
      },
      "IntegrationSchema": {
        "properties": {
          "base_url": {
            "description": "Base URL of the API integration. Required for Plaid integration",
            "example": "https://sandbox.plaid.com",
            "format": "url",
            "type": "string"
          },
          "client_auth": {
            "type": "object",
            "writeOnly": true
          },
          "client_id": {
            "description": "Client ID for API access (this is encrypted in transit and at-rest with a custom key). Required for Plaid integration",
            "type": "string"
          },
          "client_secret": {
            "description": "Client Secret for API access (this is encrypted in transit and at-rest with a custom key). Required for Plaid integration",
            "type": "string"
          },
          "heron_id": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "A name for your integration",
            "example": "Plaid Prod",
            "type": "string"
          },
          "resource": {
            "description": "For integrations with multiple available resources, the specific resource",
            "enum": [
              "transaction",
              "assets_report",
              "end_user_application",
              "invoice_factoring_processing"
            ],
            "type": "string"
          },
          "type": {
            "description": "The integration type, a specific provider",
            "enum": [
              "plaid",
              "ocrolus",
              "truelayer",
              "email",
              "salesforce",
              "rel6"
            ],
            "type": "string"
          },
          "webhook_url": {
            "description": "URL provided by you to which we'll forward all webhooks (optional)",
            "example": "https://your-server.yourdomain.com/hooks",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "name",
          "resource",
          "type"
        ],
        "type": "object"
      },
      "IsoApplicationFieldResult": {
        "properties": {
          "document_field_name": {
            "description": "The field's original name in the source document",
            "example": "Company Legal Name",
            "type": "string"
          },
          "is_empty": {
            "description": "Whether the value is empty",
            "example": false,
            "type": "boolean"
          },
          "value": {
            "description": "The value extracted from the document for the current field",
            "example": "Heron Data Ltd",
            "type": "string"
          },
          "value_confidence": {
            "description": "OCR confidence of the extracted value",
            "example": 0.99,
            "nullable": true,
            "type": "number"
          }
        },
        "required": [
          "document_field_name",
          "is_empty",
          "value",
          "value_confidence"
        ],
        "type": "object"
      },
      "IsoApplicationFieldValidation": {
        "properties": {
          "failure_reason": {
            "nullable": true,
            "type": "string"
          },
          "field_name": {
            "type": "string"
          },
          "result": {
            "enum": [
              "passed",
              "failed",
              "not_applicable"
            ],
            "example": "passed",
            "type": "string"
          },
          "validation_type": {
            "type": "string"
          }
        },
        "required": [
          "failure_reason",
          "field_name",
          "result",
          "validation_type"
        ],
        "type": "object"
      },
      "Merchant": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/MerchantCategory"
            },
            "readOnly": true,
            "type": "array"
          },
          "group_id": {
            "enum": [
              "Uber",
              "Google",
              "Intuit",
              "debt.mca_or_rbf",
              "debt.non_bank_business",
              "debt.equipment_and_auto_leasing",
              "debt.mortgage",
              "debt.personal_non_mortgage",
              "debt.collections",
              null
            ],
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "example": "mrc_UABWqswMJf5qkw57qoKbvD",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "is_priority": {
            "readOnly": true,
            "type": "boolean"
          },
          "logo_url": {
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "format": "url",
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ],
        "type": "object"
      },
      "MerchantCategory": {
        "properties": {
          "code": {
            "example": "7311",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "default": null,
            "example": "Advertising services",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "slug": {
            "default": null,
            "example": "advertising_services",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "required": [
          "code"
        ],
        "type": "object"
      },
      "MerchantExtract": {
        "properties": {
          "categories": {
            "items": {
              "$ref": "#/components/schemas/MerchantCategory"
            },
            "readOnly": true,
            "type": "array"
          },
          "confidence": {
            "default": null,
            "maximum": 1,
            "minimum": 0,
            "nullable": true,
            "type": "number"
          },
          "group_id": {
            "type": "string"
          },
          "heron_id": {
            "example": "mrc_UABWqswMJf5qkw57qoKbvD",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {
            "format": "url",
            "readOnly": true,
            "type": "string"
          },
          "logo_url": {
            "format": "url",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "default": null,
            "example": "Amazon",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "default": null,
            "example": "https://www.amazon.com/",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MerchantFeedback": {
        "properties": {
          "heron_id": {
            "description": "heron_id of the correct merchant",
            "example": "mrc_ZoZJp2ogjNYE5fRLNZPYAH",
            "type": "string"
          },
          "is_correct": {
            "default": false,
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "name of the correct merchant",
            "example": "Spotify",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MerchantGroup": {
        "properties": {
          "description": {
            "description": "Description of merchant group",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of merchant group",
            "type": "string"
          },
          "name": {
            "description": "Display name of merchant group",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MerchantSummaryRow": {
        "properties": {
          "group": {
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "type": "string"
          },
          "inflow_metrics": {
            "$ref": "#/components/schemas/MerchantSummaryRowMetrics"
          },
          "name": {
            "type": "string"
          },
          "net_metrics": {
            "$ref": "#/components/schemas/MerchantSummaryRowMetrics"
          },
          "outflow_metrics": {
            "$ref": "#/components/schemas/MerchantSummaryRowMetrics"
          }
        },
        "type": "object"
      },
      "MerchantSummaryRowMetrics": {
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "count": {
            "type": "integer"
          },
          "duration_days": {
            "type": "integer"
          },
          "estimated_monthly_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "nullable": true
          },
          "frequency": {
            "enum": [
              "not_enough_data",
              "same_day",
              "irregular",
              "daily",
              "weekly",
              "biweekly",
              "monthly",
              "quarterly",
              "annually"
            ],
            "nullable": true,
            "type": "string"
          },
          "max_amount": {
            "$ref": "#/components/schemas/Money"
          },
          "max_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "mean_amount": {
            "$ref": "#/components/schemas/Money"
          },
          "mean_interval_days": {
            "nullable": true,
            "type": "number"
          },
          "median_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Deprecated. This field is no longer being populated",
            "nullable": true
          },
          "min_amount": {
            "$ref": "#/components/schemas/Money"
          },
          "min_timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "mode_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "description": "Deprecated. This field is no longer being populated",
            "nullable": true
          },
          "mode_interval_days": {
            "nullable": true,
            "type": "integer"
          },
          "std_dev_amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Money"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "Metric": {
        "properties": {
          "context": {
            "description": "Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value",
            "enum": [
              "higher_is_better",
              "lower_is_better"
            ],
            "example": "higher_is_better",
            "type": "string"
          },
          "currency": {
            "description": "The ISO currency code for metric, where applicable",
            "type": "string"
          },
          "date_range": {
            "description": "Metric date range",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "description": {
            "description": "Description of metric",
            "example": "The number of unique transactions with a timestamp",
            "type": "string"
          },
          "group": {
            "description": "The type of metric",
            "enum": [
              "data_quality",
              "processing_quality",
              "balance",
              "profit_and_loss",
              "debt",
              "risk_flag",
              "forecast",
              "heron",
              "ml_feature"
            ],
            "example": "data_quality",
            "type": "string"
          },
          "label": {
            "description": "Metric label, slugified",
            "example": "unique_transactions",
            "type": "string"
          },
          "status": {
            "description": "either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data",
            "enum": [
              "available",
              "partially_available",
              "not_available"
            ],
            "example": "not_available",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measurement for metric",
            "enum": [
              "n",
              "day",
              "ratio",
              "amount",
              "weekday",
              "array",
              "probability"
            ],
            "example": "n",
            "type": "string"
          },
          "value": {
            "description": "The metric value",
            "example": 42.42
          }
        },
        "type": "object"
      },
      "MetricBenchmarksSchema": {
        "properties": {
          "date_range": {
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "label": {
            "description": "Metric label, slugified",
            "example": "unique_transactions",
            "type": "string"
          },
          "percentile": {
            "description": "The implied percentile based on ranking and sample size",
            "example": 0.75,
            "nullable": true,
            "type": "number"
          },
          "rank": {
            "description": "Ranking of metric relative to datapoints. 1 is best",
            "example": 22,
            "nullable": true,
            "type": "integer"
          },
          "sample_size": {
            "description": "The number of datapoints to compare to",
            "example": 42,
            "type": "integer"
          },
          "scope": {
            "default": "user",
            "description": "What end users are included in metric comparisons",
            "enum": [
              "user",
              "heron"
            ],
            "example": "user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricOutput": {
        "properties": {
          "context": {
            "description": "Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value",
            "enum": [
              "higher_is_better",
              "lower_is_better"
            ],
            "example": "higher_is_better",
            "type": "string"
          },
          "currency": {
            "description": "The ISO currency code for metric, where applicable",
            "type": "string"
          },
          "date_range": {
            "description": "Metric date range",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "description": {
            "description": "Description of metric",
            "example": "The number of unique transactions with a timestamp",
            "type": "string"
          },
          "group": {
            "description": "The type of metric",
            "enum": [
              "data_quality",
              "processing_quality",
              "balance",
              "profit_and_loss",
              "debt",
              "risk_flag",
              "forecast",
              "heron",
              "ml_feature"
            ],
            "example": "data_quality",
            "type": "string"
          },
          "label": {
            "description": "Metric label, slugified",
            "example": "unique_transactions",
            "type": "string"
          },
          "status": {
            "description": "either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data",
            "example": "not_available",
            "type": "string"
          },
          "unit": {
            "description": "The unit of measurement for metric",
            "enum": [
              "n",
              "day",
              "ratio",
              "amount",
              "weekday",
              "array",
              "probability"
            ],
            "example": "n",
            "type": "string"
          },
          "value": {
            "description": "The metric value",
            "example": 42.42
          }
        },
        "required": [
          "context",
          "date_range",
          "description",
          "group",
          "label",
          "status",
          "unit",
          "value"
        ],
        "type": "object"
      },
      "MissingAccountSchema": {
        "properties": {
          "account_name": {
            "description": "An account name extracted from the transaction description",
            "example": "Checking",
            "type": "string"
          },
          "account_number": {
            "description": "An account number extracted from the transaction description",
            "example": "****4321",
            "type": "string"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction3"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Money": {
        "properties": {
          "amount": {
            "description": "The amount of money",
            "example": "1234.56",
            "type": "number"
          },
          "currency": {
            "description": "The currency of the money",
            "example": "USD",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MoneyThumbOutputSchema": {
        "properties": {
          "error": {
            "type": "string"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/MoneyThumbStatement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MoneyThumbStatement": {
        "properties": {
          "accountNumber": {
            "nullable": true,
            "type": "string"
          },
          "accounttitle": {
            "nullable": true,
            "type": "string"
          },
          "bankName": {
            "nullable": true,
            "type": "string"
          },
          "company": {
            "nullable": true,
            "type": "string"
          },
          "currencycode": {
            "nullable": true,
            "type": "string"
          },
          "endBalance": {
            "nullable": true,
            "type": "number"
          },
          "endBalanceCalc": {
            "nullable": true,
            "type": "number"
          },
          "endDate": {
            "nullable": true,
            "type": "string"
          },
          "fraudscore": {
            "nullable": true,
            "type": "integer"
          },
          "isBusiness": {
            "nullable": true,
            "type": "boolean"
          },
          "maxResolution": {
            "nullable": true,
            "type": "integer"
          },
          "minResolution": {
            "nullable": true,
            "type": "integer"
          },
          "numCredits": {
            "type": "integer"
          },
          "numDebits": {
            "type": "integer"
          },
          "numTransactions": {
            "type": "integer"
          },
          "ocr": {
            "nullable": true,
            "type": "boolean"
          },
          "reconciled": {
            "type": "boolean"
          },
          "startBalance": {
            "nullable": true,
            "type": "number"
          },
          "startDate": {
            "nullable": true,
            "type": "string"
          },
          "totCredits": {
            "nullable": true,
            "type": "number"
          },
          "totDebits": {
            "nullable": true,
            "type": "number"
          },
          "tpreasons": {
            "items": {},
            "nullable": true,
            "type": "array"
          },
          "transactions": {
            "items": {},
            "nullable": true,
            "type": "array"
          },
          "webReport": {
            "nullable": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MoneyThumbStatementSummary": {
        "properties": {
          "account_number": {
            "type": "string"
          },
          "account_title": {
            "type": "string"
          },
          "bank_name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "end_balance": {
            "type": "number"
          },
          "fraud_reasons": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fraud_score": {
            "type": "integer"
          },
          "is_business_account": {
            "type": "boolean"
          },
          "is_ocr": {
            "type": "boolean"
          },
          "max_resolution": {
            "type": "integer"
          },
          "min_resolution": {
            "type": "integer"
          },
          "num_credits": {
            "type": "integer"
          },
          "num_debits": {
            "type": "integer"
          },
          "num_transactions": {
            "type": "integer"
          },
          "reconciled": {
            "type": "boolean"
          },
          "start_balance": {
            "type": "number"
          },
          "statement_end_date": {
            "format": "date-time",
            "type": "string"
          },
          "statement_start_date": {
            "format": "date-time",
            "type": "string"
          },
          "total_credits": {
            "type": "number"
          },
          "total_debits": {
            "type": "number"
          },
          "unreconciled_end_balance": {
            "type": "number"
          },
          "web_report": {
            "type": "boolean"
          }
        },
        "required": [
          "end_balance",
          "num_credits",
          "num_debits",
          "num_transactions",
          "reconciled",
          "start_balance",
          "total_credits",
          "total_debits"
        ],
        "type": "object"
      },
      "MoneyThumbTransactionBounds": {
        "properties": {
          "page": {
            "type": "integer"
          },
          "x_max": {
            "type": "integer"
          },
          "x_min": {
            "type": "integer"
          },
          "y_max": {
            "type": "integer"
          },
          "y_min": {
            "type": "integer"
          }
        },
        "required": [
          "page",
          "x_max",
          "x_min",
          "y_max",
          "y_min"
        ],
        "type": "object"
      },
      "NamedDateSchema": {
        "properties": {
          "date": {
            "description": "The date of the NamedDate",
            "example": "2024-05-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "The name of the NamedDate",
            "enum": [
              "end_user_created",
              "end_user_last_updated",
              "last_transaction",
              "end_user_last_enriched",
              "last_data_source_end_date_or_transaction_timestamp"
            ],
            "example": "last_transaction",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NumericCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "equal",
              "not_equal",
              "greater_than",
              "greater_than_or_equal",
              "less_than",
              "less_than_or_equal"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "OcrolusBankAccount": {
        "properties": {
          "account_category": {
            "type": "string"
          },
          "account_number": {
            "type": "string"
          },
          "alternative_lender_transactions": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "daily_balances": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "debt_consolidator_txns": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "deposits_max_by_month": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/OcrolusTransaction"
              },
              "nullable": true,
              "type": "array"
            },
            "type": "object"
          },
          "estimated_expense_txns_list": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "estimated_revenue_txns_list": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "factor_txns": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "holder_country": {
            "type": "string"
          },
          "insurance_credits": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "insurance_debits": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "interbank_transactions": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "merchant_cash_advance_lender_txns": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "non_estimated_revenue_txns_list": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "nsf_transactions": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "nsf_transactions_paid_or_negative_balance": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "nsf_transactions_returned_or_not_paid": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "outside_source_deposits": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "payroll": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "period_balance_mismatches": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "ppp_loan_txns": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "probable_recurring_txns": {
            "items": {
              "items": {
                "$ref": "#/components/schemas/OcrolusTransaction"
              },
              "type": "array"
            },
            "type": "array"
          },
          "returned_items": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "round_number_txns": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "txn_count": {
            "type": "integer"
          },
          "withdrawals": {
            "items": {
              "$ref": "#/components/schemas/OcrolusTransaction"
            },
            "type": "array"
          },
          "withdrawals_max_by_month": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/OcrolusTransaction"
              },
              "nullable": true,
              "type": "array"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "OcrolusResponse": {
        "properties": {
          "bank_accounts": {
            "items": {
              "$ref": "#/components/schemas/OcrolusBankAccount"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "bank_accounts",
          "name"
        ],
        "type": "object"
      },
      "OcrolusSchema": {
        "properties": {
          "response": {
            "$ref": "#/components/schemas/OcrolusResponse"
          }
        },
        "required": [
          "response"
        ],
        "type": "object"
      },
      "OcrolusTransaction": {
        "properties": {
          "amount": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "pk": {
            "type": "integer"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "txn_date": {
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Owner": {
        "properties": {
          "date_of_birth": {
            "example": "1990-01-01",
            "format": "date",
            "type": "string"
          },
          "email_address": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "home_address": {
            "$ref": "#/components/schemas/Address"
          },
          "home_phone": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "mobile_phone": {
            "type": "string"
          },
          "ownership_percentage": {
            "description": "Percentage of ownership",
            "example": 100,
            "type": "number"
          },
          "social_security_number": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pagination": {
        "properties": {
          "next_url": {
            "description": "the URL of the next page",
            "format": "url",
            "nullable": true,
            "type": "string"
          },
          "num_results": {
            "description": "the number of results returned",
            "type": "integer"
          },
          "page": {
            "description": "current page",
            "type": "integer"
          },
          "per_page": {
            "description": "the max number of results per page",
            "type": "integer"
          },
          "prev_url": {
            "description": "the URL of the last page",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PaymentProcessor": {
        "properties": {
          "heron_id": {
            "example": "mrc_nRYdGU7nYuevb7qem65cEb",
            "readOnly": true,
            "type": "string"
          },
          "icon_url": {
            "default": null,
            "example": "https://storage.googleapis.com/heron-merchant-assets/icons/mrc_nRYdGU7nYuevb7qem65cEb.svg",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "logo_url": {
            "default": null,
            "example": "https://storage.googleapis.com/heron-merchant-assets/logos/mrc_nRYdGU7nYuevb7qem65cEb.svg",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "default": null,
            "example": "Paypal",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "default": null,
            "example": "https://www.paypal.com",
            "format": "url",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfGet": {
        "properties": {
          "heron_id": {
            "description": "ID generated by Heron Data",
            "example": "pdf_8Vvp4vmFqpdBv7vzk3AciB",
            "type": "string"
          },
          "status": {
            "description": "Status of PDF",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfGetSchema": {
        "properties": {
          "account_id": {
            "description": "Unique ID for account associated with PDF",
            "example": "checking_account_202348",
            "type": "string"
          },
          "created": {
            "description": "Timestamp when PDF was created in Heron system",
            "example": "2024-05-31T14:08:37.099278",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs",
            "enum": [
              "USD",
              "GBP"
            ],
            "example": "USD",
            "type": "string"
          },
          "end_user": {
            "$ref": "#/components/schemas/EndUser2"
          },
          "filename": {
            "description": "The filename of the PDF",
            "example": "my-favourite.pdf",
            "type": "string"
          },
          "heron_id": {
            "description": "ID generated by Heron Data",
            "example": "pdf_8Vvp4vmFqpdBv7vzk3AciB",
            "type": "string"
          },
          "last_updated": {
            "description": "Timestamp when PDF was last updated in Heron system",
            "example": "2024-05-31T14:08:37.099315",
            "format": "date-time",
            "type": "string"
          },
          "notes": {
            "description": "Notes for the PDF, e.g., failed reason",
            "example": "failed to send to external OCR provider",
            "type": "string"
          },
          "parsing_version": {
            "description": "Indicates which provider was used to parse this pdf",
            "type": "string"
          },
          "reference_id": {
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "type": "string"
          },
          "statements": {
            "items": {
              "$ref": "#/components/schemas/PdfStatement"
            },
            "type": "array"
          },
          "status": {
            "description": "Status of PDF",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfPatchStatementSummary": {
        "properties": {
          "account_number": {
            "type": "string"
          },
          "bank_name": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "currency": {
            "type": "string"
          },
          "end_balance": {
            "type": "number"
          },
          "fraud_reasons": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fraud_score": {
            "type": "integer"
          },
          "start_balance": {
            "type": "number"
          },
          "statement_end_date": {
            "format": "date-time",
            "type": "string"
          },
          "statement_start_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfPatchTransaction": {
        "properties": {
          "amount": {
            "nullable": true,
            "type": "number"
          },
          "balance": {
            "nullable": true,
            "type": "number"
          },
          "bounds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MoneyThumbTransactionBounds"
              }
            ],
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ocr_suspect": {
            "nullable": true,
            "type": "boolean"
          },
          "reference_id": {
            "nullable": true,
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfPostSchema": {
        "properties": {
          "account_id": {
            "default": null,
            "description": "Unique ID for account associated with PDF",
            "example": "checking_account_202348",
            "nullable": true,
            "type": "string"
          },
          "currency": {
            "default": null,
            "description": "ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs",
            "enum": [
              "USD",
              "GBP"
            ],
            "example": "USD",
            "nullable": true,
            "type": "string"
          },
          "filename": {
            "default": null,
            "description": "The filename of the PDF",
            "example": "my-favourite.pdf",
            "nullable": true,
            "type": "string"
          },
          "pdf_base64": {
            "description": "The base64 encoded string of the PDF file. If using Javascript, this is directly the output of the FileReader.readAsDataURL() output. See https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL for more info",
            "pattern": "^data\\:\\w+\\/\\w+\\;base64\\,",
            "type": "string"
          },
          "read_us_dates": {
            "default": null,
            "description": "True if date formats in the statement are US: month/date/year",
            "nullable": true,
            "type": "boolean"
          },
          "reference_id": {
            "default": null,
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "with_fraud": {
            "default": null,
            "description": "True if fraud detection should be enabled for this PDF",
            "nullable": true,
            "type": "boolean"
          }
        },
        "required": [
          "pdf_base64"
        ],
        "type": "object"
      },
      "PdfPutSchema": {
        "properties": {
          "filename": {
            "description": "The filename of the PDF",
            "example": "my-favourite.pdf",
            "type": "string"
          },
          "fraud_reason": {
            "description": "If fraud reason ",
            "nullable": true,
            "type": "string"
          },
          "is_fraud": {
            "description": "True if fraud was detected in the PDF",
            "type": "boolean"
          },
          "notes": {
            "description": "Notes associated with PDF, e.g., rejected reason, failed reason",
            "type": "string"
          },
          "reference_id": {
            "description": "An optional field for your unique identifier for the PDF",
            "example": "my-favourite-pdf",
            "maxLength": 140,
            "type": "string"
          },
          "status": {
            "description": "Status of PDF",
            "enum": [
              "new",
              "parsing",
              "parsed",
              "processed",
              "approved",
              "rejected",
              "failed",
              "transactions_loaded"
            ],
            "example": "processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PdfStatement": {
        "properties": {
          "exclude": {
            "description": "True if the statement should be excluded from processing",
            "type": "boolean"
          },
          "invalid_transaction_partials": {
            "items": {
              "$ref": "#/components/schemas/PdfPatchTransaction"
            },
            "type": "array"
          },
          "summary": {
            "$ref": "#/components/schemas/MoneyThumbStatementSummary"
          },
          "transaction_partials": {
            "items": {
              "$ref": "#/components/schemas/PdfTransaction"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PdfStatementPatchSchema": {
        "properties": {
          "exclude": {
            "description": "True if the statement should be excluded from processing",
            "type": "boolean"
          },
          "index": {
            "description": "The index of the statement in the pdf to patch",
            "type": "integer"
          },
          "summary": {
            "$ref": "#/components/schemas/PdfPatchStatementSummary"
          },
          "transactions": {
            "description": "The full list of transactions that will be used to override the extracted transactions for the specified statement",
            "items": {
              "$ref": "#/components/schemas/PdfPatchTransaction"
            },
            "type": "array"
          }
        },
        "required": [
          "index",
          "transactions"
        ],
        "type": "object"
      },
      "PdfTransaction": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "bounds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MoneyThumbTransactionBounds"
              }
            ],
            "nullable": true
          },
          "currency": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "ocr_suspect": {
            "type": "boolean"
          },
          "reference_id": {
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "transaction_code": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description",
          "timestamp"
        ],
        "type": "object"
      },
      "PlaidAccount": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "balances": {
            "$ref": "#/components/schemas/PlaidAccountSnapshotBalance"
          },
          "historical_balances": {
            "items": {
              "$ref": "#/components/schemas/PlaidAccountBalance"
            },
            "type": "array"
          },
          "mask": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "official_name": {
            "nullable": true,
            "type": "string"
          },
          "owners": {
            "items": {
              "$ref": "#/components/schemas/PlaidAccountOwners"
            },
            "nullable": true,
            "type": "array"
          },
          "subtype": {
            "nullable": true,
            "type": "string"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/PlaidTransaction"
            },
            "type": "array"
          },
          "type": {
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "balances",
          "historical_balances",
          "transactions"
        ],
        "type": "object"
      },
      "PlaidAccountBalance": {
        "properties": {
          "current": {
            "type": "number"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "iso_currency_code": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaidAccountOwners": {
        "properties": {
          "names": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "names"
        ],
        "type": "object"
      },
      "PlaidAccountSnapshot": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "balances": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaidAccountSnapshotBalance"
              }
            ],
            "description": "Balance information for the account as an object. This is optional, but if not provided, balance calculations will not be performed for individual transactions.",
            "nullable": true
          },
          "mask": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "official_name": {
            "nullable": true,
            "type": "string"
          },
          "subtype": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaidAccountSnapshotBalance": {
        "properties": {
          "available": {
            "nullable": true,
            "type": "number"
          },
          "current": {
            "nullable": true,
            "type": "number"
          },
          "iso_currency_code": {
            "type": "string"
          },
          "limit": {
            "nullable": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "PlaidAssetReport": {
        "properties": {
          "date_generated": {
            "format": "date-time",
            "type": "string"
          },
          "days_requested": {
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/PlaidAssetReportItem"
            },
            "type": "array"
          }
        },
        "required": [
          "date_generated",
          "days_requested",
          "items"
        ],
        "type": "object"
      },
      "PlaidAssetReportItem": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/PlaidAccount"
            },
            "type": "array"
          },
          "institution_name": {
            "type": "string"
          }
        },
        "required": [
          "accounts",
          "institution_name"
        ],
        "type": "object"
      },
      "PlaidAssetsSchema": {
        "properties": {
          "report": {
            "$ref": "#/components/schemas/PlaidAssetReport"
          }
        },
        "required": [
          "report"
        ],
        "type": "object"
      },
      "PlaidTransaction": {
        "properties": {
          "account_id": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "balance": {
            "type": "number"
          },
          "category": {
            "nullable": true,
            "type": "string"
          },
          "date": {
            "format": "date",
            "type": "string"
          },
          "iso_currency_code": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "merchant_name": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "pending_transaction_id": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string"
          },
          "transaction_code": {
            "nullable": true,
            "type": "string"
          },
          "transaction_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlaidTransactionsSchema": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/PlaidAccountSnapshot"
            },
            "type": "array"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/PlaidTransaction"
            },
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "PnlMetric": {
        "properties": {
          "confidence": {
            "description": "Amount weighted confidence for the metric, based on the confidene associated with category labels of related transactions",
            "nullable": true,
            "type": "number"
          },
          "indent": {
            "description": "Indentation level for formatting purposes",
            "type": "integer"
          },
          "is_ratio": {
            "description": "Whether the metric is a ratio or not",
            "type": "boolean"
          },
          "name": {
            "description": "Name of metric",
            "type": "string"
          },
          "values": {
            "description": "The list of values ordered according to date",
            "items": {
              "nullable": true,
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PnlMetricFractionTerm": {
        "properties": {
          "labels": {
            "description": "List of category labels associated with the fraction term",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sections": {
            "description": "List of section slugs associated with the fraction term",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PnlMetricLayout": {
        "properties": {
          "denominator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PnlMetricFractionTerm"
              }
            ],
            "description": "If the metric is a ratio, the denominator of the metric; otherwise this is just 1",
            "nullable": true
          },
          "indent": {
            "description": "Indentation level for formatting purposes",
            "type": "integer"
          },
          "is_growth": {
            "description": "If true, calculates the % growth in the metric over time",
            "type": "boolean"
          },
          "name": {
            "description": "Name of metric",
            "type": "string"
          },
          "numerator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PnlMetricFractionTerm"
              }
            ],
            "description": "The numerator of the metric"
          }
        },
        "type": "object"
      },
      "PnlSection": {
        "properties": {
          "metrics": {
            "description": "Ordered list of P&L metrics",
            "items": {
              "$ref": "#/components/schemas/PnlMetric"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of P&L section, e.g,. Operating Expenses",
            "type": "string"
          },
          "slug": {
            "description": "Slugified version of the name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PnlSectionLayout": {
        "properties": {
          "labels": {
            "description": "The category labels associated with the section",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metrics": {
            "description": "An ordered list of metric layouts",
            "items": {
              "$ref": "#/components/schemas/PnlMetricLayout"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of P&L section, e.g,. Operating Expenses",
            "type": "string"
          },
          "slug": {
            "description": "Slugified version of the name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Policy": {
        "properties": {
          "checks": {
            "items": {
              "$ref": "#/components/schemas/Check"
            },
            "type": "array"
          },
          "heron_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "heron_id",
          "name"
        ],
        "type": "object"
      },
      "PolicyEvaluationSchema": {
        "properties": {
          "failed_checks": {
            "items": {
              "$ref": "#/components/schemas/CheckEvaluation"
            },
            "type": "array"
          },
          "missing_data_checks": {
            "items": {
              "$ref": "#/components/schemas/CheckEvaluation"
            },
            "type": "array"
          },
          "passed_checks": {
            "items": {
              "$ref": "#/components/schemas/CheckEvaluation"
            },
            "type": "array"
          },
          "policy": {
            "$ref": "#/components/schemas/Policy"
          },
          "result": {
            "enum": [
              "passed",
              "failed",
              "missing_data"
            ]
          }
        },
        "type": "object"
      },
      "PostIsoApplicationBase64Schema": {
        "properties": {
          "file_base64": {
            "description": "The base64 encoded string of the file",
            "example": "base64_encoded_string",
            "pattern": "^data\\:\\w+\\/\\w+\\;base64\\,",
            "type": "string"
          },
          "filename": {
            "description": "The original filename of the ISO application form",
            "example": "iso_app.pdf",
            "type": "string"
          },
          "reference_id": {
            "default": null,
            "description": "A reference id for the file",
            "example": "your-file-id",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "file_base64",
          "filename"
        ],
        "type": "object"
      },
      "ProfitAndLossLayoutSchema": {
        "properties": {
          "sections": {
            "description": "Ordered list of P&L sections",
            "items": {
              "$ref": "#/components/schemas/PnlSectionLayout"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProfitAndLossLayoutUpdateSchema": {
        "properties": {
          "category_labels": {
            "description": "List of category labels to assign to a different section",
            "example": [
              "Postage"
            ],
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "type": "array"
          },
          "section_slug": {
            "description": "Slug of section to assign labels to",
            "example": "operational_expenses",
            "type": "string"
          }
        },
        "required": [
          "category_labels",
          "section_slug"
        ],
        "type": "object"
      },
      "ProfitAndLossParams": {
        "properties": {
          "currency": {
            "description": "ISO 4217 currency code for balance",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "dates_ascending": {
            "default": false,
            "description": "If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first",
            "type": "boolean"
          },
          "from_date": {
            "default": null,
            "description": "The earliest transaction timestamp date to use",
            "example": "2022-01-01",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "to_date": {
            "default": null,
            "description": "The latest transaction timestamp date to use",
            "example": "2022-01-31",
            "format": "date",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfitAndLossSchema": {
        "properties": {
          "dates": {
            "description": "Ordered list of dates representing the columns of the P&L table",
            "items": {
              "format": "date",
              "type": "string"
            },
            "type": "array"
          },
          "sections": {
            "description": "Ordered list of P&L sections",
            "items": {
              "$ref": "#/components/schemas/PnlSection"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Rule": {
        "properties": {
          "condition": {
            "description": "Key for how to compare metric value to rule value",
            "enum": [
              "equal",
              "not_equal",
              "greater_than",
              "greater_than_or_equal",
              "less_than",
              "less_than_or_equal",
              "contains"
            ],
            "example": "equal",
            "type": "string"
          },
          "created": {
            "description": "When the rule was created in Heron system",
            "example": "2024-04-19T14:08:37.175835",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_range": {
            "description": "Date range corresponding to metric",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "group": {
            "description": "Used to display rules by the stage in the underwriting workflow to which they apply.",
            "enum": [
              "data_quality_datasource",
              "data_quality_account",
              "data_quality_transaction"
            ],
            "example": "data_quality_datasource",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for rule generated by Heron",
            "example": "rul_kCNkpFBA9WHVgbri9bENKd",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the rule was last updated in Heron system",
            "example": "2024-05-31T14:08:37.175875",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metric_label": {
            "description": "Label corresponding to metric",
            "enum": [
              "data_volume",
              "date_range",
              "date_range_with_data_sources",
              "data_freshness",
              "has_balance_ratio",
              "data_coverage",
              "accounts",
              "potentially_duplicated_account_pairs",
              "category_coverage",
              "inflows",
              "outflows",
              "deposit_days",
              "net_amount",
              "inflow_amount",
              "inflow_growth_rate",
              "merchant_coverage",
              "confidence",
              "revenue_anomalies",
              "last_debt_investment",
              "last_debt_investment_days",
              "merchant_heron_ids",
              "distinct_mcas",
              "latest_largest_mca_funding_amount",
              "min_revenue_count_per_statement_ignoring_savings_accounts",
              "max_negative_balance_days_per_statement",
              "min_total_revenue_per_statement",
              "min_average_daily_balance_per_statement",
              "revenue_daily_average",
              "cogs_daily_average",
              "opex_daily_average",
              "debt_repayment_daily_average",
              "debt_investment",
              "debt_investors",
              "nsf_fees",
              "nsf_days",
              "distinct_mcas_from_outflows",
              "distinct_mcas_from_inflows",
              "inflow_daily_average",
              "unconnected_account_ratio",
              "outflow_daily_average",
              "revenue_sources",
              "debt_investment_count",
              "debt_collection",
              "atm_withdrawals",
              "tax_payments",
              "tax_payment_amount",
              "revenue",
              "annualized_revenue",
              "cogs",
              "average_credit_card_spend",
              "opex",
              "revenue_profit_and_loss",
              "annualized_revenue_profit_and_loss",
              "cogs_profit_and_loss",
              "opex_profit_and_loss",
              "revenue_monthly_average",
              "debt_repayment",
              "revenue_growth_rate",
              "category_debt_repayment_count",
              "category_other_expenses_count",
              "category_revenue_count",
              "category_postage_count",
              "category_debt_investment_count",
              "category_atm_cash_outflows_count",
              "category_rent_count",
              "insurance_in_out_ratio",
              "rent_in_out_ratio",
              "taxes_in_out_ratio",
              "travel_in_out_ratio",
              "company_investments_in_out_ratio",
              "atm_cash_outflows_in_out_ratio",
              "overdraft_nsf_fees_in_out_ratio",
              "reconciled_intra_company_transfers_to_insurance_ratio",
              "insurance_to_general_payment_ratio",
              "insurance_to_advertising_ratio",
              "insurance_to_credit_card_ratio",
              "insurance_to_check_deposits_ratio",
              "insurance_to_atm_cash_inflows_ratio",
              "insurance_to_debt_repayment_ratio",
              "insurance_to_charges_fees_ratio",
              "insurance_to_travel_ratio",
              "insurance_to_inventory_ratio",
              "insurance_to_none_ratio",
              "equity_investment_to_advertising_ratio",
              "equity_investment_to_debt_repayment_ratio",
              "equity_investment_to_charges_fees_ratio",
              "equity_investment_to_unreconciled_intra_company_transfers_ratio",
              "equity_investment_to_travel_ratio",
              "equity_investment_to_company_investments_ratio",
              "general_payment_to_credit_card_ratio",
              "general_payment_to_p2p_transfers_ratio",
              "general_payment_to_company_investments_ratio",
              "general_payment_to_none_ratio",
              "debt_investment_to_overdraft_nsf_fees_ratio",
              "debt_investment_to_other_expenses_ratio",
              "debt_investment_to_none_ratio",
              "advertising_to_p2p_transfers_ratio",
              "advertising_to_other_expenses_ratio",
              "credit_card_to_check_deposits_ratio",
              "credit_card_to_charges_fees_ratio",
              "credit_card_to_travel_ratio",
              "credit_card_to_inventory_ratio",
              "credit_card_to_revenue_ratio",
              "credit_card_to_payroll_and_consultants_ratio",
              "credit_card_to_none_ratio",
              "rent_to_check_deposits_ratio",
              "rent_to_postage_ratio",
              "rent_to_special_outflows_ratio",
              "rent_to_travel_ratio",
              "rent_to_p2p_transfers_ratio",
              "rent_to_payroll_and_consultants_ratio",
              "check_deposits_to_debt_repayment_ratio",
              "check_deposits_to_postage_ratio",
              "check_deposits_to_unreconciled_intra_company_transfers_ratio",
              "check_deposits_to_revenue_ratio",
              "special_inflows_to_charges_fees_ratio",
              "special_inflows_to_utilities_ratio",
              "special_inflows_to_unreconciled_intra_company_transfers_ratio",
              "special_inflows_to_travel_ratio",
              "special_inflows_to_revenue_ratio",
              "special_inflows_to_atm_cash_outflows_ratio",
              "special_inflows_to_payroll_and_consultants_ratio",
              "refunds_to_atm_cash_inflows_ratio",
              "refunds_to_charges_fees_ratio",
              "refunds_to_utilities_ratio",
              "refunds_to_unreconciled_intra_company_transfers_ratio",
              "refunds_to_travel_ratio",
              "refunds_to_overdraft_nsf_fees_ratio",
              "refunds_to_atm_cash_outflows_ratio",
              "atm_cash_inflows_to_charges_fees_ratio",
              "atm_cash_inflows_to_utilities_ratio",
              "atm_cash_inflows_to_unreconciled_intra_company_transfers_ratio",
              "atm_cash_inflows_to_atm_cash_outflows_ratio",
              "atm_cash_inflows_to_other_expenses_ratio",
              "debt_repayment_to_taxes_ratio",
              "debt_repayment_to_postage_ratio",
              "debt_repayment_to_special_outflows_ratio",
              "debt_repayment_to_atm_cash_outflows_ratio",
              "debt_repayment_to_payroll_and_consultants_ratio",
              "check_outflows_to_charges_fees_ratio",
              "check_outflows_to_utilities_ratio",
              "check_outflows_to_travel_ratio",
              "check_outflows_to_p2p_transfers_ratio",
              "check_outflows_to_revenue_ratio",
              "check_outflows_to_other_expenses_ratio",
              "check_outflows_to_payroll_and_consultants_ratio",
              "taxes_to_travel_ratio",
              "taxes_to_p2p_transfers_ratio",
              "taxes_to_revenue_ratio",
              "taxes_to_atm_cash_outflows_ratio",
              "taxes_to_other_expenses_ratio",
              "taxes_to_payroll_and_consultants_ratio",
              "charges_fees_to_postage_ratio",
              "charges_fees_to_overdraft_nsf_fees_ratio",
              "charges_fees_to_revenue_ratio",
              "charges_fees_to_company_investments_ratio",
              "charges_fees_to_other_expenses_ratio",
              "charges_fees_to_none_ratio",
              "utilities_to_postage_ratio",
              "utilities_to_special_outflows_ratio",
              "utilities_to_travel_ratio",
              "utilities_to_overdraft_nsf_fees_ratio",
              "utilities_to_other_expenses_ratio",
              "postage_to_unreconciled_intra_company_transfers_ratio",
              "postage_to_p2p_transfers_ratio",
              "postage_to_none_ratio",
              "unreconciled_intra_company_transfers_to_travel_ratio",
              "unreconciled_intra_company_transfers_to_p2p_transfers_ratio",
              "unreconciled_intra_company_transfers_to_atm_cash_outflows_ratio",
              "unreconciled_intra_company_transfers_to_other_expenses_ratio",
              "special_outflows_to_p2p_transfers_ratio",
              "special_outflows_to_atm_cash_outflows_ratio",
              "travel_to_p2p_transfers_ratio",
              "travel_to_inventory_ratio",
              "travel_to_other_expenses_ratio",
              "travel_to_payroll_and_consultants_ratio",
              "travel_to_none_ratio",
              "p2p_transfers_to_overdraft_nsf_fees_ratio",
              "p2p_transfers_to_atm_cash_outflows_ratio",
              "inventory_to_overdraft_nsf_fees_ratio",
              "inventory_to_company_investments_ratio",
              "inventory_to_atm_cash_outflows_ratio",
              "inventory_to_other_expenses_ratio",
              "overdraft_nsf_fees_to_other_expenses_ratio",
              "revenue_to_payroll_and_consultants_ratio",
              "latest_balance",
              "balance_minimum",
              "balance_average",
              "change_in_balance",
              "negative_balance_days",
              "negative_balance_days_by_account",
              "mean_balance_velocity",
              "mean_abs_balance_velocity",
              "weekday_balance_average",
              "weekday_with_highest_avg",
              "weekday_with_lowest_avg",
              "gross_operating_cashflow_daily_average",
              "net_operating_cashflow_daily_average",
              "gross_operating_cashflow",
              "net_operating_cashflow",
              "gross_operating_cashflow_profit_and_loss",
              "net_operating_cashflow_profit_and_loss",
              "debt_service_coverage_ratio",
              "predicted_nsf_fees",
              "predicted_balance_daily_average",
              "heron_score"
            ],
            "example": "unique_transactions",
            "type": "string"
          },
          "name": {
            "description": "Description of rule. Sent with webhook response, so can be used as a reference to the rule",
            "example": "notify_if_debt_investment_count_gt_0_last_180d",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "selector": {
            "description": "key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users.",
            "example": {
              "is_portfolio": true
            },
            "type": "object"
          },
          "value": {
            "description": "Numeric value to compare to a metric; use this when the threshold is numeric",
            "example": 42.42,
            "nullable": true,
            "type": "number"
          },
          "value_str": {
            "description": "String value to compare to a metric; use this when the threshold is a string",
            "example": "mrc_12345678ijwdd321d921",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleEvaluationSchema": {
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/Metric"
          },
          "result": {
            "enum": [
              "PASS",
              "FAIL",
              "NOT_AVAILABLE"
            ],
            "type": "string"
          },
          "rule": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "type": "object"
      },
      "RuleUpdateSchema": {
        "properties": {
          "condition": {
            "description": "Key for how to compare metric value to rule value",
            "enum": [
              "equal",
              "not_equal",
              "greater_than",
              "greater_than_or_equal",
              "less_than",
              "less_than_or_equal",
              "contains"
            ],
            "example": "equal",
            "type": "string"
          },
          "created": {
            "description": "When the rule was created in Heron system",
            "example": "2024-04-19T14:08:37.175835",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "date_range": {
            "description": "Date range corresponding to metric",
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "example": "last_180_days",
            "type": "string"
          },
          "group": {
            "description": "Used to display rules by the stage in the underwriting workflow to which they apply.",
            "enum": [
              "data_quality_datasource",
              "data_quality_account",
              "data_quality_transaction"
            ],
            "example": "data_quality_datasource",
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique id for rule generated by Heron",
            "example": "rul_kCNkpFBA9WHVgbri9bENKd",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the rule was last updated in Heron system",
            "example": "2024-05-31T14:08:37.175875",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "metric_label": {
            "description": "Label corresponding to metric",
            "enum": [
              "data_volume",
              "date_range",
              "date_range_with_data_sources",
              "data_freshness",
              "has_balance_ratio",
              "data_coverage",
              "accounts",
              "potentially_duplicated_account_pairs",
              "category_coverage",
              "inflows",
              "outflows",
              "deposit_days",
              "net_amount",
              "inflow_amount",
              "inflow_growth_rate",
              "merchant_coverage",
              "confidence",
              "revenue_anomalies",
              "last_debt_investment",
              "last_debt_investment_days",
              "merchant_heron_ids",
              "distinct_mcas",
              "latest_largest_mca_funding_amount",
              "min_revenue_count_per_statement_ignoring_savings_accounts",
              "max_negative_balance_days_per_statement",
              "min_total_revenue_per_statement",
              "min_average_daily_balance_per_statement",
              "revenue_daily_average",
              "cogs_daily_average",
              "opex_daily_average",
              "debt_repayment_daily_average",
              "debt_investment",
              "debt_investors",
              "nsf_fees",
              "nsf_days",
              "distinct_mcas_from_outflows",
              "distinct_mcas_from_inflows",
              "inflow_daily_average",
              "unconnected_account_ratio",
              "outflow_daily_average",
              "revenue_sources",
              "debt_investment_count",
              "debt_collection",
              "atm_withdrawals",
              "tax_payments",
              "tax_payment_amount",
              "revenue",
              "annualized_revenue",
              "cogs",
              "average_credit_card_spend",
              "opex",
              "revenue_profit_and_loss",
              "annualized_revenue_profit_and_loss",
              "cogs_profit_and_loss",
              "opex_profit_and_loss",
              "revenue_monthly_average",
              "debt_repayment",
              "revenue_growth_rate",
              "category_debt_repayment_count",
              "category_other_expenses_count",
              "category_revenue_count",
              "category_postage_count",
              "category_debt_investment_count",
              "category_atm_cash_outflows_count",
              "category_rent_count",
              "insurance_in_out_ratio",
              "rent_in_out_ratio",
              "taxes_in_out_ratio",
              "travel_in_out_ratio",
              "company_investments_in_out_ratio",
              "atm_cash_outflows_in_out_ratio",
              "overdraft_nsf_fees_in_out_ratio",
              "reconciled_intra_company_transfers_to_insurance_ratio",
              "insurance_to_general_payment_ratio",
              "insurance_to_advertising_ratio",
              "insurance_to_credit_card_ratio",
              "insurance_to_check_deposits_ratio",
              "insurance_to_atm_cash_inflows_ratio",
              "insurance_to_debt_repayment_ratio",
              "insurance_to_charges_fees_ratio",
              "insurance_to_travel_ratio",
              "insurance_to_inventory_ratio",
              "insurance_to_none_ratio",
              "equity_investment_to_advertising_ratio",
              "equity_investment_to_debt_repayment_ratio",
              "equity_investment_to_charges_fees_ratio",
              "equity_investment_to_unreconciled_intra_company_transfers_ratio",
              "equity_investment_to_travel_ratio",
              "equity_investment_to_company_investments_ratio",
              "general_payment_to_credit_card_ratio",
              "general_payment_to_p2p_transfers_ratio",
              "general_payment_to_company_investments_ratio",
              "general_payment_to_none_ratio",
              "debt_investment_to_overdraft_nsf_fees_ratio",
              "debt_investment_to_other_expenses_ratio",
              "debt_investment_to_none_ratio",
              "advertising_to_p2p_transfers_ratio",
              "advertising_to_other_expenses_ratio",
              "credit_card_to_check_deposits_ratio",
              "credit_card_to_charges_fees_ratio",
              "credit_card_to_travel_ratio",
              "credit_card_to_inventory_ratio",
              "credit_card_to_revenue_ratio",
              "credit_card_to_payroll_and_consultants_ratio",
              "credit_card_to_none_ratio",
              "rent_to_check_deposits_ratio",
              "rent_to_postage_ratio",
              "rent_to_special_outflows_ratio",
              "rent_to_travel_ratio",
              "rent_to_p2p_transfers_ratio",
              "rent_to_payroll_and_consultants_ratio",
              "check_deposits_to_debt_repayment_ratio",
              "check_deposits_to_postage_ratio",
              "check_deposits_to_unreconciled_intra_company_transfers_ratio",
              "check_deposits_to_revenue_ratio",
              "special_inflows_to_charges_fees_ratio",
              "special_inflows_to_utilities_ratio",
              "special_inflows_to_unreconciled_intra_company_transfers_ratio",
              "special_inflows_to_travel_ratio",
              "special_inflows_to_revenue_ratio",
              "special_inflows_to_atm_cash_outflows_ratio",
              "special_inflows_to_payroll_and_consultants_ratio",
              "refunds_to_atm_cash_inflows_ratio",
              "refunds_to_charges_fees_ratio",
              "refunds_to_utilities_ratio",
              "refunds_to_unreconciled_intra_company_transfers_ratio",
              "refunds_to_travel_ratio",
              "refunds_to_overdraft_nsf_fees_ratio",
              "refunds_to_atm_cash_outflows_ratio",
              "atm_cash_inflows_to_charges_fees_ratio",
              "atm_cash_inflows_to_utilities_ratio",
              "atm_cash_inflows_to_unreconciled_intra_company_transfers_ratio",
              "atm_cash_inflows_to_atm_cash_outflows_ratio",
              "atm_cash_inflows_to_other_expenses_ratio",
              "debt_repayment_to_taxes_ratio",
              "debt_repayment_to_postage_ratio",
              "debt_repayment_to_special_outflows_ratio",
              "debt_repayment_to_atm_cash_outflows_ratio",
              "debt_repayment_to_payroll_and_consultants_ratio",
              "check_outflows_to_charges_fees_ratio",
              "check_outflows_to_utilities_ratio",
              "check_outflows_to_travel_ratio",
              "check_outflows_to_p2p_transfers_ratio",
              "check_outflows_to_revenue_ratio",
              "check_outflows_to_other_expenses_ratio",
              "check_outflows_to_payroll_and_consultants_ratio",
              "taxes_to_travel_ratio",
              "taxes_to_p2p_transfers_ratio",
              "taxes_to_revenue_ratio",
              "taxes_to_atm_cash_outflows_ratio",
              "taxes_to_other_expenses_ratio",
              "taxes_to_payroll_and_consultants_ratio",
              "charges_fees_to_postage_ratio",
              "charges_fees_to_overdraft_nsf_fees_ratio",
              "charges_fees_to_revenue_ratio",
              "charges_fees_to_company_investments_ratio",
              "charges_fees_to_other_expenses_ratio",
              "charges_fees_to_none_ratio",
              "utilities_to_postage_ratio",
              "utilities_to_special_outflows_ratio",
              "utilities_to_travel_ratio",
              "utilities_to_overdraft_nsf_fees_ratio",
              "utilities_to_other_expenses_ratio",
              "postage_to_unreconciled_intra_company_transfers_ratio",
              "postage_to_p2p_transfers_ratio",
              "postage_to_none_ratio",
              "unreconciled_intra_company_transfers_to_travel_ratio",
              "unreconciled_intra_company_transfers_to_p2p_transfers_ratio",
              "unreconciled_intra_company_transfers_to_atm_cash_outflows_ratio",
              "unreconciled_intra_company_transfers_to_other_expenses_ratio",
              "special_outflows_to_p2p_transfers_ratio",
              "special_outflows_to_atm_cash_outflows_ratio",
              "travel_to_p2p_transfers_ratio",
              "travel_to_inventory_ratio",
              "travel_to_other_expenses_ratio",
              "travel_to_payroll_and_consultants_ratio",
              "travel_to_none_ratio",
              "p2p_transfers_to_overdraft_nsf_fees_ratio",
              "p2p_transfers_to_atm_cash_outflows_ratio",
              "inventory_to_overdraft_nsf_fees_ratio",
              "inventory_to_company_investments_ratio",
              "inventory_to_atm_cash_outflows_ratio",
              "inventory_to_other_expenses_ratio",
              "overdraft_nsf_fees_to_other_expenses_ratio",
              "revenue_to_payroll_and_consultants_ratio",
              "latest_balance",
              "balance_minimum",
              "balance_average",
              "change_in_balance",
              "negative_balance_days",
              "negative_balance_days_by_account",
              "mean_balance_velocity",
              "mean_abs_balance_velocity",
              "weekday_balance_average",
              "weekday_with_highest_avg",
              "weekday_with_lowest_avg",
              "gross_operating_cashflow_daily_average",
              "net_operating_cashflow_daily_average",
              "gross_operating_cashflow",
              "net_operating_cashflow",
              "gross_operating_cashflow_profit_and_loss",
              "net_operating_cashflow_profit_and_loss",
              "debt_service_coverage_ratio",
              "predicted_nsf_fees",
              "predicted_balance_daily_average",
              "heron_score"
            ],
            "example": "unique_transactions",
            "type": "string"
          },
          "name": {
            "description": "Description of rule. Sent with webhook response, so can be used as a reference to the rule",
            "example": "notify_if_debt_investment_count_gt_0_last_180d",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "selector": {
            "description": "key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users.",
            "example": {
              "is_portfolio": true
            },
            "type": "object"
          },
          "value": {
            "description": "Numeric value to compare to a metric; use this when the threshold is numeric",
            "example": 42.42,
            "nullable": true,
            "type": "number"
          },
          "value_str": {
            "description": "String value to compare to a metric; use this when the threshold is a string",
            "example": "mrc_12345678ijwdd321d921",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuleViolation": {
        "properties": {
          "metric": {
            "$ref": "#/components/schemas/Metric"
          },
          "rule": {
            "$ref": "#/components/schemas/Rule"
          }
        },
        "type": "object"
      },
      "SaltEdgeCsvSchema": {
        "properties": {
          "account_id": {
            "type": "integer"
          },
          "amount": {
            "type": "number"
          },
          "category": {
            "type": "string"
          },
          "closing_balance": {
            "nullable": true,
            "type": "number"
          },
          "currency_code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "made_on": {
            "format": "date",
            "type": "string"
          },
          "payee": {
            "nullable": true,
            "type": "string"
          },
          "payer": {
            "nullable": true,
            "type": "string"
          },
          "transaction_id": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ScorecardQueryParams": {
        "properties": {
          "date": {
            "default": null,
            "description": "Cut-off date to consider transactions to for calculating scorecard (inclusive)",
            "example": "2023-01-19",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "named_date": {
            "default": null,
            "description": "Qualitative description for date to calculate scorecard",
            "enum": [
              "end_user_created",
              "end_user_last_updated",
              "last_transaction",
              "end_user_last_enriched",
              "last_data_source_end_date_or_transaction_timestamp"
            ],
            "example": "end_user_created",
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StringCheck": {
        "properties": {
          "auto_decline": {
            "default": false,
            "type": "boolean"
          },
          "decline_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "email_template_name": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "ignore_metric_availability": {
            "default": false,
            "type": "boolean"
          },
          "pass_description": {
            "default": null,
            "nullable": true,
            "type": "string"
          },
          "type": {
            "enum": [
              "equal",
              "not_equal",
              "contains",
              "does_not_start_with",
              "does_not_contain",
              "is_in",
              "is_not_in"
            ]
          },
          "value": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transaction": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "Transaction1": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "Transaction2": {
        "properties": {
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transaction3": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "TransactionAnnotation": {
        "properties": {
          "annotator": {
            "description": "Annotator type",
            "example": "predicted",
            "type": "string"
          },
          "confidence": {
            "description": "The confidence associated with the category annotation",
            "example": 0.5,
            "type": "number"
          },
          "heron_id": {
            "description": "Unique ID of category; generated by Heron Data",
            "example": "ctg_UmZv5wd5BojRzsCoBwMSYN",
            "type": "string"
          },
          "label": {
            "description": "Label of category",
            "example": "Rent",
            "type": "string"
          },
          "model_version": {
            "description": "The model version that produced the categorisation",
            "example": "57f0d608-2ec3-41b1-bf5d-5475d96d9a7c",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionDeleteReference": {
        "properties": {
          "transactions": {
            "description": "list of transactions (only ids) that have been deleted",
            "items": {
              "$ref": "#/components/schemas/Transaction2"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionDeleteWebhook": {
        "properties": {
          "created": {
            "description": "time webhook was sent",
            "example": "2024-05-31T14:08:36.306899",
            "format": "date-time",
            "type": "string"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDeleteReference"
              }
            ],
            "description": "payload of the webhook"
          },
          "meta": {
            "description": "meta information about the webhook",
            "type": "object"
          },
          "topic": {
            "description": "topic of webhook",
            "example": "end_user.processed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionEnriched": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "annotation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Annotation"
              }
            ],
            "description": "The category annotation associated with the transaction"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "features": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionFeatures"
              }
            ],
            "description": "Features calculated from transaction"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "last_updated": {
            "description": "When the transaction was last updated, either by updating its enrichments or the values of the transaction itself",
            "example": "2024-05-31T14:08:36.299479",
            "format": "date-time",
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Merchant"
              }
            ],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "TransactionFeatures": {
        "properties": {
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_Qfnamjdtp5kfNGpbExEQYh"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TransactionFeedbackParams": {
        "properties": {
          "trigger_webhook": {
            "default": true,
            "description": "If true, enables the triggering of transaction_updated webhook. Set to false to suppress trigger. Default true",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TransactionFeedbackSchema": {
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CategoryFeedback"
              }
            ],
            "default": {},
            "example": {
              "heron_id": "ctg_fyEmcT9kg4HkhWsZdkgdpo",
              "label": "Insurance"
            }
          },
          "merchant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MerchantFeedback"
              }
            ],
            "default": {},
            "example": {
              "heron_id": "mrc_RAynjeJEwU6D2aPcvrXfrS",
              "is_correct": false,
              "name": "Spotify"
            }
          },
          "source": {
            "default": null,
            "description": "your identifier for where the feedback comes from e.g. bob_the_underwriter",
            "maxLength": 120,
            "nullable": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionGetOutput": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "account_number": {
            "description": "The account number associated with the transaction",
            "example": "1234567890",
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories": {
            "description": "The category associated with the transaction",
            "items": {
              "$ref": "#/components/schemas/TransactionAnnotation"
            },
            "type": "array"
          },
          "created": {
            "description": "When transaction was created in Heron system",
            "example": "2024-05-31T14:08:36.301845",
            "format": "date-time",
            "type": "string"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "data_source_account_heron_id": {
            "description": "Unique ID of the transaction's data source account",
            "example": "dsa_UQFgFNBKgtBbtVzWF2ERW2",
            "readOnly": true,
            "type": "string"
          },
          "data_source_heron_id": {
            "description": "Unique ID of the transaction's data source",
            "example": "dso_KNLpxxz3Hm6yX3izTWLHnp",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_Qfnamjdtp5kfNGpbExEQYh"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "last_updated": {
            "description": "When transaction was last updated in Heron system; could be from recategorisation or attribute updates",
            "example": "2024-05-31T14:08:36.301877",
            "format": "date-time",
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Merchant"
              }
            ],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "payment_processor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessor"
              }
            ],
            "description": "The payment processor associated with the transaction"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "TransactionPostAsync": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories_default": {
            "description": "Category of transaction that you may have received from other sources",
            "example": "shopping",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "type": "string"
          },
          "date": {
            "description": "The date of the transaction; 'timestamp' field takes priority over 'date'",
            "example": "2020-04-27",
            "format": "date",
            "nullable": true,
            "type": "string",
            "writeOnly": true
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "type": "string"
          },
          "heron_id": {
            "description": "Unique ID of transaction; generated by Heron Data",
            "example": "txn_kbUf2BUce7JbyE7XHYCP8N",
            "readOnly": true,
            "type": "string"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "account_id",
          "amount",
          "currency",
          "description",
          "end_user_id",
          "reference_id"
        ],
        "type": "object"
      },
      "TransactionPostOutput": {
        "properties": {
          "account_id": {
            "description": "Your unique ID for account associated with transaction",
            "example": "checking_account_202348",
            "maxLength": 400,
            "nullable": true,
            "type": "string"
          },
          "amount": {
            "description": "Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.",
            "example": -42.42,
            "type": "number"
          },
          "balance": {
            "description": "The running balance of the account after transaction ocurred",
            "example": 423,
            "nullable": true,
            "type": "number"
          },
          "categories": {
            "description": "The category associated with the transaction",
            "items": {
              "$ref": "#/components/schemas/TransactionAnnotation"
            },
            "type": "array"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "example": "USD",
            "maxLength": 3,
            "minLength": 3,
            "nullable": true,
            "type": "string"
          },
          "description": {
            "description": "The text description for the transaction",
            "example": "GOOGLE *ADS12340929 cc@google.com US",
            "type": "string"
          },
          "description_clean": {
            "description": "The cleaned description of the transaction",
            "example": "GOOGLE ADS",
            "type": "string"
          },
          "duplicate_of_id": {
            "description": "Indicates that the transaction is a duplicate and gives the heron_id of the original",
            "example": "txn_Qfnamjdtp5kfNGpbExEQYh"
          },
          "end_user_id": {
            "description": "Your unique ID for end user associated with transaction",
            "example": "my_best_customer_203948",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "has_matching_transaction": {
            "description": "Whether the transaction is a transfer; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "is_potential_duplicate": {
            "description": "Indicates whether the transaction has another transaction similar to it",
            "readOnly": true,
            "type": "boolean"
          },
          "is_recurring": {
            "description": "Whether the transaction is recurring or not; requires end_user_id and timestamp to be present",
            "type": "boolean"
          },
          "mcc_code": {
            "description": "Merchant category code associated with transaction that you may have received from other sources",
            "nullable": true,
            "pattern": "^\\d{4}$",
            "type": "string",
            "writeOnly": true
          },
          "merchant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Merchant"
              }
            ],
            "description": "The merchant associated with the transaction"
          },
          "order": {
            "description": "If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction",
            "nullable": true,
            "type": "integer",
            "writeOnly": true
          },
          "payment_processor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentProcessor"
              }
            ],
            "description": "The payment processor associated with the transaction"
          },
          "reference_id": {
            "description": "Your unique ID for transaction",
            "example": "my_favourite_transaction_231098",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          },
          "request_id": {
            "description": "ID associated with request, e.g., all transactions in same POST request will have same request_id",
            "example": "req_DVqRq8eZ5VeDH3by5o5FeX",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "timestamp": {
            "description": "The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'",
            "example": "2021-11-12T10:38:05Z",
            "format": "date-time",
            "nullable": true,
            "type": "string"
          },
          "transaction_code": {
            "description": "Code associated with transaction to indicate the type of transaction",
            "example": "card",
            "maxLength": 140,
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "amount",
          "description"
        ],
        "type": "object"
      },
      "TransactionsPostAsyncSchema": {
        "properties": {
          "balances": {
            "description": "Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied.",
            "items": {
              "$ref": "#/components/schemas/AccountBalance1"
            },
            "nullable": true,
            "type": "array"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/TransactionPostAsync"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "TransactionsPostSyncSchema": {
        "properties": {
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction1"
            },
            "minItems": 1,
            "type": "array"
          }
        },
        "required": [
          "transactions"
        ],
        "type": "object"
      },
      "UserModifiableSettings": {
        "properties": {
          "use_new_company_layout": {
            "type": "boolean"
          },
          "use_new_end_user_table": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "WebhookSchema": {
        "properties": {
          "headers": {
            "description": "Headers to send webhook with",
            "example": {
              "Content-Type": "application/json"
            },
            "nullable": true,
            "type": "object"
          },
          "heron_id": {
            "description": "Unique ID for webhook generated by Heron",
            "example": "wbh_HM9PfoLDsHtsV3PJTDvgnz",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether the webhook is enabled",
            "example": true,
            "type": "boolean"
          },
          "topic": {
            "description": "Webhook topic for different Heron events",
            "enum": [
              "data_source_account_summary.created",
              "data_source.disabled",
              "end_user.created",
              "end_user.processed",
              "end_user.failed",
              "end_user.reviewed",
              "end_user.transactions_updated",
              "end_user.review_required",
              "end_user.files_changed",
              "end_user.files_classified",
              "end_user_information.updated",
              "end_user.policy_workflow_finished",
              "transactions.deleted",
              "transactions.updated",
              "pdf.processed",
              "pdf.checks_passed",
              "pdf.checks_failed",
              "pdf.transactions_loaded",
              "pdf.failed",
              "pdf.parsed",
              "pdf.approved",
              "integration_link.erroring",
              "iso_application.processed",
              "iso_application.processed_simple",
              "iso_application.created",
              "end_user_email.processed",
              "end_user_email.failed",
              "debt_summary.processed"
            ],
            "example": "end_user.processed",
            "type": "string"
          },
          "url": {
            "description": "URL where webhook should be sent",
            "example": "https://www.your-webhook-endpoint.com/heron",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebhookUpdateSchema": {
        "properties": {
          "headers": {
            "description": "Headers to send webhook with",
            "example": {
              "Content-Type": "application/json"
            },
            "nullable": true,
            "type": "object"
          },
          "heron_id": {
            "description": "Unique ID for webhook generated by Heron",
            "example": "wbh_HM9PfoLDsHtsV3PJTDvgnz",
            "readOnly": true,
            "type": "string"
          },
          "is_enabled": {
            "description": "Whether the webhook is enabled",
            "example": true,
            "type": "boolean"
          },
          "topic": {
            "description": "Webhook topic for different Heron events",
            "enum": [
              "data_source_account_summary.created",
              "data_source.disabled",
              "end_user.created",
              "end_user.processed",
              "end_user.failed",
              "end_user.reviewed",
              "end_user.transactions_updated",
              "end_user.review_required",
              "end_user.files_changed",
              "end_user.files_classified",
              "end_user_information.updated",
              "end_user.policy_workflow_finished",
              "transactions.deleted",
              "transactions.updated",
              "pdf.processed",
              "pdf.checks_passed",
              "pdf.checks_failed",
              "pdf.transactions_loaded",
              "pdf.failed",
              "pdf.parsed",
              "pdf.approved",
              "integration_link.erroring",
              "iso_application.processed",
              "iso_application.processed_simple",
              "iso_application.created",
              "end_user_email.processed",
              "end_user_email.failed",
              "debt_summary.processed"
            ],
            "example": "end_user.processed",
            "type": "string"
          },
          "url": {
            "description": "URL where webhook should be sent",
            "example": "https://www.your-webhook-endpoint.com/heron",
            "format": "url",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Widget": {
        "properties": {
          "id": {
            "description": "A unique id used to reference the widget",
            "type": "string"
          },
          "scorecard_metric_date_range": {
            "enum": [
              "latest",
              "last_30_days",
              "last_90_days",
              "last_120_days",
              "last_180_days",
              "last_365_days",
              "next_30_days",
              "next_60_days",
              "next_90_days",
              "next_180_days",
              "last_1_calendar_months",
              "last_3_calendar_months",
              "last_4_calendar_months",
              "last_6_calendar_months",
              "last_12_calendar_months",
              "last_1_full_calendar_months",
              "last_2_full_calendar_months",
              "last_3_full_calendar_months",
              "last_6_full_calendar_months",
              "last_12_full_calendar_months"
            ],
            "type": "string"
          },
          "scorecard_metric_label": {
            "type": "string"
          },
          "type": {
            "enum": [
              "scorecard_metric",
              "heron_score",
              "loan_revenue_ratio",
              "deposit_trends_ratio"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "type"
        ],
        "type": "object"
      },
      "YodleeAccount": {
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/YodleeAmount"
          },
          "classification": {
            "nullable": true,
            "type": "string"
          },
          "id": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "YodleeAmount": {
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "YodleeSchema": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/YodleeAccount"
            },
            "type": "array"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/YodleeTransaction"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "YodleeTransaction": {
        "properties": {
          "accountId": {
            "type": "integer"
          },
          "amount": {
            "$ref": "#/components/schemas/YodleeAmount"
          },
          "baseType": {
            "enum": [
              "CREDIT",
              "DEBIT"
            ],
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "date": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "$ref": "#/components/schemas/YodleeTransactionDescription"
          },
          "id": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "YodleeTransactionDescription": {
        "properties": {
          "original": {
            "type": "string"
          },
          "simple": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "BasicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    }
  },
  "externalDocs": {
    "description": "Read Tutorial",
    "url": "https://docs.herondata.io/"
  },
  "info": {
    "contact": {
      "email": "support@herondata.io",
      "name": "Support"
    },
    "title": "Heron Data API",
    "version": "2021-07-19"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/annotators/feedback/annotations": {
      "post": {
        "description": "Provide bulk feedback on Transaction Categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/BulkCategoryFeedback"
                },
                "type": "array"
              }
            }
          },
          "description": "A list of objects containing a Transaction's heron id and the suggested Category. If you provide a `heron_id` for Category, you don't need to provide other fields. If `heron_id` is provided, we disregard `label`.\n",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "num_annotations": {
                      "description": "The number of category annotations added",
                      "example": 1,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Bulk create category feedback",
        "tags": [
          "EnrichmentFeedback"
        ]
      }
    },
    "/api/categories": {
      "get": {
        "description": "Get available categories",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "categories": {
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get categories",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/crm_integrations": {
      "get": {
        "description": "Get a list of CRM Integrations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crm_integrations": {
                      "items": {
                        "$ref": "#/components/schemas/CrmIntegrationSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "List CRM Integrations",
        "tags": [
          "CrmIntegrations"
        ]
      },
      "post": {
        "description": "Create a CRM integration, e.g., with Salesforce",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrmIntegrationSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "crm_integration": {
                      "$ref": "#/components/schemas/CrmIntegrationSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create a CRM integration",
        "tags": [
          "CrmIntegrations"
        ]
      }
    },
    "/api/crm_integrations/{heron_id}": {
      "patch": {
        "description": "patch a CRM integration",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrmIntegrationPatchSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrmIntegrationSchema",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Patch a CRM integration",
        "tags": [
          "CrmIntegrations"
        ]
      }
    },
    "/api/data_source_accounts/{heron_id}": {
      "put": {
        "description": "Update a data source account\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserDataSourceAccountUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserDataSourceAccount",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update a data source account",
        "tags": [
          "EndUserDataSourceAccounts"
        ]
      }
    },
    "/api/data_sources/{heron_id}": {
      "put": {
        "description": "Update a data source\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserDataSourceUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserDataSource",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update a data source",
        "tags": [
          "EndUserDataSources"
        ]
      }
    },
    "/api/email_templates": {
      "get": {
        "description": "Read all available templates",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "items": {
                        "$ref": "#/components/schemas/EmailTemplateSchema",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get email templates",
        "tags": [
          "EmailTemplates"
        ]
      },
      "post": {
        "description": "Create an email template used to send emails conditional on events like policy evaluation\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "email_template": {
                      "$ref": "#/components/schemas/EmailTemplateSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create an email template",
        "tags": [
          "EmailTemplates"
        ]
      }
    },
    "/api/email_templates/{heron_id}": {
      "patch": {
        "description": "Update an email template\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplatePatchSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "email_template": {
                      "$ref": "#/components/schemas/EmailTemplatePatchSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Patch an email template",
        "tags": [
          "EmailTemplates"
        ]
      }
    },
    "/api/end_user_emails/{heron_id}/export": {
      "get": {
        "description": "Export an end user email as an EML file. Attachments are not included.",
        "parameters": [
          {
            "description": "The heron_id of the email to export",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "message/rfc822": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Export an end user email as an EML file",
        "tags": [
          "EndUserEmails"
        ]
      }
    },
    "/api/end_user_files/{heron_id}": {
      "patch": {
        "description": "Use this endpoint to change the end user file's class. The file will be reprocessed as the new type.\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserFileUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserFileSchema",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update the end user file's class",
        "tags": [
          "EndUserFiles"
        ]
      }
    },
    "/api/end_user_files/{heron_id}/file": {
      "get": {
        "description": "Get the base64 string representation of an end user file",
        "parameters": [
          {
            "description": "The heron_id of the end user file",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserFileBase64Schema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUserFile as a base64 string",
        "tags": [
          "EndUserFiles"
        ]
      }
    },
    "/api/end_users": {
      "get": {
        "description": "Get a list of EndUsers",
        "parameters": [
          {
            "description": "Whether the to include data sources for each end user",
            "in": "query",
            "name": "include_data_sources",
            "required": false,
            "schema": {
              "default": false,
              "example": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filter by status of end user",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "default": null,
              "enum": [
                "new",
                "ready",
                "processed",
                "reviewed",
                "review_requested",
                "failed"
              ],
              "example": "reviewed",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter by ID associated with end_user_id field in transactions",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Pagination page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Order to return end users by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "last_updated_desc",
              "enum": [
                "last_updated_desc",
                "last_updated_asc",
                "created_desc",
                "created_asc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether the end user is part of a lending portfolio",
            "in": "query",
            "name": "is_portfolio",
            "required": false,
            "schema": {
              "default": null,
              "example": true,
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Filter by name associated with end user",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_name",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Unique ID generated by Heron",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_fCYZGMib7Lh2h68p95Wqgn",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Pagination limit per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Whether to include scorecard metrics for each end user (under field criteria)",
            "in": "query",
            "name": "include_scorecard_metrics",
            "required": false,
            "schema": {
              "default": false,
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "properties": {
                        "limit": {
                          "example": 1000,
                          "type": "integer"
                        },
                        "next_url": {
                          "type": "string"
                        },
                        "page": {
                          "example": 1,
                          "type": "integer"
                        },
                        "pages": {
                          "example": 3,
                          "type": "integer"
                        },
                        "prev_url": {
                          "type": "string"
                        },
                        "total": {
                          "example": 3500,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "end_users": {
                      "items": {
                        "$ref": "#/components/schemas/EndUser",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "List EndUsers",
        "tags": [
          "EndUsers"
        ]
      },
      "post": {
        "description": "Create a new end user. If transactions have previously been sent for this `end_user_id`, use `PUT end_users` to update instead.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/EndUserPostParams",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create EndUser",
        "tags": [
          "EndUsers"
        ]
      },
      "put": {
        "callbacks": {
          "onData": {
            "$yourWebhookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "properties": {
                          "created": {
                            "format": "date-time",
                            "type": "string"
                          },
                          "data": {
                            "properties": {
                              "end_user_id": {
                                "example": "myenduser",
                                "type": "string"
                              },
                              "heron_id": {
                                "example": "eus_Eqio3Y4dhyNiMphrXwG58p",
                                "type": "string"
                              },
                              "status": {
                                "example": "processed",
                                "type": "string"
                              }
                            },
                            "type": "object"
                          },
                          "meta": {
                            "format": "nullable",
                            "type": "object"
                          },
                          "topic": {
                            "type": "string"
                          }
                        },
                        "type": "object"
                      }
                    }
                  },
                  "description": "Webhook payload with end_user"
                },
                "responses": {
                  "200": {
                    "description": "Your webhook implementation should return this HTTP status code\nif the data was received successfully."
                  }
                }
              }
            }
          }
        },
        "description": "Confirm an end user is ready for async procesing by sending a status of \"ready\". The `end_user_id` must have previously been sent with at least one Transaction.\n",
        "externalDocs": {
          "description": "Webhook Tutorial",
          "url": "https://docs.herondata.io/webhooks"
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/EndUser",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Dictionary representing an EndUser",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update EndUser",
        "tags": [
          "EndUsers"
        ]
      }
    },
    "/api/end_users/balance": {
      "get": {
        "description": "Get balance for given EndUser on a daily and account granularity",
        "parameters": [
          {
            "description": "Filter for transactions with date earlier than the input value (inclusive). It has precedence over timestamp_max",
            "in": "query",
            "name": "date_max",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-30",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": [
                "GBP",
                "USD",
                "EUR"
              ],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Deprecated (use date_max instead). Filter for transactions with timestamp earlier than the input value",
            "in": "query",
            "name": "timestamp_max",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-30T14:08:36.315731",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "If true, forecasts the balances of each account",
            "in": "query",
            "name": "include_forecast",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filter for transactions with timestamp after the input value (inclusive). It has precedence over timestamp_min",
            "in": "query",
            "name": "date_min",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Deprecated (use date_min instead). Filter for transactions with timestamp after the input value",
            "in": "query",
            "name": "timestamp_min",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-31T14:08:36.315666",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserBalanceOutputSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser balance",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/forecast": {
      "get": {
        "description": "Get forecast amounts for a given EndUser and category",
        "parameters": [
          {
            "description": "Heron ID of category to be forecasted; either category_heron_id or category_label must be present",
            "in": "query",
            "name": "category_heron_id",
            "required": false,
            "schema": {
              "example": "ctg_AwHi7vybh7ZfMKcAJwZSuf",
              "type": "string"
            }
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": [
                "GBP",
                "USD",
                "EUR"
              ],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Label of category to be forecasted; either category_heron_id or category_label must be present",
            "in": "query",
            "name": "category_label",
            "required": false,
            "schema": {
              "example": "Revenue",
              "type": "string"
            }
          },
          {
            "description": "The latest transaction timestamp date to use in forecasting",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The earliest transaction timestamp date to use in forecasting",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-01",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Aggregate results over time, i.e., aggregate by week or by month",
            "in": "query",
            "name": "date_granularity",
            "required": false,
            "schema": {
              "default": "month",
              "enum": [
                "week",
                "month"
              ],
              "example": "month",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EndUserForecastOutputSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser forecasts",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/statistics": {
      "get": {
        "description": "Get summarized statistics for a given EndUser",
        "parameters": [
          {
            "description": "Pivot results by merchant or by category",
            "in": "query",
            "name": "group_by",
            "required": false,
            "schema": {
              "default": "category",
              "enum": [
                "category",
                "merchant"
              ],
              "example": "category",
              "type": "string"
            }
          },
          {
            "description": "Filter by specific categories",
            "explode": true,
            "in": "query",
            "name": "category_heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "example": [
                "ctg_cxVBMJfL2r2UJy4YnSMD5u",
                "ctg_TSvwKY37xSL6GDxgLgQjm7"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Heron-generated id for end user; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "eus_VWcWaUwYsYnvfEEg25wc9N",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code to convert to",
            "in": "query",
            "name": "to_currency",
            "required": false,
            "schema": {
              "enum": [
                "GBP",
                "USD",
                "EUR"
              ],
              "example": "USD",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "end_user_id for statistics; either end_user_id or end_user_heron_id is required",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "your_end_user_id",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions with timestamp before the input value (as date)",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-30",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Filter by specific merchants",
            "explode": true,
            "in": "query",
            "name": "merchant_heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "example": [
                "mrc_JddNQ5amLyp46LbhBUJejV",
                "mrc_VWUJcqb72BmtbCUqEUjXWq"
              ],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Filter for transactions with timestamp after the input value (as date)",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Aggregate results over time, e.g., by week or by quarter",
            "in": "query",
            "name": "date_granularity",
            "required": false,
            "schema": {
              "default": "month",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ],
              "example": "month",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "statistics": {
                      "items": {
                        "$ref": "#/components/schemas/EndUserStatsOutputSchema",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser statistics",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}": {
      "delete": {
        "description": "Delete an end user. You must delete associated transactions before doing this.\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Delete EndUser by heron_id or end_user_id",
        "tags": [
          "EndUsers"
        ]
      },
      "get": {
        "description": "Get an end user using its end_user_id or heron_id\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser by heron_id or end_user_id",
        "tags": [
          "EndUsers"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/anomalies": {
      "get": {
        "description": "Get anomalies for given EndUser given a category label or heron id",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Label or Heron ID of category to find anomalies for",
            "in": "query",
            "name": "category_label_or_heron_id",
            "required": true,
            "schema": {
              "example": "Revenue",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AnomalySchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser anomalies",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/bank_statement_summary": {
      "get": {
        "description": "Get the bank statement summary by month for an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines how to group transactions. It supports calendar month (by_month) or rolling 30-day period (from last txns with rolling_30_days_from_last_txn or from today with rolling_30_days_from_today)",
            "in": "query",
            "name": "grouping",
            "required": false,
            "schema": {
              "default": "by_month",
              "enum": [
                "by_month",
                "by_data_source_account_heron_id",
                "rolling_30_days_from_last_txn",
                "rolling_30_days_from_today"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserBankStatementSummary",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser bank statement summary",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/benchmarks": {
      "get": {
        "description": "Get the benchmarks for each metric for an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "benchmarks": {
                      "items": {
                        "$ref": "#/components/schemas/MetricBenchmarksSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser metric benchmarks",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/data_source_account_summary": {
      "get": {
        "description": "Get a list of data sources accounts & their summarised information for a company\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSourceAccountSummaryPublicSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get data source account summary",
        "tags": [
          "EndUserDataSources"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/data_sources": {
      "get": {
        "description": "Get a list of data sources for a company\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EndUserDataSources",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get data sources",
        "tags": [
          "EndUserDataSources"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/drivers_licences": {
      "get": {
        "description": "Get all Drivers Licences for an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DriversLicenceFrontResponseSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser Drivers Licences",
        "tags": [
          "DriversLicences"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/emails": {
      "get": {
        "description": "Get the emails associated with an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EndUserEmailSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser emails",
        "tags": [
          "EndUsers"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/end_user_information": {
      "get": {
        "description": "Get the company details of an end user including loan information",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserInformationSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser information",
        "tags": [
          "EndUsers"
        ]
      },
      "patch": {
        "description": "Update the end user information",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserInformationPatchSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserInformationSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Patch EndUser information",
        "tags": [
          "EndUsers"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/enrich": {
      "post": {
        "description": "Enriches transactions of an end user identified by its end_user_id or heron_id. There is an optional `priority` parameter that can be set to `high` to prioritize the enrichment over `normal` (default) priority. High priority enrichment is only enabled for enterprise-level accounts. Please contact support@herondata.io to upgrade your account.\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Priority for async enrichment",
            "in": "query",
            "name": "priority",
            "required": false,
            "schema": {
              "default": "normal",
              "enum": [
                "normal",
                "high"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "end_user": {
                      "$ref": "#/components/schemas/EndUser",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Enrich transactions of EndUser",
        "tags": [
          "EndUsers"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/evaluate_rules": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RuleEvaluationSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Evaluate all rules for an end user",
        "tags": [
          "EndUserRules"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/export_spreadsheet": {
      "get": {
        "description": "Export a spreadsheet for an end user containing key metrics and reports\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Export as a spreadsheet",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/files": {
      "get": {
        "description": "Get all files for an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EndUserFileSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUserFiles",
        "tags": [
          "EndUserFiles"
        ]
      },
      "post": {
        "description": "Upload file to an end user & asynchronously classify its type",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserFileUploadSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Post EndUserFile",
        "tags": [
          "EndUserFiles"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/files/download": {
      "get": {
        "description": "Download all files for an end user as a zip",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/zip": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Download EndUserFiles",
        "tags": [
          "EndUserFiles"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/heron_score": {
      "get": {
        "description": "Get Heron Score for end user with a breakdown of the feature group contributions which resulted in the score. The score is calculated for the day of last transaction. This is a beta feature and is subject to change.",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum company categorisation confidence to calculate Heron Score",
            "in": "query",
            "name": "min_category_confidence",
            "required": false,
            "schema": {
              "default": null,
              "example": 0.8,
              "nullable": true,
              "type": "number"
            }
          },
          {
            "description": "Cut-off date to consider transactions to for calculating heron score (inclusive)",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-01-19",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HeronScoreSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser Heron Score (beta)",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/industry": {
      "get": {
        "description": "Predict the industry of the end user based on its name",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Maximum number of digits in NAICS code",
            "in": "query",
            "name": "naics_code_max_digits",
            "required": false,
            "schema": {
              "example": 6,
              "maximum": 6,
              "minimum": 2,
              "type": "integer"
            }
          },
          {
            "description": "Minimum number of digits in NAICS code",
            "in": "query",
            "name": "naics_code_min_digits",
            "required": false,
            "schema": {
              "example": 2,
              "maximum": 6,
              "minimum": 2,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustrySchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser industry",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/inscribe": {
      "post": {
        "description": "Upload Inscribe JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InscribeSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload Inscribe",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/integration_links": {
      "get": {
        "description": "Get a list of integration links for a specified end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "links": {
                      "items": {
                        "$ref": "#/components/schemas/IntegrationLinkSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get Integration Links",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/iso_application_form": {
      "post": {
        "description": "Use this endpoint to upload an ISO application PDF. Once uploaded, the file will be automatically scrubbed asynchronously. You can use the returned iso_application heron_id (prefixed \"iso_\") to fetch the scrubbing results. Please contact support@herondata.io to enable this endpoint.\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserFileSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload an ISO application PDF for for an end user",
        "tags": [
          "ISOApplication"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/iso_applications": {
      "get": {
        "description": "Get all ISO applications for an end user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GetIsoApplicationSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser ISO Applications",
        "tags": [
          "ISOApplication"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/merchant_summary": {
      "get": {
        "description": "Get the summary of transactions by merchant for an end user for a given category",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "explode": true,
            "in": "query",
            "name": "category_label_or_heron_id",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "type": "array"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndUserMerchantSummary",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser merchant summary",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/missing_accounts": {
      "get": {
        "description": "Get a list of possible missing accounts for a given End User. This endpoint is in beta and likely to change.",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "missing_accounts": {
                      "items": {
                        "$ref": "#/components/schemas/MissingAccountSchema",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get Missing Accounts (beta)",
        "tags": [
          "EndUserAccounts"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/named_dates": {
      "get": {
        "description": "Get the named dates associated with an end user, e.g., date of last transaction",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "named_dates": {
                      "items": {
                        "$ref": "#/components/schemas/NamedDateSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser named dates",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/ocrolus": {
      "post": {
        "description": "Upload Ocrolus JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Skip the check for the number of transactions in the payload",
            "in": "query",
            "name": "skip_num_txns_check",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OcrolusSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload Ocrolus",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/pdfs": {
      "get": {
        "description": "Get list of PDFs for a specified end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include processed results where applicable per pdf",
            "in": "query",
            "name": "with_processed_results",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pdfs": {
                      "items": {
                        "$ref": "#/components/schemas/PdfGetSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get PDFs",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/pdfs/parse": {
      "post": {
        "description": "Starts parsing all PDFs for a specified end users. This will not restart any PDFs that are already being parsed\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pdf_heron_ids": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "request_id": {
                      "description": "Unique UUID per request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Parse all PDF",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/pdfs/v1": {
      "post": {
        "description": "Upload encoded PDF of transactions for a specified end user to translate into Heron Data format\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfPostSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pdf_heron_id": {
                      "description": "Heron id of the uploaded pdf file",
                      "type": "string"
                    },
                    "request_id": {
                      "description": "Unique UUID per request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload PDF",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/plaid/assets": {
      "post": {
        "description": "Upload Plaid asset JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaidAssetsSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload Plaid assets",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/plaid/transactions": {
      "post": {
        "description": "Upload Plaid transactions JSON for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaidTransactionsSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload Plaid transactions",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss": {
      "get": {
        "description": "Calculates the profit & loss table for an end user, based on the layout defined (if any)\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first",
            "in": "query",
            "name": "dates_ascending",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The latest transaction timestamp date to use",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-31",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "ISO 4217 currency code for balance",
            "in": "query",
            "name": "currency",
            "required": false,
            "schema": {
              "example": "USD",
              "maxLength": 3,
              "minLength": 3,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "The earliest transaction timestamp date to use",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2022-01-01",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfitAndLossSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser P&L",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_layout": {
      "put": {
        "description": "Update the profit and loss layout for the end user, which determines how the profit and loss table is calculated\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfitAndLossLayoutUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfitAndLossLayoutSchema",
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update EndUser P&L layout",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/scorecard": {
      "get": {
        "description": "Get scorecard metrics and rule violations for a user",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Qualitative description for date to calculate scorecard",
            "in": "query",
            "name": "named_date",
            "required": false,
            "schema": {
              "default": null,
              "enum": [
                "end_user_created",
                "end_user_last_updated",
                "last_transaction",
                "end_user_last_enriched",
                "last_data_source_end_date_or_transaction_timestamp"
              ],
              "example": "end_user_created",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Cut-off date to consider transactions to for calculating scorecard (inclusive)",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "default": null,
              "example": "2023-01-19",
              "format": "date",
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "metrics": {
                      "items": {
                        "$ref": "#/components/schemas/Metric"
                      },
                      "type": "array"
                    },
                    "rule_violations": {
                      "items": {
                        "$ref": "#/components/schemas/RuleViolation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get EndUser scorecard",
        "tags": [
          "EndUserCalculations"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/transactions": {
      "get": {
        "description": "Get all unique transactions for a single end user. Set end user status to \"ready\" to initiate transaction enrichment, otherwise may contain both enriched and unenriched transactions\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat",
            "in": "query",
            "name": "last_updated_min",
            "required": false,
            "schema": {
              "default": null,
              "example": "2024-05-31T14:08:37.085406",
              "format": "date-time",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Desired results per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 100,
              "maximum": 50000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Results page",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "$ref": "#/components/schemas/Pagination",
                      "type": "object"
                    },
                    "transactions_enriched": {
                      "items": {
                        "$ref": "#/components/schemas/TransactionEnriched",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get end user transactions",
        "tags": [
          "EnrichedTransactions"
        ]
      },
      "post": {
        "description": "Upload transactions for a specific end user. Does not include enriching transactions -- set end user status = 'ready' to initiate processing. For synchronous enrichment, please instead use \"Enrich transactions (sync). Either timestamp (preferred) or date must be present in the transaction payload.\"\n",
        "parameters": [
          {
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndUserTransactionsPostAsyncSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "request_id": {
                      "description": "Unique UUID per request",
                      "type": "string"
                    },
                    "transactions_loaded": {
                      "description": "The number of transactions loaded",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create end user transactions (async)",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/end_users/{end_user_id_or_heron_id}/yodlee": {
      "post": {
        "description": "Upload Yodlee JSON files for a specified end user to translate into Heron Data format and add transactions for the end user\n",
        "parameters": [
          {
            "description": "The `end_user_id` or `heron_id` of EndUser to upload",
            "in": "path",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/YodleeSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload Yodlee",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/end_users/{heron_id}/policy_evaluations": {
      "get": {
        "description": "Evaluates the user's policies against end user on-the-fly\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PolicyEvaluationSchema"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get the policy evaluations for an end user",
        "tags": [
          "Policy"
        ]
      }
    },
    "/api/hello_world": {
      "get": {
        "description": "Test endpoint (no authentication)",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hello": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "url works"
          }
        },
        "tags": [
          "Testing"
        ]
      }
    },
    "/api/hello_world/authenticated": {
      "get": {
        "description": "Test authentication",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "hello": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Authentication works"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Testing"
        ]
      }
    },
    "/api/integration_links/{item_id}": {
      "put": {
        "description": "Allows refreshing the access_token of an existing Integration Link",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/IntegrationLinkUpdateSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "IntegrationLink",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integration_link": {
                      "$ref": "#/components/schemas/IntegrationLinkSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update an Integration Link",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/api/integrations": {
      "get": {
        "description": "Get a list of Integrations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integrations": {
                      "items": {
                        "$ref": "#/components/schemas/IntegrationSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "List Integrations",
        "tags": [
          "Integrations"
        ]
      },
      "post": {
        "description": "Create an integration e.g. with Plaid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "integration": {
                    "$ref": "#/components/schemas/IntegrationSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/IntegrationSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create an integration",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/api/integrations/pdfs/{heron_id}": {
      "put": {
        "description": "Update PDF attributes including status\n",
        "parameters": [
          {
            "description": "heron_id of the pdf",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfPutSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "pdf": {
                      "$ref": "#/components/schemas/PdfGetSchema",
                      "type": "object"
                    },
                    "request_id": {
                      "description": "Unique UUID per request",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update PDF attributes including status",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/integrations/pdfs/{heron_id}/processed": {
      "patch": {
        "description": "Send patch transactions processed pdf that will override the extracted transactions in the specified statement\n",
        "parameters": [
          {
            "description": "heron_id of the pdf",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PdfStatementPatchSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ok": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Send patch transactions for a pdf statement",
        "tags": [
          "EndUserIntegrations"
        ]
      }
    },
    "/api/integrations/{heron_id}": {
      "put": {
        "description": "Update an Integration",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "end_user": {
                    "$ref": "#/components/schemas/IntegrationSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Integration",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "integration": {
                      "$ref": "#/components/schemas/IntegrationSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update Integration",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/api/integrations/{heron_id}/links": {
      "delete": {
        "description": "Soft-deletes of an integration link (sync is disabled)",
        "parameters": [
          {
            "description": "The Integration's heron_id",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Delete that end user's IntegrationLinks",
            "in": "query",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "(Soft-)Delete an integration link",
        "tags": [
          "Integrations"
        ]
      },
      "get": {
        "description": "Get a list of IntegrationLinks for an Integration filtered by end user",
        "parameters": [
          {
            "description": "The Integration's heron_id",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return only IntegrationLinks for that end user",
            "in": "query",
            "name": "end_user_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "links": {
                      "items": {
                        "$ref": "#/components/schemas/IntegrationLinkSchema"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get IntegrationLinks by Integration",
        "tags": [
          "Integrations"
        ]
      },
      "post": {
        "description": "Create a Link for an active Integration every time a customer connects their bank. In Plaid, this is a Plaid Link every time a customer connects their bank. For Plaid, call this after exchanging a public token for an Item access_token.\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationLinkSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "link": {
                      "$ref": "#/components/schemas/IntegrationLinkNewSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create an integration Link",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/api/integrations/{heron_id}/links/{link_item_id}/refresh": {
      "post": {
        "description": "Trigger a refresh operation for an IntegrationLink",
        "parameters": [
          {
            "description": "The Integration's heron_id",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The IntegrationLink's item_id",
            "in": "path",
            "name": "link_item_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "link": {
                      "$ref": "#/components/schemas/IntegrationLinkSchema",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Refresh an IntegrationLink",
        "tags": [
          "Integrations"
        ]
      }
    },
    "/api/iso_applications/": {
      "post": {
        "description": "Use this endpoint to upload an ISO application PDF. Once uploaded, the file will be automatically scrubbed asynchronously. You can use the returned heron_id (prefixed \"iso_\") to fetch the scrubbing results from the GET endpoint below. Please contact support@herondata.io to enable this endpoint.\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "format": "binary",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "heron_id": {
                      "description": "e.g. iso_",
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "processing"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload an ISO application PDF for automated scrubbing in under 15 seconds",
        "tags": [
          "ISOApplication"
        ]
      }
    },
    "/api/iso_applications/base64": {
      "post": {
        "description": "This endpoint is for uploading ISO application PDFs in base64 format.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostIsoApplicationBase64Schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "heron_id": {
                      "description": "e.g. iso_",
                      "type": "string"
                    },
                    "status": {
                      "enum": [
                        "processing"
                      ],
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Upload an ISO application PDF for automated scrubbing in under 15 seconds (base64)",
        "tags": [
          "ISOApplication"
        ]
      }
    },
    "/api/iso_applications/{heron_id}": {
      "get": {
        "description": "Use this endpoint to retrieve the scrubbed results and data validations of an uploaded ISO application PDF once it has finished processing. If processing is still underway, the processing_status field will be \"processing\".\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIsoApplicationSchema",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get the scrubbed results and data validations of an uploaded ISO application by its heron_id (prefixed \"iso_\")",
        "tags": [
          "ISOApplication"
        ]
      }
    },
    "/api/merchants/extract": {
      "post": {
        "description": "Extract Merchant from a transaction description",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "example": "PAYPAL* AMZN Mktp 198748320",
                    "type": "string"
                  }
                },
                "required": [
                  "description"
                ],
                "type": "object"
              }
            }
          },
          "description": "The bank transaction description as a string"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "description_clean": {
                      "example": "Amzn Mktp",
                      "nullable": true,
                      "type": "string"
                    },
                    "merchant": {
                      "$ref": "#/components/schemas/MerchantExtract",
                      "nullable": true,
                      "type": "object"
                    },
                    "payment_processor": {
                      "$ref": "#/components/schemas/PaymentProcessor",
                      "nullable": true,
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "The `merchant` key is not null when we find a positive match to our database. When we could not match a merchant, `merchant` is null and `description_clean` is set to a substring of the original description that our models identified as the relevant entity.\n"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Merchants"
        ]
      }
    },
    "/api/merchants/groups": {
      "get": {
        "description": "Get Merchant groups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MerchantGroup",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Merchants"
        ]
      }
    },
    "/api/merchants/search": {
      "get": {
        "description": "Search Merchants by name",
        "parameters": [
          {
            "description": "Full or partial name, minimum 3 characters",
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If true, only returns priority merchants",
            "in": "query",
            "name": "only_priority",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "merchants": {
                      "items": {
                        "$ref": "#/components/schemas/Merchant",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "A list of up to 5 merchants which match the search term, sorted by descending order of their URL rank and the frequency this merchant has been seen historically.\n"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Merchants"
        ]
      }
    },
    "/api/merchants/{heron_id}": {
      "get": {
        "description": "Get Merchant by heron_id",
        "parameters": [
          {
            "description": "The Merchant `heron_id`",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "merchant": {
                      "$ref": "#/components/schemas/Merchant",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Merchants"
        ]
      }
    },
    "/api/rules/": {
      "get": {
        "description": "Read all available rules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "items": {
                        "$ref": "#/components/schemas/Rule",
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get rules",
        "tags": [
          "Rules"
        ]
      },
      "post": {
        "description": "Create a new rule to send a 'end_user.review_required' webhook after processing if rule condition evaluates to true\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rule": {
                    "$ref": "#/components/schemas/Rule",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/Rule",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create a single rule",
        "tags": [
          "Rules"
        ]
      }
    },
    "/api/rules/{heron_id}": {
      "delete": {
        "description": "Delete a rule\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "heron_id": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Deleted"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Delete rule by heron_id",
        "tags": [
          "Rules"
        ]
      },
      "put": {
        "description": "Update a rule\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "rule": {
                    "$ref": "#/components/schemas/RuleUpdateSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Rule",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rule": {
                      "$ref": "#/components/schemas/Rule",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Updated"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update rule by heron_id",
        "tags": [
          "Rules"
        ]
      }
    },
    "/api/transactions": {
      "delete": {
        "callbacks": {
          "onData": {
            "$yourWebhookUrl": {
              "post": {
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TransactionDeleteWebhook",
                        "type": "object"
                      }
                    }
                  },
                  "description": "Webhook payload with transactions"
                },
                "responses": {
                  "200": {
                    "description": "Your webhook implementation should return this HTTP status code\nif the data was received successfully."
                  }
                }
              }
            }
          }
        },
        "description": "Delete transactions",
        "parameters": [
          {
            "description": "Request ID of transactions to be deleted",
            "in": "query",
            "name": "request_id",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "if true, deletes only transactions that are marked as duplicates",
            "in": "query",
            "name": "only_duplicates",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "end_user_id of transactions to be deleted",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "(legacy) Heron ID of transaction to be deleted",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "default": null,
              "example": "txn_Gpm5DgmgQbrTzXKpDE3YjH",
              "nullable": true,
              "type": "string"
            }
          },
          {
            "description": "Heron IDs of transactions to be deleted",
            "explode": true,
            "in": "query",
            "name": "heron_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Reference IDs of transactions to be deleted",
            "explode": true,
            "in": "query",
            "name": "reference_ids",
            "required": false,
            "schema": {
              "default": [],
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "account_id of transactions to be deleted",
            "in": "query",
            "name": "account_id",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Transactions"
        ]
      },
      "get": {
        "description": "Get transactions",
        "parameters": [
          {
            "description": "Filter by regex matching transaction description",
            "in": "query",
            "name": "description_regex",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by the heron_id of the category that the transaction is annotated with",
            "explode": true,
            "in": "query",
            "name": "category_heron_id",
            "required": false,
            "schema": {
              "default": [],
              "example": "ctg_k3D2QzKXsFP2iZ8S8JJ9aa",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "type": "array"
            },
            "style": "form"
          },
          {
            "description": "Filter by earliest transaction timestamp",
            "in": "query",
            "name": "timestamp_date_min",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter by minimum amount of transaction",
            "in": "query",
            "name": "min_amount",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Filter by whether the transaction has a matching transaction",
            "in": "query",
            "name": "has_matching_transaction",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by whether the transaction is recurring",
            "in": "query",
            "name": "is_recurring",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by merchant heron id",
            "in": "query",
            "name": "merchant_heron_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems before the specified input value",
            "in": "query",
            "name": "last_updated_max",
            "required": false,
            "schema": {
              "example": "2024-05-31T14:08:36.302403",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter by merchant group id",
            "in": "query",
            "name": "merchant_group_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by latest transaction upload date - when Heron received the transaction",
            "in": "query",
            "name": "created_date_max",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "What to order transactions by",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "id_asc",
              "enum": [
                "amount_asc",
                "amount_desc",
                "abs_amount_asc",
                "abs_amount_desc",
                "description_asc",
                "description_desc",
                "timestamp_asc",
                "timestamp_desc",
                "id_asc",
                "id_desc",
                "confidence_asc",
                "confidence_desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "in": "query",
            "name": "to_date",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Deprecated; see created_date_ or timestamp_date_",
            "in": "query",
            "name": "from_date",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Number of transactions to return per page",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 1000,
              "maximum": 10000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates.",
            "in": "query",
            "name": "request_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "End user id of transaction",
            "in": "query",
            "name": "end_user_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by transaction code",
            "in": "query",
            "name": "transaction_code",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by minimum confidence of annotation associated with transaction",
            "in": "query",
            "name": "confidence_min",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "description": "Reference Id of transaction",
            "in": "query",
            "name": "reference_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by whether the transaction has a merchant entity associated with it",
            "in": "query",
            "name": "has_merchant",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "boolean"
            }
          },
          {
            "description": "Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true.",
            "in": "query",
            "name": "include_duplicates",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Heron generated Id of transaction",
            "in": "query",
            "name": "heron_id",
            "required": false,
            "schema": {
              "example": "txn_FNACrsReFPgnVwtroAWyND",
              "type": "string"
            }
          },
          {
            "description": "Filter by maximum amount of transaction",
            "in": "query",
            "name": "max_amount",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "description": "Filter by earliest transaction upload date - when Heron received the transaction",
            "in": "query",
            "name": "created_date_min",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Filter by keyword match on transaction description; case insensitive",
            "in": "query",
            "name": "description_keyword",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page of transaction to return",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Filter for transactions whose values were last updated in Heron systems after the specified input value",
            "in": "query",
            "name": "last_updated_min",
            "required": false,
            "schema": {
              "example": "2024-05-31T14:08:36.302383",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filter by maximum confidence of annotation associated with transaction",
            "in": "query",
            "name": "confidence_max",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "description": "Filter by latest transaction timestamp",
            "in": "query",
            "name": "timestamp_date_max",
            "required": false,
            "schema": {
              "example": "2020-04-27",
              "format": "date",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_meta": {
                      "properties": {
                        "next_url": {
                          "type": "string"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "pages": {
                          "type": "integer"
                        },
                        "per_page": {
                          "type": "integer"
                        },
                        "prev_url": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "_summary": {
                      "properties": {
                        "returned_transactions": {
                          "type": "integer"
                        },
                        "transactions": {
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    },
                    "transactions": {
                      "items": {
                        "$ref": "#/components/schemas/TransactionGetOutput"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "Transactions"
        ]
      },
      "post": {
        "description": "Enrich and categorize transactions and consume them in a sync response. For business lending and underwriting, please use \"Create end user transactions\" instead. Please send a maximum of 249 transactions per request.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionsPostSyncSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "_summary": {
                      "properties": {
                        "request_id": {
                          "description": "Unique UUID per request",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "transactions": {
                      "description": "only returned for sync enrichment requests",
                      "items": {
                        "$ref": "#/components/schemas/TransactionPostOutput"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "413": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "example": 413,
                      "type": "integer"
                    },
                    "description": {
                      "example": "Transaction batch size exceeds max of 2500",
                      "type": "string"
                    },
                    "name": {
                      "example": "Payload Too Large",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Payload Too Large"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Enrich transactions (sync)",
        "tags": [
          "Transactions"
        ]
      }
    },
    "/api/transactions/{heron_id}/feedback": {
      "put": {
        "description": "Provide feedback on a Transaction's Categories and Merchants",
        "parameters": [
          {
            "description": "Transaction `heron_id`",
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "transaction": {
                    "$ref": "#/components/schemas/TransactionFeedbackSchema",
                    "type": "object"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "A partial Transaction object with the suggested Category and/or Merchant. If you provide a `heron_id` for Category or Merchant, you don't need to provide other fields. If you don't know the Merchant `heron_id` nor name, you can just send the `is_correct` boolean. If `heron_id` is provided, we disregard `name` and `label`. If `is_correct` is set to true, we disregard all other Merchant fields.\n",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create category, merchant feedback",
        "tags": [
          "EnrichmentFeedback"
        ]
      }
    },
    "/api/transactions/{reference_id_or_heron_id}": {
      "get": {
        "description": "Get enriched transaction",
        "parameters": [
          {
            "in": "path",
            "name": "reference_id_or_heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "transaction_enriched": {
                      "$ref": "#/components/schemas/TransactionEnriched",
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "tags": [
          "EnrichedTransactions"
        ]
      }
    },
    "/api/users/company_overview_layout": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CompanyOverviewLayoutSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get user's company overview layout",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/CompanyOverviewLayoutSchema",
                  "type": "object"
                },
                "type": "array"
              }
            }
          },
          "description": "The new company overview layout",
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Save user's company overview layout",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/current/settings": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserModifiableSettings",
                "type": "object"
              }
            }
          },
          "description": "The new settings",
          "required": true
        },
        "responses": {
          "204": {
            "description": "OK"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Save user's settings",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/webhooks": {
      "get": {
        "description": "Get webhook\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebhookSchema",
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get webhooks",
        "tags": [
          "Webhooks"
        ]
      },
      "post": {
        "description": "Create a webhook\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSchema",
                  "type": "object"
                }
              }
            },
            "description": "Created"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Create a webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/webhooks/topics": {
      "get": {
        "description": "Get webhook topics\n",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "topics": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Get webhook topics",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/api/webhooks/{heron_id}": {
      "put": {
        "description": "Update a webhook\n",
        "parameters": [
          {
            "in": "path",
            "name": "heron_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookUpdateSchema",
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSchema",
                  "type": "object"
                }
              }
            },
            "description": "Ok"
          }
        },
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "summary": "Update a webhook",
        "tags": [
          "Webhooks"
        ]
      }
    }
  },
  "security": [
    {
      "BasicAuth": [
        "username:api_key"
      ]
    }
  ],
  "servers": [
    {
      "description": "Production",
      "url": "https://app.herondata.io"
    }
  ]
}