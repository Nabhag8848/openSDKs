/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/annotators/feedback/annotations': {
    /**
     * Bulk create category feedback
     * @description Provide bulk feedback on Transaction Categories
     */
    post: {
      /** @description A list of objects containing a Transaction's heron id and the suggested Category. If you provide a `heron_id` for Category, you don't need to provide other fields. If `heron_id` is provided, we disregard `label`. */
      requestBody: {
        content: {
          'application/json': components['schemas']['BulkCategoryFeedback'][]
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              /**
               * @description The number of category annotations added
               * @example 1
               */
              num_annotations?: number
            }
          }
        }
      }
    }
  }
  '/api/categories': {
    /**
     * Get categories
     * @description Get available categories
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              categories?: components['schemas']['Category'][]
            }
          }
        }
        /** @description Unauthorized */
        401: {
          content: never
        }
      }
    }
  }
  '/api/crm_integrations': {
    /**
     * List CRM Integrations
     * @description Get a list of CRM Integrations
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              crm_integrations?: components['schemas']['CrmIntegrationSchema'][]
            }
          }
        }
      }
    }
    /**
     * Create a CRM integration
     * @description Create a CRM integration, e.g., with Salesforce
     */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['CrmIntegrationSchema']
        }
      }
      responses: {
        /** @description Created */
        201: {
          content: {
            'application/json': {
              crm_integration?: components['schemas']['CrmIntegrationSchema']
            }
          }
        }
      }
    }
  }
  '/api/crm_integrations/{heron_id}': {
    /**
     * Patch a CRM integration
     * @description patch a CRM integration
     */
    patch: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['CrmIntegrationPatchSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['CrmIntegrationSchema']
          }
        }
      }
    }
  }
  '/api/data_source_accounts/{heron_id}': {
    /**
     * Update a data source account
     * @description Update a data source account
     */
    put: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserDataSourceAccountUpdateSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['EndUserDataSourceAccount']
          }
        }
      }
    }
  }
  '/api/data_sources/{heron_id}': {
    /**
     * Update a data source
     * @description Update a data source
     */
    put: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserDataSourceUpdateSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['EndUserDataSource']
          }
        }
      }
    }
  }
  '/api/email_templates': {
    /**
     * Get email templates
     * @description Read all available templates
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              rules?: components['schemas']['EmailTemplateSchema'][]
            }
          }
        }
      }
    }
    /**
     * Create an email template
     * @description Create an email template used to send emails conditional on events like policy evaluation
     */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['EmailTemplateSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              email_template?: components['schemas']['EmailTemplateSchema']
            }
          }
        }
      }
    }
  }
  '/api/email_templates/{heron_id}': {
    /**
     * Patch an email template
     * @description Update an email template
     */
    patch: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EmailTemplatePatchSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              email_template?: components['schemas']['EmailTemplatePatchSchema']
            }
          }
        }
      }
    }
  }
  '/api/end_user_emails/{heron_id}/export': {
    /**
     * Export an end user email as an EML file
     * @description Export an end user email as an EML file. Attachments are not included.
     */
    get: {
      parameters: {
        path: {
          /** @description The heron_id of the email to export */
          heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'message/rfc822': string
          }
        }
      }
    }
  }
  '/api/end_user_files/{heron_id}': {
    /**
     * Update the end user file's class
     * @description Use this endpoint to change the end user file's class. The file will be reprocessed as the new type.
     */
    patch: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserFileUpdateSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['EndUserFileSchema']
          }
        }
      }
    }
  }
  '/api/end_user_files/{heron_id}/file': {
    /**
     * Get EndUserFile as a base64 string
     * @description Get the base64 string representation of an end user file
     */
    get: {
      parameters: {
        path: {
          /** @description The heron_id of the end user file */
          heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserFileBase64Schema']
          }
        }
      }
    }
  }
  '/api/end_users': {
    /**
     * List EndUsers
     * @description Get a list of EndUsers
     */
    get: {
      parameters: {
        query?: {
          /** @description Whether the to include data sources for each end user */
          include_data_sources?: boolean
          /** @description Filter by status of end user */
          status?:
            | 'new'
            | 'ready'
            | 'processed'
            | 'reviewed'
            | 'review_requested'
            | 'failed'
            | null
          /** @description Filter by ID associated with end_user_id field in transactions */
          end_user_id?: string | null
          /** @description Pagination page number */
          page?: number
          /** @description Order to return end users by */
          order_by?:
            | 'last_updated_desc'
            | 'last_updated_asc'
            | 'created_desc'
            | 'created_asc'
          /** @description Whether the end user is part of a lending portfolio */
          is_portfolio?: boolean | null
          /** @description Filter by name associated with end user */
          name?: string | null
          /** @description Unique ID generated by Heron */
          heron_id?: string | null
          /** @description Pagination limit per page */
          limit?: number
          /** @description Whether to include scorecard metrics for each end user (under field criteria) */
          include_scorecard_metrics?: boolean
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              _meta?: {
                /** @example 1000 */
                limit?: number
                next_url?: string
                /** @example 1 */
                page?: number
                /** @example 3 */
                pages?: number
                prev_url?: string
                /** @example 3500 */
                total?: number
              }
              end_users?: components['schemas']['EndUser'][]
            }
          }
        }
      }
    }
    /**
     * Update EndUser
     * @description Confirm an end user is ready for async procesing by sending a status of "ready". The `end_user_id` must have previously been sent with at least one Transaction.
     */
    put: {
      /** @description Dictionary representing an EndUser */
      requestBody: {
        content: {
          'application/json': {
            end_user?: components['schemas']['EndUser']
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              end_user?: components['schemas']['EndUser']
            }
          }
        }
      }
    }
    /**
     * Create EndUser
     * @description Create a new end user. If transactions have previously been sent for this `end_user_id`, use `PUT end_users` to update instead.
     */
    post: {
      requestBody: {
        content: {
          'application/json': {
            end_user?: components['schemas']['EndUserPostParams']
          }
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              end_user?: components['schemas']['EndUser']
            }
          }
        }
      }
    }
  }
  '/api/end_users/balance': {
    /**
     * Get EndUser balance
     * @description Get balance for given EndUser on a daily and account granularity
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter for transactions with date earlier than the input value (inclusive). It has precedence over timestamp_max */
          date_max?: string | null
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null
          /** @description ISO 4217 currency code to convert to */
          to_currency?: 'GBP' | 'USD' | 'EUR' | null
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null
          /** @description Deprecated (use date_max instead). Filter for transactions with timestamp earlier than the input value */
          timestamp_max?: string | null
          /** @description If true, forecasts the balances of each account */
          include_forecast?: boolean
          /** @description Filter for transactions with timestamp after the input value (inclusive). It has precedence over timestamp_min */
          date_min?: string | null
          /** @description Deprecated (use date_min instead). Filter for transactions with timestamp after the input value */
          timestamp_min?: string | null
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserBalanceOutputSchema']
          }
        }
      }
    }
  }
  '/api/end_users/forecast': {
    /**
     * Get EndUser forecasts
     * @description Get forecast amounts for a given EndUser and category
     */
    get: {
      parameters: {
        query?: {
          /** @description Heron ID of category to be forecasted; either category_heron_id or category_label must be present */
          category_heron_id?: string
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null
          /** @description ISO 4217 currency code to convert to */
          to_currency?: 'GBP' | 'USD' | 'EUR' | null
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null
          /** @description Label of category to be forecasted; either category_heron_id or category_label must be present */
          category_label?: string
          /** @description The latest transaction timestamp date to use in forecasting */
          to_date?: string | null
          /** @description The earliest transaction timestamp date to use in forecasting */
          from_date?: string | null
          /** @description Aggregate results over time, i.e., aggregate by week or by month */
          date_granularity?: 'week' | 'month'
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserForecastOutputSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/statistics': {
    /**
     * Get EndUser statistics
     * @description Get summarized statistics for a given EndUser
     */
    get: {
      parameters: {
        query?: {
          /** @description Pivot results by merchant or by category */
          group_by?: 'category' | 'merchant'
          /** @description Filter by specific categories */
          category_heron_ids?: string[]
          /** @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required */
          end_user_heron_id?: string | null
          /** @description ISO 4217 currency code to convert to */
          to_currency?: 'GBP' | 'USD' | 'EUR' | null
          /** @description end_user_id for statistics; either end_user_id or end_user_heron_id is required */
          end_user_id?: string | null
          /** @description Filter for transactions with timestamp before the input value (as date) */
          to_date?: string | null
          /** @description Filter by specific merchants */
          merchant_heron_ids?: string[]
          /** @description Filter for transactions with timestamp after the input value (as date) */
          from_date?: string | null
          /** @description Aggregate results over time, e.g., by week or by quarter */
          date_granularity?: 'day' | 'week' | 'month' | 'quarter' | 'year'
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              statistics?: components['schemas']['EndUserStatsOutputSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}': {
    /**
     * Get EndUser by heron_id or end_user_id
     * @description Get an end user using its end_user_id or heron_id
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': {
              end_user?: components['schemas']['EndUser']
            }
          }
        }
      }
    }
    /**
     * Delete EndUser by heron_id or end_user_id
     * @description Delete an end user. You must delete associated transactions before doing this.
     */
    delete: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Deleted */
        204: {
          content: never
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/anomalies': {
    /**
     * Get EndUser anomalies
     * @description Get anomalies for given EndUser given a category label or heron id
     */
    get: {
      parameters: {
        query: {
          /** @description Label or Heron ID of category to find anomalies for */
          category_label_or_heron_id: string
        }
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['AnomalySchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/bank_statement_summary': {
    /**
     * Get EndUser bank statement summary
     * @description Get the bank statement summary by month for an end user
     */
    get: {
      parameters: {
        query?: {
          /** @description Determines how to group transactions. It supports calendar month (by_month) or rolling 30-day period (from last txns with rolling_30_days_from_last_txn or from today with rolling_30_days_from_today) */
          grouping?:
            | 'by_month'
            | 'by_data_source_account_heron_id'
            | 'rolling_30_days_from_last_txn'
            | 'rolling_30_days_from_today'
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserBankStatementSummary']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/benchmarks': {
    /**
     * Get EndUser metric benchmarks
     * @description Get the benchmarks for each metric for an end user
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              benchmarks?: components['schemas']['MetricBenchmarksSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/data_source_account_summary': {
    /**
     * Get data source account summary
     * @description Get a list of data sources accounts & their summarised information for a company
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['DataSourceAccountSummaryPublicSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/data_sources': {
    /**
     * Get data sources
     * @description Get a list of data sources for a company
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['EndUserDataSources'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/drivers_licences': {
    /**
     * Get EndUser Drivers Licences
     * @description Get all Drivers Licences for an end user
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['DriversLicenceFrontResponseSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/emails': {
    /**
     * Get EndUser emails
     * @description Get the emails associated with an end user
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserEmailSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/end_user_information': {
    /**
     * Get EndUser information
     * @description Get the company details of an end user including loan information
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserInformationSchema']
          }
        }
      }
    }
    /**
     * Patch EndUser information
     * @description Update the end user information
     */
    patch: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserInformationPatchSchema']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserInformationSchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/enrich': {
    /**
     * Enrich transactions of EndUser
     * @description Enriches transactions of an end user identified by its end_user_id or heron_id. There is an optional `priority` parameter that can be set to `high` to prioritize the enrichment over `normal` (default) priority. High priority enrichment is only enabled for enterprise-level accounts. Please contact support@herondata.io to upgrade your account.
     */
    post: {
      parameters: {
        query?: {
          /** @description Priority for async enrichment */
          priority?: 'normal' | 'high'
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': {
              end_user?: components['schemas']['EndUser']
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/evaluate_rules': {
    /** Evaluate all rules for an end user */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['RuleEvaluationSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/export_spreadsheet': {
    /**
     * Export as a spreadsheet
     * @description Export a spreadsheet for an end user containing key metrics and reports
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': string
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/files': {
    /**
     * Get EndUserFiles
     * @description Get all files for an end user
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserFileSchema'][]
          }
        }
      }
    }
    /**
     * Post EndUserFile
     * @description Upload file to an end user & asynchronously classify its type
     */
    post: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserFileUploadSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: never
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/files/download': {
    /**
     * Download EndUserFiles
     * @description Download all files for an end user as a zip
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/zip': string
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/heron_score': {
    /**
     * Get EndUser Heron Score (beta)
     * @description Get Heron Score for end user with a breakdown of the feature group contributions which resulted in the score. The score is calculated for the day of last transaction. This is a beta feature and is subject to change.
     */
    get: {
      parameters: {
        query?: {
          /** @description Minimum company categorisation confidence to calculate Heron Score */
          min_category_confidence?: number | null
          /** @description Cut-off date to consider transactions to for calculating heron score (inclusive) */
          date?: string | null
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['HeronScoreSchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/industry': {
    /**
     * Get EndUser industry
     * @description Predict the industry of the end user based on its name
     */
    get: {
      parameters: {
        query?: {
          /** @description Maximum number of digits in NAICS code */
          naics_code_max_digits?: number
          /** @description Minimum number of digits in NAICS code */
          naics_code_min_digits?: number
        }
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['IndustrySchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/inscribe': {
    /**
     * Upload Inscribe
     * @description Upload Inscribe JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['InscribeSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/integration_links': {
    /**
     * Get Integration Links
     * @description Get a list of integration links for a specified end user
     */
    get: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              links?: components['schemas']['IntegrationLinkSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/iso_application_form': {
    /**
     * Upload an ISO application PDF for for an end user
     * @description Use this endpoint to upload an ISO application PDF. Once uploaded, the file will be automatically scrubbed asynchronously. You can use the returned iso_application heron_id (prefixed "iso_") to fetch the scrubbing results. Please contact support@herondata.io to enable this endpoint.
     */
    post: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'multipart/form-data': {
            /** Format: binary */
            file?: string
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserFileSchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/iso_applications': {
    /**
     * Get EndUser ISO Applications
     * @description Get all ISO applications for an end user
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['GetIsoApplicationSchema'][]
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/merchant_summary': {
    /**
     * Get EndUser merchant summary
     * @description Get the summary of transactions by merchant for an end user for a given category
     */
    get: {
      parameters: {
        query: {
          category_label_or_heron_id: string[]
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['EndUserMerchantSummary']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/missing_accounts': {
    /**
     * Get Missing Accounts (beta)
     * @description Get a list of possible missing accounts for a given End User. This endpoint is in beta and likely to change.
     */
    get: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              missing_accounts?: components['schemas']['MissingAccountSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/named_dates': {
    /**
     * Get EndUser named dates
     * @description Get the named dates associated with an end user, e.g., date of last transaction
     */
    get: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              named_dates?: components['schemas']['NamedDateSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/ocrolus': {
    /**
     * Upload Ocrolus
     * @description Upload Ocrolus JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        query?: {
          /** @description Skip the check for the number of transactions in the payload */
          skip_num_txns_check?: boolean
        }
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['OcrolusSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/pdfs': {
    /**
     * Get PDFs
     * @description Get list of PDFs for a specified end user
     */
    get: {
      parameters: {
        query?: {
          /** @description Include processed results where applicable per pdf */
          with_processed_results?: boolean
        }
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              pdfs?: components['schemas']['PdfGetSchema'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/pdfs/parse': {
    /**
     * Parse all PDF
     * @description Starts parsing all PDFs for a specified end users. This will not restart any PDFs that are already being parsed
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              pdf_heron_ids?: string[]
              /** @description Unique UUID per request */
              request_id?: string
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/pdfs/v1': {
    /**
     * Upload PDF
     * @description Upload encoded PDF of transactions for a specified end user to translate into Heron Data format
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PdfPostSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              /** @description Heron id of the uploaded pdf file */
              pdf_heron_id?: string
              /** @description Unique UUID per request */
              request_id?: string
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/plaid/assets': {
    /**
     * Upload Plaid assets
     * @description Upload Plaid asset JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PlaidAssetsSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/plaid/transactions': {
    /**
     * Upload Plaid transactions
     * @description Upload Plaid transactions JSON for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PlaidTransactionsSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/profit_and_loss': {
    /**
     * Get EndUser P&L
     * @description Calculates the profit & loss table for an end user, based on the layout defined (if any)
     */
    get: {
      parameters: {
        query?: {
          /** @description If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first */
          dates_ascending?: boolean
          /** @description The latest transaction timestamp date to use */
          to_date?: string | null
          /** @description ISO 4217 currency code for balance */
          currency?: string | null
          /** @description The earliest transaction timestamp date to use */
          from_date?: string | null
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['ProfitAndLossSchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/profit_and_loss_layout': {
    /**
     * Update EndUser P&L layout
     * @description Update the profit and loss layout for the end user, which determines how the profit and loss table is calculated
     */
    put: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['ProfitAndLossLayoutUpdateSchema']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['ProfitAndLossLayoutSchema']
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/scorecard': {
    /**
     * Get EndUser scorecard
     * @description Get scorecard metrics and rule violations for a user
     */
    get: {
      parameters: {
        query?: {
          /** @description Qualitative description for date to calculate scorecard */
          named_date?:
            | 'end_user_created'
            | 'end_user_last_updated'
            | 'last_transaction'
            | 'end_user_last_enriched'
            | 'last_data_source_end_date_or_transaction_timestamp'
            | null
          /** @description Cut-off date to consider transactions to for calculating scorecard (inclusive) */
          date?: string | null
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              metrics?: components['schemas']['Metric'][]
              rule_violations?: components['schemas']['RuleViolation'][]
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/transactions': {
    /**
     * Get end user transactions
     * @description Get all unique transactions for a single end user. Set end user status to "ready" to initiate transaction enrichment, otherwise may contain both enriched and unenriched transactions
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat */
          last_updated_min?: string | null
          /** @description Desired results per page */
          per_page?: number
          /** @description Results page */
          page?: number
        }
        path: {
          end_user_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              _meta?: components['schemas']['Pagination']
              transactions_enriched?: components['schemas']['TransactionEnriched'][]
            }
          }
        }
      }
    }
    /**
     * Create end user transactions (async)
     * @description Upload transactions for a specific end user. Does not include enriching transactions -- set end user status = 'ready' to initiate processing. For synchronous enrichment, please instead use "Enrich transactions (sync). Either timestamp (preferred) or date must be present in the transaction payload."
     */
    post: {
      parameters: {
        path: {
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['EndUserTransactionsPostAsyncSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              /** @description Unique UUID per request */
              request_id?: string
              /** @description The number of transactions loaded */
              transactions_loaded?: number
            }
          }
        }
      }
    }
  }
  '/api/end_users/{end_user_id_or_heron_id}/yodlee': {
    /**
     * Upload Yodlee
     * @description Upload Yodlee JSON files for a specified end user to translate into Heron Data format and add transactions for the end user
     */
    post: {
      parameters: {
        path: {
          /** @description The `end_user_id` or `heron_id` of EndUser to upload */
          end_user_id_or_heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['YodleeSchema']
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
            }
          }
        }
      }
    }
  }
  '/api/end_users/{heron_id}/policy_evaluations': {
    /**
     * Get the policy evaluations for an end user
     * @description Evaluates the user's policies against end user on-the-fly
     */
    get: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['PolicyEvaluationSchema'][]
          }
        }
      }
    }
  }
  '/api/hello_world': {
    /** @description Test endpoint (no authentication) */
    get: {
      responses: {
        /** @description url works */
        200: {
          content: {
            'application/json': {
              hello?: string
            }
          }
        }
      }
    }
  }
  '/api/hello_world/authenticated': {
    /** @description Test authentication */
    get: {
      responses: {
        /** @description Authentication works */
        200: {
          content: {
            'application/json': {
              hello?: string
            }
          }
        }
        /** @description Unauthorized */
        401: {
          content: never
        }
      }
    }
  }
  '/api/integration_links/{item_id}': {
    /**
     * Update an Integration Link
     * @description Allows refreshing the access_token of an existing Integration Link
     */
    put: {
      parameters: {
        path: {
          item_id: string
        }
      }
      /** @description IntegrationLink */
      requestBody: {
        content: {
          'application/json': {
            end_user?: components['schemas']['IntegrationLinkUpdateSchema']
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              integration_link?: components['schemas']['IntegrationLinkSchema']
            }
          }
        }
      }
    }
  }
  '/api/integrations': {
    /**
     * List Integrations
     * @description Get a list of Integrations
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              integrations?: components['schemas']['IntegrationSchema'][]
            }
          }
        }
      }
    }
    /**
     * Create an integration
     * @description Create an integration e.g. with Plaid
     */
    post: {
      requestBody: {
        content: {
          'application/json': {
            integration?: components['schemas']['IntegrationSchema']
          }
        }
      }
      responses: {
        /** @description Created */
        201: {
          content: {
            'application/json': {
              integration?: components['schemas']['IntegrationSchema']
            }
          }
        }
      }
    }
  }
  '/api/integrations/pdfs/{heron_id}': {
    /**
     * Update PDF attributes including status
     * @description Update PDF attributes including status
     */
    put: {
      parameters: {
        path: {
          /** @description heron_id of the pdf */
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PdfPutSchema']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              pdf?: components['schemas']['PdfGetSchema']
              /** @description Unique UUID per request */
              request_id?: string
            }
          }
        }
      }
    }
  }
  '/api/integrations/pdfs/{heron_id}/processed': {
    /**
     * Send patch transactions for a pdf statement
     * @description Send patch transactions processed pdf that will override the extracted transactions in the specified statement
     */
    patch: {
      parameters: {
        path: {
          /** @description heron_id of the pdf */
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['PdfStatementPatchSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': {
              ok?: boolean
            }
          }
        }
      }
    }
  }
  '/api/integrations/{heron_id}': {
    /**
     * Update Integration
     * @description Update an Integration
     */
    put: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      /** @description Integration */
      requestBody: {
        content: {
          'application/json': {
            end_user?: components['schemas']['IntegrationSchema']
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              integration?: components['schemas']['IntegrationSchema']
            }
          }
        }
      }
    }
  }
  '/api/integrations/{heron_id}/links': {
    /**
     * Get IntegrationLinks by Integration
     * @description Get a list of IntegrationLinks for an Integration filtered by end user
     */
    get: {
      parameters: {
        query: {
          /** @description Return only IntegrationLinks for that end user */
          end_user_id_or_heron_id: string
        }
        path: {
          /** @description The Integration's heron_id */
          heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              links?: components['schemas']['IntegrationLinkSchema'][]
            }
          }
        }
      }
    }
    /**
     * Create an integration Link
     * @description Create a Link for an active Integration every time a customer connects their bank. In Plaid, this is a Plaid Link every time a customer connects their bank. For Plaid, call this after exchanging a public token for an Item access_token.
     */
    post: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['IntegrationLinkSchema']
        }
      }
      responses: {
        /** @description Created */
        201: {
          content: {
            'application/json': {
              link?: components['schemas']['IntegrationLinkNewSchema']
            }
          }
        }
      }
    }
    /**
     * (Soft-)Delete an integration link
     * @description Soft-deletes of an integration link (sync is disabled)
     */
    delete: {
      parameters: {
        query: {
          /** @description Delete that end user's IntegrationLinks */
          end_user_id_or_heron_id: string
        }
        path: {
          /** @description The Integration's heron_id */
          heron_id: string
        }
      }
      responses: {
        /** @description OK */
        204: {
          content: never
        }
      }
    }
  }
  '/api/integrations/{heron_id}/links/{link_item_id}/refresh': {
    /**
     * Refresh an IntegrationLink
     * @description Trigger a refresh operation for an IntegrationLink
     */
    post: {
      parameters: {
        path: {
          /** @description The Integration's heron_id */
          heron_id: string
          /** @description The IntegrationLink's item_id */
          link_item_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              link?: components['schemas']['IntegrationLinkSchema']
            }
          }
        }
      }
    }
  }
  '/api/iso_applications/': {
    /**
     * Upload an ISO application PDF for automated scrubbing in under 15 seconds
     * @description Use this endpoint to upload an ISO application PDF. Once uploaded, the file will be automatically scrubbed asynchronously. You can use the returned heron_id (prefixed "iso_") to fetch the scrubbing results from the GET endpoint below. Please contact support@herondata.io to enable this endpoint.
     */
    post: {
      requestBody: {
        content: {
          'multipart/form-data': {
            /** Format: binary */
            file?: string
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              /** @description e.g. iso_ */
              heron_id?: string
              /** @enum {string} */
              status?: 'processing'
            }
          }
        }
      }
    }
  }
  '/api/iso_applications/base64': {
    /**
     * Upload an ISO application PDF for automated scrubbing in under 15 seconds (base64)
     * @description This endpoint is for uploading ISO application PDFs in base64 format.
     */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['PostIsoApplicationBase64Schema']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              /** @description e.g. iso_ */
              heron_id?: string
              /** @enum {string} */
              status?: 'processing'
            }
          }
        }
      }
    }
  }
  '/api/iso_applications/{heron_id}': {
    /**
     * Get the scrubbed results and data validations of an uploaded ISO application by its heron_id (prefixed "iso_")
     * @description Use this endpoint to retrieve the scrubbed results and data validations of an uploaded ISO application PDF once it has finished processing. If processing is still underway, the processing_status field will be "processing".
     */
    get: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['GetIsoApplicationSchema']
          }
        }
      }
    }
  }
  '/api/merchants/extract': {
    /** @description Extract Merchant from a transaction description */
    post: {
      /** @description The bank transaction description as a string */
      requestBody?: {
        content: {
          'application/json': {
            /** @example PAYPAL* AMZN Mktp 198748320 */
            description: string
          }
        }
      }
      responses: {
        /** @description The `merchant` key is not null when we find a positive match to our database. When we could not match a merchant, `merchant` is null and `description_clean` is set to a substring of the original description that our models identified as the relevant entity. */
        200: {
          content: {
            'application/json': {
              /** @example Amzn Mktp */
              description_clean?: string | null
              merchant?: components['schemas']['MerchantExtract']
              payment_processor?: components['schemas']['PaymentProcessor']
            }
          }
        }
      }
    }
  }
  '/api/merchants/groups': {
    /** @description Get Merchant groups */
    get: {
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['MerchantGroup'][]
          }
        }
      }
    }
  }
  '/api/merchants/search': {
    /** @description Search Merchants by name */
    get: {
      parameters: {
        query: {
          /** @description Full or partial name, minimum 3 characters */
          name: string
          /** @description If true, only returns priority merchants */
          only_priority?: boolean
        }
      }
      responses: {
        /** @description A list of up to 5 merchants which match the search term, sorted by descending order of their URL rank and the frequency this merchant has been seen historically. */
        200: {
          content: {
            'application/json': {
              merchants?: components['schemas']['Merchant'][]
            }
          }
        }
      }
    }
  }
  '/api/merchants/{heron_id}': {
    /** @description Get Merchant by heron_id */
    get: {
      parameters: {
        path: {
          /** @description The Merchant `heron_id` */
          heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              merchant?: components['schemas']['Merchant']
            }
          }
        }
      }
    }
  }
  '/api/rules/': {
    /**
     * Get rules
     * @description Read all available rules
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              rules?: components['schemas']['Rule'][]
            }
          }
        }
      }
    }
    /**
     * Create a single rule
     * @description Create a new rule to send a 'end_user.review_required' webhook after processing if rule condition evaluates to true
     */
    post: {
      requestBody: {
        content: {
          'application/json': {
            rule?: components['schemas']['Rule']
          }
        }
      }
      responses: {
        /** @description OK */
        201: {
          content: {
            'application/json': {
              rule?: components['schemas']['Rule']
            }
          }
        }
      }
    }
  }
  '/api/rules/{heron_id}': {
    /**
     * Update rule by heron_id
     * @description Update a rule
     */
    put: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      /** @description Rule */
      requestBody: {
        content: {
          'application/json': {
            rule?: components['schemas']['RuleUpdateSchema']
          }
        }
      }
      responses: {
        /** @description Updated */
        200: {
          content: {
            'application/json': {
              rule?: components['schemas']['Rule']
            }
          }
        }
      }
    }
    /**
     * Delete rule by heron_id
     * @description Delete a rule
     */
    delete: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      responses: {
        /** @description Deleted */
        204: {
          content: {
            'application/json': {
              heron_id?: string
            }
          }
        }
      }
    }
  }
  '/api/transactions': {
    /** @description Get transactions */
    get: {
      parameters: {
        query?: {
          /** @description Filter by regex matching transaction description */
          description_regex?: string
          /** @description Filter by the heron_id of the category that the transaction is annotated with */
          category_heron_id?: string[] | null
          /** @description Filter by earliest transaction timestamp */
          timestamp_date_min?: string
          /** @description Filter by minimum amount of transaction */
          min_amount?: number
          /** @description Filter by whether the transaction has a matching transaction */
          has_matching_transaction?: boolean
          /** @description Filter by whether the transaction is recurring */
          is_recurring?: boolean
          /** @description Filter by merchant heron id */
          merchant_heron_id?: string
          /** @description Filter for transactions whose values were last updated in Heron systems before the specified input value */
          last_updated_max?: string
          /** @description Filter by merchant group id */
          merchant_group_id?: string
          /** @description Filter by latest transaction upload date - when Heron received the transaction */
          created_date_max?: string
          /** @description What to order transactions by */
          order_by?:
            | 'amount_asc'
            | 'amount_desc'
            | 'abs_amount_asc'
            | 'abs_amount_desc'
            | 'description_asc'
            | 'description_desc'
            | 'timestamp_asc'
            | 'timestamp_desc'
            | 'id_asc'
            | 'id_desc'
            | 'confidence_asc'
            | 'confidence_desc'
          /** @description Deprecated; see created_date_ or timestamp_date_ */
          to_date?: string
          /** @description Deprecated; see created_date_ or timestamp_date_ */
          from_date?: string
          /** @description Number of transactions to return per page */
          limit?: number
          /** @description Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates. */
          request_id?: string
          /** @description End user id of transaction */
          end_user_id?: string
          /** @description Filter by transaction code */
          transaction_code?: string
          /** @description Filter by minimum confidence of annotation associated with transaction */
          confidence_min?: number
          /** @description Reference Id of transaction */
          reference_id?: string
          /** @description Filter by whether the transaction has a merchant entity associated with it */
          has_merchant?: boolean | null
          /** @description Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true. */
          include_duplicates?: boolean
          /** @description Heron generated Id of transaction */
          heron_id?: string
          /** @description Filter by maximum amount of transaction */
          max_amount?: number
          /** @description Filter by earliest transaction upload date - when Heron received the transaction */
          created_date_min?: string
          /** @description Filter by keyword match on transaction description; case insensitive */
          description_keyword?: string
          /** @description Page of transaction to return */
          page?: number
          /** @description Filter for transactions whose values were last updated in Heron systems after the specified input value */
          last_updated_min?: string
          /** @description Filter by maximum confidence of annotation associated with transaction */
          confidence_max?: number
          /** @description Filter by latest transaction timestamp */
          timestamp_date_max?: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              _meta?: {
                next_url?: string
                page?: number
                pages?: number
                per_page?: number
                prev_url?: string
              }
              _summary?: {
                returned_transactions?: number
                transactions?: number
              }
              transactions?: components['schemas']['TransactionGetOutput'][]
            }
          }
        }
        /** @description Unauthorized */
        401: {
          content: never
        }
      }
    }
    /**
     * Enrich transactions (sync)
     * @description Enrich and categorize transactions and consume them in a sync response. For business lending and underwriting, please use "Create end user transactions" instead. Please send a maximum of 249 transactions per request.
     */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['TransactionsPostSyncSchema']
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              _summary?: {
                /** @description Unique UUID per request */
                request_id?: string
              }
              /** @description only returned for sync enrichment requests */
              transactions?: components['schemas']['TransactionPostOutput'][]
            }
          }
        }
        /** @description Payload Too Large */
        413: {
          content: {
            'application/json': {
              /** @example 413 */
              code?: number
              /** @example Transaction batch size exceeds max of 2500 */
              description?: string
              /** @example Payload Too Large */
              name?: string
            }
          }
        }
      }
    }
    /** @description Delete transactions */
    delete: {
      parameters: {
        query?: {
          /** @description Request ID of transactions to be deleted */
          request_id?: string | null
          /** @description if true, deletes only transactions that are marked as duplicates */
          only_duplicates?: boolean | null
          /** @description end_user_id of transactions to be deleted */
          end_user_id?: string | null
          /** @description (legacy) Heron ID of transaction to be deleted */
          heron_id?: string | null
          /** @description Heron IDs of transactions to be deleted */
          heron_ids?: string[]
          /** @description Reference IDs of transactions to be deleted */
          reference_ids?: string[]
          /** @description account_id of transactions to be deleted */
          account_id?: string | null
        }
      }
      responses: {
        /** @description OK */
        202: {
          content: {
            'application/json': {
              message?: string
            }
          }
        }
      }
    }
  }
  '/api/transactions/{heron_id}/feedback': {
    /**
     * Create category, merchant feedback
     * @description Provide feedback on a Transaction's Categories and Merchants
     */
    put: {
      parameters: {
        path: {
          /** @description Transaction `heron_id` */
          heron_id: string
        }
      }
      /** @description A partial Transaction object with the suggested Category and/or Merchant. If you provide a `heron_id` for Category or Merchant, you don't need to provide other fields. If you don't know the Merchant `heron_id` nor name, you can just send the `is_correct` boolean. If `heron_id` is provided, we disregard `name` and `label`. If `is_correct` is set to true, we disregard all other Merchant fields. */
      requestBody: {
        content: {
          'application/json': {
            transaction?: components['schemas']['TransactionFeedbackSchema']
          }
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: never
        }
        /** @description Unauthorized */
        401: {
          content: never
        }
      }
    }
  }
  '/api/transactions/{reference_id_or_heron_id}': {
    /** @description Get enriched transaction */
    get: {
      parameters: {
        path: {
          reference_id_or_heron_id: string
        }
      }
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': {
              transaction_enriched?: components['schemas']['TransactionEnriched']
            }
          }
        }
        /** @description Unauthorized */
        401: {
          content: never
        }
      }
    }
  }
  '/api/users/company_overview_layout': {
    /** Get user's company overview layout */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            'application/json': components['schemas']['CompanyOverviewLayoutSchema'][]
          }
        }
      }
    }
    /** Save user's company overview layout */
    put: {
      /** @description The new company overview layout */
      requestBody: {
        content: {
          'application/json': components['schemas']['CompanyOverviewLayoutSchema'][]
        }
      }
      responses: {
        /** @description OK */
        204: {
          content: never
        }
      }
    }
  }
  '/api/users/current/settings': {
    /** Save user's settings */
    put: {
      /** @description The new settings */
      requestBody: {
        content: {
          'application/json': components['schemas']['UserModifiableSettings']
        }
      }
      responses: {
        /** @description OK */
        204: {
          content: never
        }
      }
    }
  }
  '/api/webhooks': {
    /**
     * Get webhooks
     * @description Get webhook
     */
    get: {
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['WebhookSchema'][]
          }
        }
      }
    }
    /**
     * Create a webhook
     * @description Create a webhook
     */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['WebhookSchema']
        }
      }
      responses: {
        /** @description Created */
        201: {
          content: {
            'application/json': components['schemas']['WebhookSchema']
          }
        }
      }
    }
  }
  '/api/webhooks/topics': {
    /**
     * Get webhook topics
     * @description Get webhook topics
     */
    get: {
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': {
              topics?: string[]
            }
          }
        }
      }
    }
  }
  '/api/webhooks/{heron_id}': {
    /**
     * Update a webhook
     * @description Update a webhook
     */
    put: {
      parameters: {
        path: {
          heron_id: string
        }
      }
      requestBody: {
        content: {
          'application/json': components['schemas']['WebhookUpdateSchema']
        }
      }
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['WebhookSchema']
          }
        }
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    AccountBalance: {
      /**
       * @description The closing balance for the day
       * @example 25000.45
       */
      closing_amount: components['schemas']['Money']
      /**
       * @description Currency of the balance
       * @example USD
       */
      currency?: string
      /**
       * Format: date
       * @description Date of the balance
       * @example 2022-01-01
       */
      date?: string
    }
    AccountBalance1: {
      /** @example checking_account_202348 */
      account_id: string
      /**
       * @description The closing balance for this account after the transactions in this batch
       * @example 25000.45
       */
      batch_closing_balance: number
    }
    Address: {
      city?: string
      line_1?: string
      line_2?: string
      state?: string
      zip?: string
    }
    Annotation: {
      annotator?: components['schemas']['AnnotatorPublic']
      category?: components['schemas']['Category1']
      confidence?: number
      model_version?: string
    }
    AnnotatorPublic: {
      /** @enum {string} */
      context: 'sync' | 'async_' | 'manual' | 'undetermined'
      /** @enum {string} */
      priority_type:
        | 'gold_standard'
        | 'client_feedback'
        | 'tagging_ui'
        | 'reconcile'
        | 'heuristic'
        | 'classifier'
        | 'undetermined'
    }
    AnomalyParams: {
      /**
       * @description Label or Heron ID of category to find anomalies for
       * @example Revenue
       */
      category_label_or_heron_id: string
    }
    AnomalySchema: {
      /**
       * @description Converted amount of transaction in currency
       * @example 42.42
       */
      amount?: number
      /**
       * @description Anomaly score 0-1, where 1 is very anomalous, and 0 is not anomalous
       * @example 0.5
       */
      anomaly_score?: number
      /**
       * @description Currency code for amount that transaction was converted to
       * @example USD
       */
      currency?: string
      /**
       * @description Heron ID of the Transaction
       * @example txn_dWAr8wpiTDD5iDMAGrEQpC
       */
      heron_id?: string
      /**
       * @description Customer-provided reference ID for the Transaction
       * @example 1342db06-feb7-4c33-a157-4351d74a98e9
       */
      reference_id?: string
    }
    BankStatementSummaryRow: {
      /** @description Average balance */
      average_balance?: components['schemas']['Money']
      /** @description Ending balance */
      ending_balance?: components['schemas']['Money']
      /** @description MCA debits amount */
      mca_debits?: components['schemas']['Money']
      /** @description Number of days with negative balance */
      negative_balance_days?: number
      /** @description Number of deposit transactions */
      no_deposits?: number
      /** @description Number of overdraft or NSF transactions */
      no_od_nsf?: number
      /** @description Number of revenue transactions */
      no_revenue?: number
      /** @description Number of withdrawals transactions */
      no_withdrawals?: number
      /** @description Non-revenue amount */
      non_revenue?: components['schemas']['Money']
      /** @description Starting balance for the period */
      starting_balance?: components['schemas']['Money']
      /** @description Total deposit amount */
      total_deposits?: components['schemas']['Money']
      /** @description Total revenue amount */
      total_revenue?: components['schemas']['Money']
      /** @description Total withdrawal amount */
      total_withdrawals?: components['schemas']['Money']
    }
    BooleanCheck: {
      /** @default false */
      auto_decline?: boolean
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      value?: boolean
    }
    BulkCategoryFeedback: {
      category?: components['schemas']['CategoryFeedback']
      /**
       * @description your identifier for where the feedback comes from e.g. bob_the_underwriter
       * @default null
       */
      source?: string | null
      /**
       * @description heron id of transaction
       * @example txn_d7Q9zm7iGrJBAXGbSRXSar
       */
      transaction_heron_id: string
    }
    Category: {
      /**
       * @description The analytics group of the category
       * @example revenue
       * @enum {string|null}
       */
      analytics_group?:
        | 'revenue'
        | 'cost_of_goods_sold'
        | 'operational_expenses'
        | 'tax_expenses'
        | 'intra_company'
        | 'debt'
        | 'equity'
        | 'other_income'
        | 'special_items'
        | 'other'
        | null
      /**
       * Format: date-time
       * @description Timestamp for when the category was created
       * @example 2024-05-31T14:08:35.928230
       */
      created?: string
      /**
       * @description Description of the category
       * @example Rent for offices, workspaces or storage facilities
       */
      description?: string
      /**
       * @description Unique ID of the category generated by Heron Data
       * @example ctg_H6nXpo5biHVayEHkrFSVRk
       */
      heron_id?: string
      /**
       * @description The label of the category
       * @example Rent
       */
      label: string
    }
    Category1: {
      /**
       * @description Unique ID of the category generated by Heron Data
       * @example ctg_H6nXpo5biHVayEHkrFSVRk
       */
      heron_id?: string
      /**
       * @description The label of the category
       * @example Rent
       */
      label: string
    }
    CategoryFeedback: {
      /**
       * @description heron_id of the correct category
       * @example ctg_PzxdVHjuEmYYnqM2bUhTek
       */
      heron_id?: string
      /**
       * @description label of the correct category
       * @example Insurance
       */
      label?: string
    }
    Check: {
      attribute_label?: string | null
      /** @default null */
      boolean_check?: components['schemas']['BooleanCheck'] | null
      /** @default null */
      composite_check?: components['schemas']['CompositeCheck'] | null
      /** @default null */
      date_check?: components['schemas']['DateCheck'] | null
      /** @default null */
      date_delta_to_now_check?:
        | components['schemas']['DateDeltaToNowCheck']
        | null
      /** @default null */
      numeric_check?: components['schemas']['NumericCheck'] | null
      /** @default null */
      string_check?: components['schemas']['StringCheck'] | null
    }
    CheckEvaluation: {
      /** @default null */
      attribute_value?: components['schemas']['CompanyAttributeValue'] | null
      /** @default null */
      check?: components['schemas']['Check'] | null
      /** @default null */
      evaluations?: components['schemas']['CheckEvaluation'][] | null
      /** @enum {unknown} */
      result?: 'pass' | 'failed' | 'missing_data'
    }
    CompanyAttributeValue: {
      attribute_label?: string
      value?: string
    }
    CompanyOverviewLayoutSchema: {
      group_name: string
      /** @description A unique id used to reference the group */
      id: string
      widgets: components['schemas']['Widget'][]
    }
    CompositeCheck: {
      /** @default false */
      auto_decline?: boolean
      checks?: components['schemas']['Check'][]
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      /** @enum {unknown} */
      type?: 'AND' | 'OR'
    }
    CrmConfig: {
      /**
       * @description The data source accounts configuration for the CRM integration
       * @default null
       */
      data_source_accounts_config?:
        | components['schemas']['CrmObjectConfig']
        | null
      /**
       * @description The default object id for the CRM integration
       * @default null
       */
      default_id?: components['schemas']['CrmObjectId'] | null
      /**
       * @description The object configurations for the CRM integration
       * @default []
       */
      object_configs?: components['schemas']['CrmObjectConfig'][]
      /**
       * @description The policy evaluation configuration for the CRM integration
       * @default null
       */
      policy_evaluation_config?:
        | components['schemas']['CrmPolicyEvaluationConfig']
        | null
      /**
       * @description Whether to sync files of a given class, including emails
       * @default {}
       */
      sync_file_classes?: {
        [key: string]: boolean
      }
      /**
       * @description A list of value mappings for the CRM integration
       * @default []
       */
      value_mappings?: components['schemas']['CrmValueMapping'][]
    }
    CrmExternalLookupConfig: {
      /** @description External lookup fields are what is used to try match potential new objects to existing objects in the CRM (i.e., for deduplication). Used in the and condition. */
      external_lookup_fields_and?: string[]
      /** @description External lookup fields are what is used to try match potential new objects to existing objects in the CRM (i.e., for deduplication). Used in the or condition. */
      external_lookup_fields_or?: string[]
      /**
       * @description The field name to sort by when doing the external lookup
       * @default CreatedDate
       * @example CreatedDate
       */
      sort_field_name?: string
      /**
       * @description The sort order when doing the external lookup
       * @enum {string}
       */
      sort_order?: 'ASC' | 'DESC'
    }
    CrmFieldMapping: {
      /**
       * @description Override field name to use for external lookup instead of the field_name
       * @default null
       */
      external_lookup_field_name?: string | null
      /**
       * @description The external object whose id we want to use populate the field value
       * @example Account
       */
      external_object_name_for_id?: string | null
      /**
       * @description The name of the field in the CRM
       * @example Name
       */
      field_name: string
      /**
       * @description The label of the company attribute in Heron
       * @example owner_1_first_name
       */
      heron_company_attribute_label?: string | null
      /**
       * @description Any pattern that should be removed from the company attribute value
       * @example pattern
       */
      regex_remove?: string | null
      /**
       * @description Whether the field is required
       * @default false
       * @example true
       */
      required?: boolean
      /**
       * @description A static value for the field
       * @example static value
       */
      static_value?: string | null
      /**
       * @description The value key of the static data
       * @enum {string|null}
       */
      static_value_key?: 'date_today' | null
      /**
       * @description Name of the value mapping to use for the field
       * @example state
       */
      value_mapping_name?: string | null
    }
    CrmIntegrationPatchSchema: {
      /** @description Authentication details for the CRM integration */
      auth?: Record<string, never>
      /** @description The configuration for the CRM integration */
      config?: components['schemas']['CrmConfig']
      heron_id?: string
      /**
       * Format: url
       * @description Base URL of the CRM integration
       * @example https://sandbox.salesforce.com
       */
      instance_url?: string
      /**
       * @description Whether the integration is enabled
       * @default true
       * @example true
       */
      is_enabled?: boolean
      /**
       * @description Whether the integration is live
       * @default true
       * @example true
       */
      is_live?: boolean
      /**
       * @description The CRM provider
       * @enum {string}
       */
      provider?:
        | 'salesforce'
        | 'lendsmart'
        | 'orgmeter'
        | 'centrex'
        | 'lendsaas'
      /** @description A secret key for the CRM integration */
      secret?: string
      [key: string]: unknown
    }
    CrmIntegrationSchema: {
      /** @description Authentication details for the CRM integration */
      auth: Record<string, never>
      /** @description The configuration for the CRM integration */
      config: components['schemas']['CrmConfig']
      heron_id?: string
      /**
       * Format: url
       * @description Base URL of the CRM integration
       * @example https://sandbox.salesforce.com
       */
      instance_url: string
      /**
       * @description Whether the integration is enabled
       * @default true
       * @example true
       */
      is_enabled?: boolean
      /**
       * @description Whether the integration is live
       * @default true
       * @example true
       */
      is_live?: boolean
      /**
       * @description The CRM provider
       * @enum {string}
       */
      provider: 'salesforce' | 'lendsmart' | 'orgmeter' | 'centrex' | 'lendsaas'
      /** @description A secret key for the CRM integration */
      secret: string
      [key: string]: unknown
    }
    CrmObjectConfig: {
      /**
       * @description Human-readable description of the object
       * @example A company or person
       */
      description?: string | null
      /**
       * @description Configuration for external lookup
       * @default null
       */
      external_lookup_config?:
        | components['schemas']['CrmExternalLookupConfig']
        | null
      /**
       * @description The exact name of the object in the CRM
       * @example Account
       */
      external_name: string
      /** @description Mapping for Heron fields to object fields in CRM */
      field_mappings?: components['schemas']['CrmFieldMapping'][]
      /**
       * @description Whether the object is optional. Optional means that if object fails it will not stop execution of CRM sync
       * @default false
       */
      is_optional?: boolean
      /**
       * @description key should be unique among objects within an integration
       * @example Account
       */
      key: string
      /** @description List of object ids that new object needs */
      required_ids?: components['schemas']['CrmObjectId'][]
      /** @description Stores static data used by the integration, for example status fields */
      static_data?: components['schemas']['CrmStaticData'][]
    }
    CrmObjectId: {
      /**
       * @description An alias for the object in the CRM
       * @default null
       * @example Company
       */
      alias?: string | null
      /**
       * @description The exact name of the object in the CRM
       * @example Account
       */
      external_name: string
    }
    CrmPolicyEvaluationConfig: {
      /**
       * @description The object to write policy evaluation results to
       * @example Opportunity
       */
      external_object_name: string
      /**
       * @description The field to write policy evaluation failure reason to
       * @example Failure_Reason__c
       */
      failure_reason_external_name?: string
      /**
       * @description The field to write policy evaluation results
       * @example Submission_Result_from_Heron__c
       */
      result_external_name?: string
    }
    CrmStaticData: {
      /**
       * @description The key of the static data
       * @example status
       */
      key: string
      /**
       * @description The value of the static data
       * @example active
       */
      value: unknown
    }
    CrmValueMapping: {
      /**
       * @description A human-readable description of the value mapping
       * @example The status of the company
       */
      description?: string | null
      /**
       * @description The mapping of values
       * @example {
       *   "CA": "California",
       *   "NY": "New York"
       * }
       */
      mapping: {
        [key: string]: string
      }
      /**
       * @description The name of the value mapping
       * @example Status
       */
      name: string
    }
    DataSource: {
      /**
       * @description Status of the data source entity, where applicable (e.g. pdfs, integration links)
       * @example new
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
        | 'unknown'
      /**
       * @description Data source type
       * @example pdf
       * @enum {string}
       */
      type:
        | 'api'
        | 'csv'
        | 'pdf'
        | 'integration_link'
        | 'legacy'
        | 'legacy_pdf'
        | 'legacy_integration_link'
    }
    DataSourceAccount: {
      /**
       * @description Unique account id associated with the data source account
       * @example 202348
       */
      account_id?: string
      /**
       * @description For pdf bank statement account sources, where the value is between 0 and 1000, with 1000 being the most anomalous
       * @example 200
       */
      anomaly_score?: number
      /**
       * @description List of balances associated with the account
       * @example [
       *   {
       *     "closing_amount": 25000.45,
       *     "currency": "USD",
       *     "date": "2022-01-01"
       *   }
       * ]
       */
      balances?: components['schemas']['AccountBalance'][]
      /**
       * @description Currency of the account
       * @example USD
       */
      currency?: string
      /**
       * Format: date
       * @description End date of the account
       * @example 2022-01-31
       */
      end_date?: string
      /**
       * @description Unique ID for data source generated by Heron
       * @example dso_2RKyxRjQ52y7UVZpUjChJk
       */
      heron_id?: string
      /**
       * @description Name of the institution
       * @example Chase
       */
      institution_name?: string
      /**
       * @description Whether or not the account is enabled. If disabled, hides related transactions from analytics
       * @example true
       */
      is_enabled: boolean
      /**
       * Format: date
       * @description Latest date of transactions associated with the data source account
       * @example 2022-01-31
       */
      max_date?: string
      /**
       * Format: date
       * @description Earliest date of transactions associated with the data source account
       * @example 2022-01-01
       */
      min_date?: string
      /**
       * @description Name of the account
       * @example Checking Account
       */
      name?: string
      /**
       * @description Number of transactions associated with the data source account
       * @example 120
       */
      num_transactions?: number
      /**
       * @description Number of the account
       * @example 123456789
       */
      number?: string
      /**
       * @description Name of the account owner
       * @example John Doe
       */
      owner_name?: string
      /**
       * @description This is the account ID provided as part of the transaction
       * @example account-202348
       */
      reference_id?: string
      /**
       * Format: date
       * @description Start date of the account
       * @example 2022-01-01
       */
      start_date?: string
      /**
       * @description For pdf bank statements, represents whether all transactions extracted match the balances extracted
       * @example true
       */
      transactions_match_balances?: boolean
      /**
       * @description Type of the account
       * @example Checking
       */
      type?: string
    }
    DataSourceAccountSummary: {
      account?: components['schemas']['EndUserDataSourceAccount']
      summary?: components['schemas']['BankStatementSummaryRow'] | null
    }
    DataSourceAccountSummaryPublicSchema: {
      data_source_account_summaries?: components['schemas']['DataSourceAccountSummary'][]
      end_user?: components['schemas']['EndUser1']
    }
    DataSourceMetadata: {
      /**
       * @description Currency associated with the data source entity, where applicable (e.g. pdfs)
       * @example USD
       */
      currency?: string
      /**
       * @description Name of the file uploaded, where applicable (e.g. pdfs)
       * @example 202348_JAN_2022.pdf
       */
      filename?: string
      /**
       * @description Unique Heron ID associated with an integration
       * @example itg_SaHAq6XB52EeYMxVJUKwhM
       */
      integration_heron_id?: string
      /**
       * @description Unique item id associated with integration link data sources
       * @example Ed6bjNrDLJfGvZWwnkQlfxwoNz54B5C97ejBr
       */
      integration_item_id?: string
      /**
       * Format: date-time
       * @description Last successful sync date associated with integration link data sources
       * @example 2024-05-31T14:08:36.808199
       */
      last_successful_sync?: string
      /**
       * @description Notes associated with the data source entity, where applicable (e.g. pdfs)
       * @example error with processing, 52 invalid transaction(s) extracted from statement
       */
      notes?: string
      /**
       * @description Parsing version associated with the data source entity, where applicable (e.g. pdfs)
       * @example 1.0.0
       */
      parsing_version?: string
      /**
       * @description Sub type of the data source entity, where applicable (e.g. integration links)
       * @example transaction
       */
      sub_type?: string
    }
    DateCheck: {
      /** @default false */
      auto_decline?: boolean
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      /** @enum {unknown} */
      type?:
        | 'equal'
        | 'not_equal'
        | 'before'
        | 'before_or_on'
        | 'after'
        | 'after_or_on'
      /** Format: date */
      value?: string
    }
    DateDeltaToNowCheck: {
      /** @default false */
      auto_decline?: boolean
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      /** @enum {unknown} */
      type?: 'greater_than' | 'less_than'
      /** @default null */
      value?: unknown
    }
    DeleteTransactionParams: {
      /**
       * @description account_id of transactions to be deleted
       * @default null
       */
      account_id?: string | null
      /**
       * @description end_user_id of transactions to be deleted
       * @default null
       */
      end_user_id?: string | null
      /**
       * @description (legacy) Heron ID of transaction to be deleted
       * @default null
       * @example txn_Gpm5DgmgQbrTzXKpDE3YjH
       */
      heron_id?: string | null
      /**
       * @description Heron IDs of transactions to be deleted
       * @default []
       */
      heron_ids?: string[]
      /**
       * @description if true, deletes only transactions that are marked as duplicates
       * @default null
       */
      only_duplicates?: boolean | null
      /**
       * @description Reference IDs of transactions to be deleted
       * @default []
       */
      reference_ids?: string[]
      /**
       * @description Request ID of transactions to be deleted
       * @default null
       */
      request_id?: string | null
    }
    DriversLicenceFrontResponseSchema: {
      address_city?: string
      address_line_1?: string
      /** @enum {string} */
      address_state?:
        | 'AK'
        | 'AL'
        | 'AR'
        | 'AZ'
        | 'CA'
        | 'CO'
        | 'CT'
        | 'DC'
        | 'DE'
        | 'FL'
        | 'GA'
        | 'HI'
        | 'IA'
        | 'ID'
        | 'IL'
        | 'IN'
        | 'KS'
        | 'KY'
        | 'LA'
        | 'MA'
        | 'MD'
        | 'ME'
        | 'MI'
        | 'MN'
        | 'MO'
        | 'MS'
        | 'MT'
        | 'NC'
        | 'ND'
        | 'NE'
        | 'NH'
        | 'NJ'
        | 'NM'
        | 'NV'
        | 'NY'
        | 'OH'
        | 'OK'
        | 'OR'
        | 'PA'
        | 'RI'
        | 'SC'
        | 'SD'
        | 'TN'
        | 'TX'
        | 'UT'
        | 'VA'
        | 'VT'
        | 'WA'
        | 'WI'
        | 'WV'
        | 'WY'
        | 'PR'
      address_zip?: string
      /** Format: date */
      date_of_birth?: string
      document_number?: string
      /** Format: date */
      expiration_date?: string
      first_name?: string
      /** Format: date */
      issuing_date?: string
      /** @enum {string} */
      issuing_state?:
        | 'AK'
        | 'AL'
        | 'AR'
        | 'AZ'
        | 'CA'
        | 'CO'
        | 'CT'
        | 'DC'
        | 'DE'
        | 'FL'
        | 'GA'
        | 'HI'
        | 'IA'
        | 'ID'
        | 'IL'
        | 'IN'
        | 'KS'
        | 'KY'
        | 'LA'
        | 'MA'
        | 'MD'
        | 'ME'
        | 'MI'
        | 'MN'
        | 'MO'
        | 'MS'
        | 'MT'
        | 'NC'
        | 'ND'
        | 'NE'
        | 'NH'
        | 'NJ'
        | 'NM'
        | 'NV'
        | 'NY'
        | 'OH'
        | 'OK'
        | 'OR'
        | 'PA'
        | 'RI'
        | 'SC'
        | 'SD'
        | 'TN'
        | 'TX'
        | 'UT'
        | 'VA'
        | 'VT'
        | 'WA'
        | 'WI'
        | 'WV'
        | 'WY'
        | 'PR'
      last_name?: string
      middle_name?: string
    }
    EmailTemplatePatchSchema: {
      /** @description Unique identifier for the email template */
      heron_id?: string
      /** @description The body of the email to send. */
      html_body?: string
      /** @description Unique name of the email template. Used to match which email template to send. Only alphanumeric characters, underscores, and dashes are allowed. */
      name?: string
      /**
       * Format: email
       * @description The email address to send the email to
       * @default null
       */
      to_address?: string | null
      [key: string]: unknown
    }
    EmailTemplateSchema: {
      /** @description Unique identifier for the email template */
      heron_id?: string
      /** @description The body of the email to send. */
      html_body: string
      /** @description Unique name of the email template. Used to match which email template to send. Only alphanumeric characters, underscores, and dashes are allowed. */
      name: string
      /**
       * Format: email
       * @description The email address to send the email to
       * @default null
       */
      to_address?: string | null
      [key: string]: unknown
    }
    EndUser: {
      /**
       * @description Aggregated confidence for the end user across all transactions; between 0 and 1
       * @example 0.42
       */
      confidence?: number
      /**
       * Format: date-time
       * @description When the end user was created in Heron system
       * @example 2024-04-19T14:08:37.080630
       */
      created?: string
      /** @description List of scorecard metrics */
      criteria?: readonly components['schemas']['MetricOutput'][]
      /** @description List of data source summaries for the end user */
      data_sources?: readonly components['schemas']['DataSource'][]
      /**
       * @description id defined by user; links to the end_user_id for transactions
       * @example 4457fb08-db5e-4251-9f9b-eda6bc526a9a
       */
      end_user_id: string
      /**
       * @description Unique id for end user generated by Heron
       * @example eus_2fTTyqtpPR8r2mvfBzkehg
       */
      heron_id?: string
      /**
       * @description Whether the end user is part of a lending portfolio
       * @example true
       */
      is_portfolio?: boolean
      /**
       * Format: date-time
       * @description When the end user was last successfully processed in Heron system
       * @example 2024-05-31T14:08:37.080944
       */
      last_processed_at?: string
      /**
       * Format: date-time
       * @description When the end user was last updated in Heron system
       * @example 2024-05-31T14:08:37.080675
       */
      last_updated?: string
      /**
       * @description Name of end user; may help to improve categorisation accuracy
       * @example Company Name Inc.
       */
      name?: string | null
      profit_and_loss_layout?: unknown
      /**
       * @description Status of end user; 'ready' triggers async processing, 'review_requested' triggers manual review request
       * @example ready
       * @enum {string}
       */
      status?:
        | 'new'
        | 'ready'
        | 'processed'
        | 'reviewed'
        | 'review_requested'
        | 'failed'
    }
    EndUser1: {
      /**
       * @description id defined by user; links to the end_user_id for transactions
       * @example 4457fb08-db5e-4251-9f9b-eda6bc526a9a
       */
      end_user_id: string
      /**
       * @description Unique id for end user generated by Heron
       * @example eus_2fTTyqtpPR8r2mvfBzkehg
       */
      heron_id?: string
      /**
       * @description Name of end user; may help to improve categorisation accuracy
       * @example Company Name Inc.
       */
      name?: string | null
    }
    EndUser2: {
      /**
       * @description Unique id for end user generated by Heron
       * @example eus_2fTTyqtpPR8r2mvfBzkehg
       */
      heron_id?: string
    }
    EndUserAccountBalance: {
      /** @description Account associated with balance */
      account_id?: string
      account_info?: components['schemas']['EndUserAccountInfo']
      /** @description Balance amount */
      balance?: number
      /** @description Converted balance amount in target currency */
      balance_converted?: number
      /**
       * @description ISO 4217 currency code for balance
       * @example USD
       */
      currency?: string | null
      /**
       * @description Conversion currency code. ISO 4217 currency code for balance
       * @example USD
       */
      currency_converted?: string | null
      /** @description Whether the balance has been imputed using forward fill */
      is_computed?: boolean
      /** @description Whether the date is the latest non-imputed balance for the account */
      is_latest?: boolean
      /**
       * Format: date-time
       * @description Timestamp of the latest transaction
       */
      timestamp?: string
    }
    EndUserAccountBalanceForecast: {
      account_id?: string
      balances?: components['schemas']['EndUserBalanceForecast'][]
      currency?: string
    }
    EndUserAccountInfo: {
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description Name of the institution
       * @example Chase
       */
      institution_name?: string
      /**
       * @description Name of the account
       * @example Checking Account
       */
      name?: string
      /**
       * @description Number of the account
       * @example 123456789
       */
      number?: string
      /**
       * @description Name of the account owner
       * @example John Doe
       */
      owner_name?: string
      /**
       * @description Type of the account
       * @example Checking
       */
      type?: string
    }
    EndUserBalanceForecast: {
      /**
       * @description Forecast date at specified date granularity
       * @example 2024-05-31
       */
      date?: string
      /**
       * @description Predicted converted balance
       * @example 42.42
       */
      predicted?: number
      /**
       * @description Predict amount lower bound
       * @example 4.24
       */
      predicted_lower?: number
      /**
       * @description Predicted amount upper bound
       * @example 420.42
       */
      predicted_upper?: number
    }
    EndUserBalanceInputParams: {
      /**
       * Format: date
       * @description Filter for transactions with date earlier than the input value (inclusive). It has precedence over timestamp_max
       * @default null
       * @example 2024-05-30
       */
      date_max?: string | null
      /**
       * Format: date
       * @description Filter for transactions with timestamp after the input value (inclusive). It has precedence over timestamp_min
       * @default null
       * @example 2024-05-31
       */
      date_min?: string | null
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required
       * @default null
       * @example eus_VWcWaUwYsYnvfEEg25wc9N
       */
      end_user_heron_id?: string | null
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required
       * @default null
       * @example your_end_user_id
       */
      end_user_id?: string | null
      /**
       * @description If true, forecasts the balances of each account
       * @default false
       */
      include_forecast?: boolean
      /**
       * Format: date-time
       * @description Deprecated (use date_max instead). Filter for transactions with timestamp earlier than the input value
       * @default null
       * @example 2024-05-30T14:08:36.315731
       */
      timestamp_max?: string | null
      /**
       * Format: date-time
       * @description Deprecated (use date_min instead). Filter for transactions with timestamp after the input value
       * @default null
       * @example 2024-05-31T14:08:36.315666
       */
      timestamp_min?: string | null
      /**
       * @description ISO 4217 currency code to convert to
       * @example USD
       * @enum {string|null}
       */
      to_currency?: 'GBP' | 'USD' | 'EUR' | null
    }
    EndUserBalanceOutputSchema: {
      daily_balances?: components['schemas']['EndUserDailyBalance'][]
      forecasted?: components['schemas']['EndUserAccountBalanceForecast'][]
      summary?: components['schemas']['EndUserDailyBalance']
    }
    EndUserBankStatementSummary: {
      average?: components['schemas']['BankStatementSummaryRow']
      /** @description Summary of bank statement by data source account. Keys are heron ids of the data source account */
      by_data_source_account_heron_id?: {
        [key: string]: components['schemas']['BankStatementSummaryRow'] | null
      }
      /** @description Summary of bank statement by month (only populated when grouping is calendar_month)) */
      by_month?: {
        [key: string]: components['schemas']['BankStatementSummaryRow'] | null
      }
      /** @description Describes how the report was grouped. It supports either by calendar month or rolling 30-day period */
      grouping: string
      /** @description Summary of bank statement by rolling 30 days (only populated when grouping is rolling_30_days). Keys are the start date of the 30-day period using latest transaction date date as the end date */
      rolling_30_days_from_last_txn?: {
        [key: string]: components['schemas']['BankStatementSummaryRow'] | null
      }
      /** @description Summary of bank statement by rolling 30 days (only populated when grouping is rolling_30_days_from_today). Keys are the start date of the 30-day period using today as the end date */
      rolling_30_days_from_today?: {
        [key: string]: components['schemas']['BankStatementSummaryRow'] | null
      }
      total?: components['schemas']['BankStatementSummaryRow']
    }
    EndUserBankStatementSummaryParams: {
      /**
       * @description Determines how to group transactions. It supports calendar month (by_month) or rolling 30-day period (from last txns with rolling_30_days_from_last_txn or from today with rolling_30_days_from_today)
       * @default by_month
       * @enum {string}
       */
      grouping?:
        | 'by_month'
        | 'by_data_source_account_heron_id'
        | 'rolling_30_days_from_last_txn'
        | 'rolling_30_days_from_today'
    }
    EndUserDailyBalance: {
      accounts?: components['schemas']['EndUserAccountBalance'][]
      accounts_not_converted?: components['schemas']['EndUserAccountBalance'][]
      /** @description Balance amount */
      balance?: number
      /**
       * @description ISO 4217 currency code for balance
       * @example USD
       */
      currency?: string | null
      /**
       * Format: date
       * @description Date of balance
       */
      date?: string
    }
    EndUserDataSource: {
      /**
       * Format: date-time
       * @description When the data source was created in Heron system
       * @example 2024-04-19T14:08:36.808759
       */
      created: string
      /**
       * @description List of data source accounts associated with the data source
       * @example [
       *   {
       *     "account_id": "202348",
       *     "anomaly_score": 200,
       *     "enabled": true,
       *     "max_date": "2022-01-31",
       *     "min_date": "2022-01-01",
       *     "num_transactions": 120,
       *     "transactions_match_balances": true
       *   }
       * ]
       */
      data_source_accounts: components['schemas']['DataSourceAccount'][]
      /**
       * @description Unique ID for data source generated by Heron
       * @example dso_8LdDYA4K8U7zA9he7BDdRX
       */
      heron_id: string
      /**
       * @description Whether or not the data source is enabled. If disabled, hides related transactions from analytics
       * @default true
       * @example true
       */
      is_enabled?: boolean
      /**
       * Format: date-time
       * @description When the data source was last updated in Heron system
       * @example 2024-05-31T14:08:36.808793
       */
      last_updated: string
      /**
       * @description Metadata associated with the data source
       * @example {
       *   "filename": "202348_JAN_2022.pdf",
       *   "status": "processed"
       * }
       */
      metadata?: components['schemas']['DataSourceMetadata']
      /**
       * @description Unique ID to identify the data source
       * @example pdf_82WHsJQMHtJjZRkvP4LXkt
       */
      reference_id: string
      /**
       * @description Status of the data source entity, where applicable (e.g. pdfs, integration links)
       * @example new
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
        | 'unknown'
      /**
       * @description Data source type
       * @example pdf
       * @enum {string}
       */
      type:
        | 'api'
        | 'csv'
        | 'pdf'
        | 'integration_link'
        | 'legacy'
        | 'legacy_pdf'
        | 'legacy_integration_link'
    }
    EndUserDataSourceAccount: {
      /**
       * @description Unique account id associated with the data source account
       * @example 202348
       */
      account_id?: string
      /**
       * @description For pdf bank statement account sources, where the value is between 0 and 1000, with 1000 being the most anomalous
       * @example 200
       */
      anomaly_score?: number
      /**
       * @description List of balances associated with the account
       * @example [
       *   {
       *     "closing_amount": 25000.45,
       *     "currency": "USD",
       *     "date": "2022-01-01"
       *   }
       * ]
       */
      balances?: components['schemas']['AccountBalance'][]
      /**
       * @description Currency of the account
       * @example USD
       */
      currency?: string
      /**
       * Format: date
       * @description End date of the account
       * @example 2022-01-31
       */
      end_date?: string
      /**
       * @description Unique ID for data source generated by Heron
       * @example dso_2RKyxRjQ52y7UVZpUjChJk
       */
      heron_id?: string
      /**
       * @description Name of the institution
       * @example Chase
       */
      institution_name?: string
      /**
       * @description Whether or not the account is enabled. If disabled, hides related transactions from analytics
       * @example true
       */
      is_enabled: boolean
      /**
       * Format: date
       * @description Latest date of transactions associated with the data source account
       * @example 2022-01-31
       */
      max_date?: string
      /**
       * Format: date
       * @description Earliest date of transactions associated with the data source account
       * @example 2022-01-01
       */
      min_date?: string
      /**
       * @description Name of the account
       * @example Checking Account
       */
      name?: string
      /**
       * @description Number of transactions associated with the data source account
       * @example 120
       */
      num_transactions?: number
      /**
       * @description Number of the account
       * @example 123456789
       */
      number?: string
      /**
       * @description Name of the account owner
       * @example John Doe
       */
      owner_name?: string
      /**
       * @description This is the account ID provided as part of the transaction
       * @example account-202348
       */
      reference_id?: string
      /**
       * Format: date
       * @description Start date of the account
       * @example 2022-01-01
       */
      start_date?: string
      /**
       * @description For pdf bank statements, represents whether all transactions extracted match the balances extracted
       * @example true
       */
      transactions_match_balances?: boolean
      /**
       * @description Type of the account
       * @example Checking
       */
      type?: string
    }
    EndUserDataSourceAccountUpdateSchema: {
      /**
       * @description Whether or not the account is enabled. If disabled, hides related transactions from analytics
       * @example true
       */
      is_enabled?: boolean
    }
    EndUserDataSourceMetadata: {
      /**
       * @description Currency associated with the data source entity, where applicable (e.g. pdfs)
       * @example USD
       */
      currency?: string
      /**
       * @description Name of the file uploaded, where applicable (e.g. pdfs)
       * @example 202348_JAN_2022.pdf
       */
      filename?: string
      /**
       * @description Unique Heron ID associated with an integration
       * @example itg_SaHAq6XB52EeYMxVJUKwhM
       */
      integration_heron_id?: string
      /**
       * @description Unique item id associated with integration link data sources
       * @example Ed6bjNrDLJfGvZWwnkQlfxwoNz54B5C97ejBr
       */
      integration_item_id?: string
      /**
       * Format: date-time
       * @description Last successful sync date associated with integration link data sources
       * @example 2024-05-31T14:08:36.808199
       */
      last_successful_sync?: string
      /**
       * @description Notes associated with the data source entity, where applicable (e.g. pdfs)
       * @example error with processing, 52 invalid transaction(s) extracted from statement
       */
      notes?: string
      /**
       * @description Parsing version associated with the data source entity, where applicable (e.g. pdfs)
       * @example 1.0.0
       */
      parsing_version?: string
      /**
       * @description Sub type of the data source entity, where applicable (e.g. integration links)
       * @example transaction
       */
      sub_type?: string
    }
    EndUserDataSourceSummaries: {
      /**
       * @description Status of the data source entity, where applicable (e.g. pdfs, integration links)
       * @example new
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
        | 'unknown'
      /**
       * @description Data source type
       * @example pdf
       * @enum {string}
       */
      type:
        | 'api'
        | 'csv'
        | 'pdf'
        | 'integration_link'
        | 'legacy'
        | 'legacy_pdf'
        | 'legacy_integration_link'
    }
    EndUserDataSourceUpdateSchema: {
      /**
       * @description Whether or not the data source is enabled. If disabled, hides related transactions from analytics
       * @default true
       * @example true
       */
      is_enabled?: boolean
    }
    EndUserDataSources: {
      /**
       * Format: date-time
       * @description When the data source was created in Heron system
       * @example 2024-04-19T14:08:36.808759
       */
      created: string
      /**
       * @description List of data source accounts associated with the data source
       * @example [
       *   {
       *     "account_id": "202348",
       *     "anomaly_score": 200,
       *     "enabled": true,
       *     "max_date": "2022-01-31",
       *     "min_date": "2022-01-01",
       *     "num_transactions": 120,
       *     "transactions_match_balances": true
       *   }
       * ]
       */
      data_source_accounts: components['schemas']['EndUserDataSourceAccount'][]
      /**
       * @description Unique ID for data source generated by Heron
       * @example dso_8LdDYA4K8U7zA9he7BDdRX
       */
      heron_id: string
      /**
       * @description Whether or not the data source is enabled. If disabled, hides related transactions from analytics
       * @default true
       * @example true
       */
      is_enabled?: boolean
      /**
       * Format: date-time
       * @description When the data source was last updated in Heron system
       * @example 2024-05-31T14:08:36.808793
       */
      last_updated: string
      /**
       * @description Metadata associated with the data source
       * @example {
       *   "filename": "202348_JAN_2022.pdf",
       *   "status": "processed"
       * }
       */
      metadata?: components['schemas']['EndUserDataSourceMetadata']
      /**
       * @description Unique ID to identify the data source
       * @example pdf_82WHsJQMHtJjZRkvP4LXkt
       */
      reference_id: string
      /**
       * @description Status of the data source entity, where applicable (e.g. pdfs, integration links)
       * @example new
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
        | 'unknown'
      /**
       * @description Data source type
       * @example pdf
       * @enum {string}
       */
      type:
        | 'api'
        | 'csv'
        | 'pdf'
        | 'integration_link'
        | 'legacy'
        | 'legacy_pdf'
        | 'legacy_integration_link'
    }
    EndUserEmail: {
      /** Format: date-time */
      date_sent?: string
      date_sent_string?: string
      from_address?: string
      from_address_domain?: string
      from_name?: string
      html_body?: string
      html_or_text_body?: string
      subject?: string
      text_body?: string
    }
    EndUserEmailSchema: {
      /** Format: date-time */
      created?: string
      /** Format: date-time */
      date_sent?: string
      date_sent_string?: string
      from_address?: string
      from_address_domain?: string
      from_name?: string
      heron_id?: string
      html_body?: string
      html_or_text_body?: string
      integration_id?: number
      subject?: string
      subject_cleaned?: string
      text_body?: string
    }
    EndUserEnrichParams: {
      /**
       * @description Priority for async enrichment
       * @default normal
       * @enum {string}
       */
      priority?: 'normal' | 'high'
    }
    EndUserFileBase64Schema: {
      file_b64?: string
    }
    EndUserFileSchema: {
      /** @example null */
      bank_statement?: components['schemas']['PdfGet'] | null
      /** Format: date-time */
      created?: string
      /** @enum {string} */
      file_class?:
        | 'other'
        | 'iso_application_form'
        | 'bank_statement'
        | 'debt_summary'
        | 'email'
        | 'invoice'
        | 'drivers_licence_front'
      filename?: string
      heron_id?: string
      iso_application?: components['schemas']['GetIsoApplication'] | null
      reference_id?: string
    }
    EndUserFileUpdateSchema: {
      /** @enum {string} */
      file_class?:
        | 'other'
        | 'iso_application_form'
        | 'bank_statement'
        | 'debt_summary'
        | 'email'
        | 'invoice'
        | 'drivers_licence_front'
      reference_id?: string
    }
    EndUserFileUploadSchema: {
      file_base64: string
      filename: string
      reference_id?: string | null
    }
    EndUserForecastInputParams: {
      /**
       * @description Heron ID of category to be forecasted; either category_heron_id or category_label must be present
       * @example ctg_AwHi7vybh7ZfMKcAJwZSuf
       */
      category_heron_id?: string
      /**
       * @description Label of category to be forecasted; either category_heron_id or category_label must be present
       * @example Revenue
       */
      category_label?: string
      /**
       * @description Aggregate results over time, i.e., aggregate by week or by month
       * @default month
       * @example month
       * @enum {string}
       */
      date_granularity?: 'week' | 'month'
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required
       * @default null
       * @example eus_VWcWaUwYsYnvfEEg25wc9N
       */
      end_user_heron_id?: string | null
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required
       * @default null
       * @example your_end_user_id
       */
      end_user_id?: string | null
      /**
       * Format: date
       * @description The earliest transaction timestamp date to use in forecasting
       * @default null
       * @example 2022-01-01
       */
      from_date?: string | null
      /**
       * @description ISO 4217 currency code to convert to
       * @example USD
       * @enum {string|null}
       */
      to_currency?: 'GBP' | 'USD' | 'EUR' | null
      /**
       * Format: date
       * @description The latest transaction timestamp date to use in forecasting
       * @default null
       * @example 2022-01-31
       */
      to_date?: string | null
    }
    EndUserForecastOutputSchema: {
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description Forecast date at specified date granularity
       * @example 2024-05-31
       */
      date?: string
      /**
       * @description Predicted amount
       * @example 42.42
       */
      predicted?: number
      /**
       * @description Predict amount lower bound
       * @example 4.24
       */
      predicted_lower?: number
      /**
       * @description Predicted amount upper bound
       * @example 420.42
       */
      predicted_upper?: number
    }
    EndUserInformationPatchSchema: {
      amount_requested?: number
      annual_revenue?: number
      /** Format: date */
      business_start_date?: string
      company_billing_address?: components['schemas']['Address']
      company_email?: string
      company_legal_business_name?: string
      company_phone_number?: string
      company_physical_address?: components['schemas']['Address']
      company_website?: string
      /** @description Doing business as */
      dba?: string
      federal_tax_id?: string
      industry_type?: string
      loan_purpose?: string
      monthly_revenue?: number
      naics?: string
      owner_1?: components['schemas']['Owner']
      owner_2?: components['schemas']['Owner']
      predicted_industry_probability?: number
      /**
       * @description Source of the end user information
       * @example iso_application_form
       * @enum {string}
       */
      source_type?:
        | 'api'
        | 'iso_application_form'
        | 'heron_industry_classifier'
        | 'rel6_industry_classifier'
      state_of_incorporation?: string
      type_of_business_entity?: string
    }
    EndUserInformationSchema: {
      amount_requested?: number
      annual_revenue?: number
      /** Format: date */
      business_start_date?: string
      company_billing_address?: components['schemas']['Address']
      company_email?: string
      company_legal_business_name?: string
      company_phone_number?: string
      company_physical_address?: components['schemas']['Address']
      company_website?: string
      /** @description Doing business as */
      dba?: string
      federal_tax_id?: string
      industry_type?: string
      loan_purpose?: string
      monthly_revenue?: number
      naics?: string
      owner_1?: components['schemas']['Owner']
      owner_2?: components['schemas']['Owner']
      predicted_industry_probability?: number
      /**
       * @description Source of the end user information
       * @example iso_application_form
       * @enum {string}
       */
      source_type?:
        | 'api'
        | 'iso_application_form'
        | 'heron_industry_classifier'
        | 'rel6_industry_classifier'
      state_of_incorporation?: string
      type_of_business_entity?: string
    }
    EndUserMerchantSummary: {
      by_merchant_summary?: components['schemas']['MerchantSummaryRow'][]
    }
    EndUserMerchantSummaryParams: {
      category_label_or_heron_id: string[]
    }
    EndUserPostParams: {
      /**
       * @description Aggregated confidence for the end user across all transactions; between 0 and 1
       * @example 0.42
       */
      confidence?: number
      /**
       * Format: date-time
       * @description When the end user was created in Heron system
       * @example 2024-04-19T14:08:37.080630
       */
      created?: string
      /** @description List of scorecard metrics */
      criteria?: readonly components['schemas']['MetricOutput'][]
      /** @description List of data source summaries for the end user */
      data_sources?: readonly components['schemas']['DataSource'][]
      /**
       * @description id defined by user; links to the end_user_id for transactions
       * @example 4457fb08-db5e-4251-9f9b-eda6bc526a9a
       */
      end_user_id: string
      /**
       * @description Unique id for end user generated by Heron
       * @example eus_2fTTyqtpPR8r2mvfBzkehg
       */
      heron_id?: string
      /**
       * @description Whether the end user is part of a lending portfolio
       * @example true
       */
      is_portfolio?: boolean
      /**
       * Format: date-time
       * @description When the end user was last successfully processed in Heron system
       * @example 2024-05-31T14:08:37.080944
       */
      last_processed_at?: string
      /**
       * Format: date-time
       * @description When the end user was last updated in Heron system
       * @example 2024-05-31T14:08:37.080675
       */
      last_updated?: string
      /**
       * @description Name of end user; may help to improve categorisation accuracy
       * @example Company Name Inc.
       */
      name?: string | null
      profit_and_loss_layout?: unknown
    }
    EndUserReadEnrichedParams: {
      /**
       * Format: date-time
       * @description Filter for transactions whose values were last updated in Heron systems after the specified input value, isoformat
       * @default null
       * @example 2024-05-31T14:08:37.085406
       */
      last_updated_min?: string | null
      /**
       * @description Results page
       * @default 1
       */
      page?: number
      /**
       * @description Desired results per page
       * @default 100
       */
      per_page?: number
    }
    EndUserReadParams: {
      /**
       * @description Information about the end user that can be used as rules for underwriting
       * @default null
       * @example {
       *   "history_days": {
       *     "value": 40
       *   }
       * }
       */
      criteria?: unknown
      /**
       * @description Filter by ID associated with end_user_id field in transactions
       * @default null
       * @example your_end_user_id
       */
      end_user_id?: string | null
      /**
       * @description Unique ID generated by Heron
       * @default null
       * @example eus_fCYZGMib7Lh2h68p95Wqgn
       */
      heron_id?: string | null
      /**
       * @description Whether the to include data sources for each end user
       * @default false
       * @example true
       */
      include_data_sources?: boolean
      /**
       * @description Whether to include scorecard metrics for each end user (under field criteria)
       * @default false
       * @example true
       */
      include_scorecard_metrics?: boolean
      /**
       * @description Whether the end user is part of a lending portfolio
       * @default null
       * @example true
       */
      is_portfolio?: boolean | null
      /**
       * @description Pagination limit per page
       * @default 1000
       */
      limit?: number
      /**
       * @description Filter by name associated with end user
       * @default null
       * @example your_end_user_name
       */
      name?: string | null
      /**
       * @description Order to return end users by
       * @default last_updated_desc
       * @enum {string}
       */
      order_by?:
        | 'last_updated_desc'
        | 'last_updated_asc'
        | 'created_desc'
        | 'created_asc'
      /**
       * @description Pagination page number
       * @default 1
       */
      page?: number
      /**
       * @description Filter by status of end user
       * @default null
       * @example reviewed
       * @enum {string|null}
       */
      status?:
        | 'new'
        | 'ready'
        | 'processed'
        | 'reviewed'
        | 'review_requested'
        | 'failed'
        | null
    }
    EndUserStatsInputParams: {
      /**
       * @description Filter by specific categories
       * @default []
       * @example [
       *   "ctg_cxVBMJfL2r2UJy4YnSMD5u",
       *   "ctg_TSvwKY37xSL6GDxgLgQjm7"
       * ]
       */
      category_heron_ids?: string[]
      /**
       * @description Aggregate results over time, e.g., by week or by quarter
       * @default month
       * @example month
       * @enum {string}
       */
      date_granularity?: 'day' | 'week' | 'month' | 'quarter' | 'year'
      /**
       * @description Heron-generated id for end user; either end_user_id or end_user_heron_id is required
       * @default null
       * @example eus_VWcWaUwYsYnvfEEg25wc9N
       */
      end_user_heron_id?: string | null
      /**
       * @description end_user_id for statistics; either end_user_id or end_user_heron_id is required
       * @default null
       * @example your_end_user_id
       */
      end_user_id?: string | null
      /**
       * Format: date
       * @description Filter for transactions with timestamp after the input value (as date)
       * @default null
       * @example 2024-05-31
       */
      from_date?: string | null
      /**
       * @description Pivot results by merchant or by category
       * @default category
       * @example category
       * @enum {string}
       */
      group_by?: 'category' | 'merchant'
      /**
       * @description Filter by specific merchants
       * @default []
       * @example [
       *   "mrc_JddNQ5amLyp46LbhBUJejV",
       *   "mrc_VWUJcqb72BmtbCUqEUjXWq"
       * ]
       */
      merchant_heron_ids?: string[]
      /**
       * @description ISO 4217 currency code to convert to
       * @example USD
       * @enum {string|null}
       */
      to_currency?: 'GBP' | 'USD' | 'EUR' | null
      /**
       * Format: date
       * @description Filter for transactions with timestamp before the input value (as date)
       * @default null
       * @example 2024-05-30
       */
      to_date?: string | null
    }
    EndUserStatsOutputMetrics: {
      /** @description Metrics only counting inflows */
      inflow?: components['schemas']['EndUserStatsOutputMetricsInstance']
      /** @description Net metrics */
      net?: components['schemas']['EndUserStatsOutputMetricsInstance']
      /** @description Metrics only counting outflows */
      outflow?: components['schemas']['EndUserStatsOutputMetricsInstance']
    }
    EndUserStatsOutputMetricsInstance: {
      /**
       * @description Aggregate amount of transactions
       * @example 42.42
       */
      amount?: number
      /**
       * @description Average value of transactions
       * @example 1.01
       */
      avg_amount?: number
      /**
       * @description Number of transactions
       * @example 42
       */
      n?: number
    }
    EndUserStatsOutputSchema: {
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description Date, impacted by input date granularity
       * @example 2024-05-31
       */
      dt?: string
      /**
       * @description Heron ID of either merchant or category, depending on what was specified in group_by
       * @example mrc_7XEQNdbSMXbX7Rr5H2QWaF
       */
      heron_id?: string
      /**
       * @description Label of either merchant or category, depending on what was specified in group_by
       * @example Revenue
       */
      label?: string
      metrics?: components['schemas']['EndUserStatsOutputMetrics']
    }
    EndUserTransactionPostAsync: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id: string
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /**
       * @description Category of transaction that you may have received from other sources
       * @example shopping
       */
      categories_default?: string | null
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency: string
      /**
       * Format: date
       * @description The date of the transaction; 'timestamp' field takes priority over 'date'
       * @example 2020-04-27
       */
      date?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id: string
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    EndUserTransactionsPostAsyncSchema: {
      /** @description Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied. */
      balances?: components['schemas']['AccountBalance1'][] | null
      transactions: components['schemas']['EndUserTransactionPostAsync'][]
    }
    GetIsoApplication: {
      /**
       * @description The ISO application's heron_id
       * @example iso_6hBjQT9k6KP2rLCXwjUJff
       */
      heron_id: string
      /**
       * @description The processing status of the file.
       * @example processed
       * @enum {string}
       */
      processing_status: 'new' | 'processing' | 'processed' | 'failed'
    }
    GetIsoApplicationSchema: {
      /** Format: date-time */
      created?: string
      /** @description The heron_id of the end_user associated with the iso application, if available */
      end_user_heron_id?: string
      /** @description The end_user_id of the end_user associated with the iso application, if available */
      end_user_id?: string
      field_validations?: components['schemas']['IsoApplicationFieldValidation'][]
      /**
       * @description The original filename of the ISO application form
       * @example iso_app.pdf
       */
      filename: string
      /**
       * @description The ISO application's heron_id
       * @example iso_6hBjQT9k6KP2rLCXwjUJff
       */
      heron_id: string
      /**
       * @description The processing status of the file.
       * @example processed
       * @enum {string}
       */
      processing_status: 'new' | 'processing' | 'processed' | 'failed'
      /**
       * @description The overall field validation results. 'fully_matched' indicated all field validations have passed. 'review_required' indicates one or more field validations failed.
       * @example fully_matched
       * @enum {string|null}
       */
      quality_status: 'fully_matched' | 'review_required' | null
      /** @description The extracted keys/values from the form, normalised to Heron's field schema. Keys will only be present in results if they are found in the original file. For a full list of fields, see the documentation. */
      result?: {
        [key: string]: components['schemas']['IsoApplicationFieldResult']
      }
      /** @description Original email that contained ISO application, if applicable */
      source_email?: components['schemas']['EndUserEmail'] | null
    }
    GetTransactionParams: {
      /**
       * @description Filter by the heron_id of the category that the transaction is annotated with
       * @default []
       * @example ctg_k3D2QzKXsFP2iZ8S8JJ9aa
       */
      category_heron_id?: string[] | null
      /** @description Filter by maximum confidence of annotation associated with transaction */
      confidence_max?: number
      /** @description Filter by minimum confidence of annotation associated with transaction */
      confidence_min?: number
      /**
       * Format: date
       * @description Filter by latest transaction upload date - when Heron received the transaction
       * @example 2020-04-27
       */
      created_date_max?: string
      /**
       * Format: date
       * @description Filter by earliest transaction upload date - when Heron received the transaction
       * @example 2020-04-27
       */
      created_date_min?: string
      /** @description Filter by keyword match on transaction description; case insensitive */
      description_keyword?: string
      /** @description Filter by regex matching transaction description */
      description_regex?: string
      /** @description End user id of transaction */
      end_user_id?: string
      /**
       * Format: date
       * @description Deprecated; see created_date_ or timestamp_date_
       */
      from_date?: string
      /** @description Filter by whether the transaction has a matching transaction */
      has_matching_transaction?: boolean
      /**
       * @description Filter by whether the transaction has a merchant entity associated with it
       * @default null
       */
      has_merchant?: boolean | null
      /**
       * @description Heron generated Id of transaction
       * @example txn_FNACrsReFPgnVwtroAWyND
       */
      heron_id?: string
      /** @description Whether or not to include duplicate transactions in the response. Defaults to false unless request_id is provided, in which case it defaults to true. */
      include_duplicates?: boolean
      /** @description Filter by whether the transaction is recurring */
      is_recurring?: boolean
      /**
       * Format: date-time
       * @description Filter for transactions whose values were last updated in Heron systems before the specified input value
       * @example 2024-05-31T14:08:36.302403
       */
      last_updated_max?: string
      /**
       * Format: date-time
       * @description Filter for transactions whose values were last updated in Heron systems after the specified input value
       * @example 2024-05-31T14:08:36.302383
       */
      last_updated_min?: string
      /**
       * @description Number of transactions to return per page
       * @default 1000
       */
      limit?: number
      /** @description Filter by maximum amount of transaction */
      max_amount?: number
      /** @description Filter by merchant group id */
      merchant_group_id?: string
      /** @description Filter by merchant heron id */
      merchant_heron_id?: string
      /** @description Filter by minimum amount of transaction */
      min_amount?: number
      /**
       * @description What to order transactions by
       * @default id_asc
       * @enum {string}
       */
      order_by?:
        | 'amount_asc'
        | 'amount_desc'
        | 'abs_amount_asc'
        | 'abs_amount_desc'
        | 'description_asc'
        | 'description_desc'
        | 'timestamp_asc'
        | 'timestamp_desc'
        | 'id_asc'
        | 'id_desc'
        | 'confidence_asc'
        | 'confidence_desc'
      /**
       * @description Page of transaction to return
       * @default 1
       */
      page?: number
      /** @description Reference Id of transaction */
      reference_id?: string
      /** @description Request-Id header returned in the response of POST transactions. Sending this parameter will return all transactions sent in a particular POST request, including any duplicates. */
      request_id?: string
      /**
       * Format: date
       * @description Filter by latest transaction timestamp
       * @example 2020-04-27
       */
      timestamp_date_max?: string
      /**
       * Format: date
       * @description Filter by earliest transaction timestamp
       * @example 2020-04-27
       */
      timestamp_date_min?: string
      /**
       * Format: date
       * @description Deprecated; see created_date_ or timestamp_date_
       */
      to_date?: string
      /** @description Filter by transaction code */
      transaction_code?: string
    }
    HeronScoreFeatureGroupContribution: {
      relative_contribution?: number
      relative_population_avg?: number
    }
    HeronScoreSchema: {
      /** @description A list of data quality issues that may have impacted the score */
      data_quality_issues?: (
        | 'transactions_without_timestamps'
        | 'date_range_too_low'
        | 'confidence_too_low'
        | 'ctg_coverage_too_low'
        | 'data_volume_too_low'
        | 'data_not_fresh'
      )[]
      feature_groups_contributions?: {
        [
          key: string
        ]: components['schemas']['HeronScoreFeatureGroupContribution']
      }
      /**
       * Format: date-time
       * @description When the Heron Score was predicted
       */
      predicted_at?: string
      /**
       * Format: date-time
       * @description When the Heron Score was calculated for; by default the last transaction timestamp for the company
       */
      reference_timestamp?: string
      /** @enum {string} */
      status?: 'not_available' | 'partially_available' | 'available'
      /** @description The Heron Score value */
      value?: number
    }
    IndustryParams: {
      /**
       * @description Maximum number of digits in NAICS code
       * @example 6
       */
      naics_code_max_digits?: number
      /**
       * @description Minimum number of digits in NAICS code
       * @example 2
       */
      naics_code_min_digits?: number
    }
    IndustrySchema: {
      /**
       * @description The text name of the taxonomy value
       * @example Fruit and Vegetable Preserving and Specialty Food Manufacturing
       */
      label?: string
      /**
       * @description The probability that the end user is associated with the industry; we will always return the highest probability industry
       * @example 0.42
       */
      probability?: number
      /**
       * @description Industry classification system used
       * @example naics
       */
      taxonomy?: string
      /**
       * @description The predicted industry for the end user according to taxonomy
       * @example 3114
       */
      taxonomy_value?: string
    }
    InscribeAccount: {
      account_type?: string | null
      beginning_balance?:
        | components['schemas']['InscribeNumberPrediction']
        | null
      ending_balance?: components['schemas']['InscribeNumberPrediction'] | null
      institution_name?: string | null
      number?: components['schemas']['InscribeStringPrediction']
      transactions?: components['schemas']['InscribeTransaction'][]
      transactions_match_balances?: boolean | null
    }
    InscribeNumberPrediction: {
      confidence?: number
      normalized?: number
      raw?: string
    }
    InscribeParsedDetails: {
      bank_accounts?: components['schemas']['InscribeAccount'][]
      name?: components['schemas']['InscribeParsedDetailsName']
    }
    InscribeParsedDetailsName: {
      raw?: string
    }
    InscribeSchema: {
      /** @default null */
      customer_name?: string | null
      parsed_details?: components['schemas']['InscribeParsedDetails']
    }
    InscribeStringPrediction: {
      confidence?: number
      normalized?: string
      raw?: string
    }
    InscribeTransaction: {
      amount?: number
      /** Format: date */
      date?: string
      description?: string
      id?: string
    }
    IntegrationLinkNewSchema: {
      /**
       * @description The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)
       * @example access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
       */
      access_token: string
      /**
       * Format: date-time
       * @description When the integration link was created in Heron system
       * @example 2020-01-01T00:00:00Z
       */
      created?: string
      data_source_heron_id?: string
      /**
       * @description A unique identifier for your end user (customer) generated by you
       * @example 75098e25-66dd-4568-9c25-a2b0a725528e
       */
      end_user_id: string
      /**
       * @description An human readable name for this end user, like the company legal name
       * @example Acme Corp
       */
      end_user_name?: string
      /**
       * @description Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'.
       * @example M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op
       */
      item_id: string
      /**
       * Format: date-time
       * @description When the integration link was last successfully synced
       * @example 2020-01-01T00:00:00Z
       */
      last_successful_sync?: string
      /**
       * Format: date-time
       * @description When the integration link was last updated in Heron system
       * @example 2020-01-01T00:00:00Z
       */
      last_updated?: string
      /**
       * @description The integration link status
       * @example active
       * @enum {string}
       */
      status?:
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
      /**
       * @description A message describing the 'erroring' status of the integration link
       * @example [ITEM_LOGIN_REQUIRED] the login details of this item have changed (credentials, MFA, or required user action) and a user login is required to update this information. use Link's update mode to restore the item to a good state
       */
      status_message?: string
      /**
       * @description The integration link type, inherited from the integration: plaid_assets_report or plaid_integration
       * @example plaid_assets_report
       */
      type?: string
    }
    IntegrationLinkSchema: {
      /**
       * @description The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)
       * @example access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
       */
      access_token: string
      /**
       * Format: date-time
       * @description When the integration link was created in Heron system
       * @example 2020-01-01T00:00:00Z
       */
      created?: string
      /**
       * @description A unique identifier for your end user (customer) generated by you
       * @example 75098e25-66dd-4568-9c25-a2b0a725528e
       */
      end_user_id: string
      /**
       * @description An human readable name for this end user, like the company legal name
       * @example Acme Corp
       */
      end_user_name?: string
      /**
       * @description Unique identifier for each bank connection made by your end users. In Plaid this is the 'item_id'.
       * @example M5eVJqLnv3tbzdngLDp9FL5OlDNxlNhlE55op
       */
      item_id: string
      /**
       * Format: date-time
       * @description When the integration link was last successfully synced
       * @example 2020-01-01T00:00:00Z
       */
      last_successful_sync?: string
      /**
       * Format: date-time
       * @description When the integration link was last updated in Heron system
       * @example 2020-01-01T00:00:00Z
       */
      last_updated?: string
      /**
       * @description The integration link status
       * @example active
       * @enum {string}
       */
      status?:
        | 'pending'
        | 'active'
        | 'syncing'
        | 'erroring'
        | 'sync_disabled'
        | 'deleted_in_plaid'
      /**
       * @description A message describing the 'erroring' status of the integration link
       * @example [ITEM_LOGIN_REQUIRED] the login details of this item have changed (credentials, MFA, or required user action) and a user login is required to update this information. use Link's update mode to restore the item to a good state
       */
      status_message?: string
      /**
       * @description The integration link type, inherited from the integration: plaid_assets_report or plaid_integration
       * @example plaid_assets_report
       */
      type?: string
    }
    IntegrationLinkUpdateSchema: {
      /**
       * @description The generated token that grants access to the bank (this is encrypted in transit and at-rest with a custom key)
       * @example access-sandbox-de3ce8ef-33f8-452c-a685-8671031fc0f6
       */
      access_token: string
    }
    IntegrationSchema: {
      /**
       * Format: url
       * @description Base URL of the API integration. Required for Plaid integration
       * @example https://sandbox.plaid.com
       */
      base_url?: string
      client_auth?: Record<string, never>
      /** @description Client ID for API access (this is encrypted in transit and at-rest with a custom key). Required for Plaid integration */
      client_id?: string
      /** @description Client Secret for API access (this is encrypted in transit and at-rest with a custom key). Required for Plaid integration */
      client_secret?: string
      heron_id?: string
      /**
       * @description A name for your integration
       * @example Plaid Prod
       */
      name: string
      /**
       * @description For integrations with multiple available resources, the specific resource
       * @enum {string}
       */
      resource:
        | 'transaction'
        | 'assets_report'
        | 'end_user_application'
        | 'invoice_factoring_processing'
      /**
       * @description The integration type, a specific provider
       * @enum {string}
       */
      type: 'plaid' | 'ocrolus' | 'truelayer' | 'email' | 'salesforce' | 'rel6'
      /**
       * Format: url
       * @description URL provided by you to which we'll forward all webhooks (optional)
       * @example https://your-server.yourdomain.com/hooks
       */
      webhook_url?: string | null
    }
    IsoApplicationFieldResult: {
      /**
       * @description The field's original name in the source document
       * @example Company Legal Name
       */
      document_field_name: string
      /**
       * @description Whether the value is empty
       * @example false
       */
      is_empty: boolean
      /**
       * @description The value extracted from the document for the current field
       * @example Heron Data Ltd
       */
      value: string
      /**
       * @description OCR confidence of the extracted value
       * @example 0.99
       */
      value_confidence: number | null
    }
    IsoApplicationFieldValidation: {
      failure_reason: string | null
      field_name: string
      /**
       * @example passed
       * @enum {string}
       */
      result: 'passed' | 'failed' | 'not_applicable'
      validation_type: string
    }
    Merchant: {
      categories?: readonly components['schemas']['MerchantCategory'][]
      /** @enum {string|null} */
      group_id?:
        | 'Uber'
        | 'Google'
        | 'Intuit'
        | 'debt.mca_or_rbf'
        | 'debt.non_bank_business'
        | 'debt.equipment_and_auto_leasing'
        | 'debt.mortgage'
        | 'debt.personal_non_mortgage'
        | 'debt.collections'
        | null
      /** @example mrc_UABWqswMJf5qkw57qoKbvD */
      heron_id?: string
      /** Format: url */
      icon_url?: string | null
      is_priority?: boolean
      /** Format: url */
      logo_url?: string | null
      name: string
      /** Format: url */
      url: string
    }
    MerchantCategory: {
      /** @example 7311 */
      code: string
      /**
       * @default null
       * @example Advertising services
       */
      description?: string | null
      /**
       * @default null
       * @example advertising_services
       */
      slug?: string | null
    }
    MerchantExtract: {
      categories?: readonly components['schemas']['MerchantCategory'][]
      /** @default null */
      confidence?: number | null
      group_id?: string
      /** @example mrc_UABWqswMJf5qkw57qoKbvD */
      heron_id?: string
      /** Format: url */
      icon_url?: string
      /** Format: url */
      logo_url?: string
      /**
       * @default null
       * @example Amazon
       */
      name?: string | null
      /**
       * Format: url
       * @default null
       * @example https://www.amazon.com/
       */
      url?: string | null
    }
    MerchantFeedback: {
      /**
       * @description heron_id of the correct merchant
       * @example mrc_ZoZJp2ogjNYE5fRLNZPYAH
       */
      heron_id?: string
      /**
       * @default false
       * @example false
       */
      is_correct?: boolean
      /**
       * @description name of the correct merchant
       * @example Spotify
       */
      name?: string
    }
    MerchantGroup: {
      /** @description Description of merchant group */
      description?: string
      /** @description Unique ID of merchant group */
      id?: string
      /** @description Display name of merchant group */
      name?: string
    }
    MerchantSummaryRow: {
      group?: string | null
      heron_id?: string
      inflow_metrics?: components['schemas']['MerchantSummaryRowMetrics']
      name?: string
      net_metrics?: components['schemas']['MerchantSummaryRowMetrics']
      outflow_metrics?: components['schemas']['MerchantSummaryRowMetrics']
    }
    MerchantSummaryRowMetrics: {
      amount?: components['schemas']['Money']
      count?: number
      duration_days?: number
      estimated_monthly_amount?: components['schemas']['Money'] | null
      /** @enum {string|null} */
      frequency?:
        | 'not_enough_data'
        | 'same_day'
        | 'irregular'
        | 'daily'
        | 'weekly'
        | 'biweekly'
        | 'monthly'
        | 'quarterly'
        | 'annually'
        | null
      max_amount?: components['schemas']['Money']
      /** Format: date-time */
      max_timestamp?: string
      mean_amount?: components['schemas']['Money']
      mean_interval_days?: number | null
      /** @description Deprecated. This field is no longer being populated */
      median_amount?: components['schemas']['Money'] | null
      min_amount?: components['schemas']['Money']
      /** Format: date-time */
      min_timestamp?: string
      /** @description Deprecated. This field is no longer being populated */
      mode_amount?: components['schemas']['Money'] | null
      mode_interval_days?: number | null
      std_dev_amount?: components['schemas']['Money'] | null
    }
    Metric: {
      /**
       * @description Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value
       * @example higher_is_better
       * @enum {string}
       */
      context?: 'higher_is_better' | 'lower_is_better'
      /** @description The ISO currency code for metric, where applicable */
      currency?: string
      /**
       * @description Metric date range
       * @example last_180_days
       * @enum {string}
       */
      date_range?:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      /**
       * @description Description of metric
       * @example The number of unique transactions with a timestamp
       */
      description?: string
      /**
       * @description The type of metric
       * @example data_quality
       * @enum {string}
       */
      group?:
        | 'data_quality'
        | 'processing_quality'
        | 'balance'
        | 'profit_and_loss'
        | 'debt'
        | 'risk_flag'
        | 'forecast'
        | 'heron'
        | 'ml_feature'
      /**
       * @description Metric label, slugified
       * @example unique_transactions
       */
      label?: string
      /**
       * @description either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data
       * @example not_available
       * @enum {string}
       */
      status?: 'available' | 'partially_available' | 'not_available'
      /**
       * @description The unit of measurement for metric
       * @example n
       * @enum {string}
       */
      unit?:
        | 'n'
        | 'day'
        | 'ratio'
        | 'amount'
        | 'weekday'
        | 'array'
        | 'probability'
      /**
       * @description The metric value
       * @example 42.42
       */
      value?: unknown
    }
    MetricBenchmarksSchema: {
      /**
       * @example last_180_days
       * @enum {string}
       */
      date_range?:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      /**
       * @description Metric label, slugified
       * @example unique_transactions
       */
      label?: string
      /**
       * @description The implied percentile based on ranking and sample size
       * @example 0.75
       */
      percentile?: number | null
      /**
       * @description Ranking of metric relative to datapoints. 1 is best
       * @example 22
       */
      rank?: number | null
      /**
       * @description The number of datapoints to compare to
       * @example 42
       */
      sample_size?: number
      /**
       * @description What end users are included in metric comparisons
       * @default user
       * @example user
       * @enum {string}
       */
      scope?: 'user' | 'heron'
    }
    MetricOutput: {
      /**
       * @description Context for how to interpret the metric, e.g., whether a higher value is 'better' than a lower value
       * @example higher_is_better
       * @enum {string}
       */
      context: 'higher_is_better' | 'lower_is_better'
      /** @description The ISO currency code for metric, where applicable */
      currency?: string
      /**
       * @description Metric date range
       * @example last_180_days
       * @enum {string}
       */
      date_range:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      /**
       * @description Description of metric
       * @example The number of unique transactions with a timestamp
       */
      description: string
      /**
       * @description The type of metric
       * @example data_quality
       * @enum {string}
       */
      group:
        | 'data_quality'
        | 'processing_quality'
        | 'balance'
        | 'profit_and_loss'
        | 'debt'
        | 'risk_flag'
        | 'forecast'
        | 'heron'
        | 'ml_feature'
      /**
       * @description Metric label, slugified
       * @example unique_transactions
       */
      label: string
      /**
       * @description either 'calculated' or 'not_available' depending on the requested date range vs. date range of the data
       * @example not_available
       */
      status: string
      /**
       * @description The unit of measurement for metric
       * @example n
       * @enum {string}
       */
      unit:
        | 'n'
        | 'day'
        | 'ratio'
        | 'amount'
        | 'weekday'
        | 'array'
        | 'probability'
      /**
       * @description The metric value
       * @example 42.42
       */
      value: unknown
    }
    MissingAccountSchema: {
      /**
       * @description An account name extracted from the transaction description
       * @example Checking
       */
      account_name?: string
      /**
       * @description An account number extracted from the transaction description
       * @example ****4321
       */
      account_number?: string
      transactions?: components['schemas']['Transaction3'][]
    }
    Money: {
      /**
       * @description The amount of money
       * @example 1234.56
       */
      amount?: number
      /**
       * @description The currency of the money
       * @example USD
       */
      currency?: string
    }
    MoneyThumbOutputSchema: {
      error?: string
      results?: components['schemas']['MoneyThumbStatement'][]
    }
    MoneyThumbStatement: {
      accountNumber?: string | null
      accounttitle?: string | null
      bankName?: string | null
      company?: string | null
      currencycode?: string | null
      endBalance?: number | null
      endBalanceCalc?: number | null
      endDate?: string | null
      fraudscore?: number | null
      isBusiness?: boolean | null
      maxResolution?: number | null
      minResolution?: number | null
      numCredits?: number
      numDebits?: number
      numTransactions?: number
      ocr?: boolean | null
      reconciled?: boolean
      startBalance?: number | null
      startDate?: string | null
      totCredits?: number | null
      totDebits?: number | null
      tpreasons?: unknown[] | null
      transactions?: unknown[] | null
      webReport?: boolean | null
    }
    MoneyThumbStatementSummary: {
      account_number?: string
      account_title?: string
      bank_name?: string
      company?: string
      currency?: string
      end_balance: number
      fraud_reasons?: string[]
      fraud_score?: number
      is_business_account?: boolean
      is_ocr?: boolean
      max_resolution?: number
      min_resolution?: number
      num_credits: number
      num_debits: number
      num_transactions: number
      reconciled: boolean
      start_balance: number
      /** Format: date-time */
      statement_end_date?: string
      /** Format: date-time */
      statement_start_date?: string
      total_credits: number
      total_debits: number
      unreconciled_end_balance?: number
      web_report?: boolean
    }
    MoneyThumbTransactionBounds: {
      page: number
      x_max: number
      x_min: number
      y_max: number
      y_min: number
    }
    NamedDateSchema: {
      /**
       * Format: date
       * @description The date of the NamedDate
       * @example 2024-05-31
       */
      date?: string | null
      /**
       * @description The name of the NamedDate
       * @example last_transaction
       * @enum {string}
       */
      name?:
        | 'end_user_created'
        | 'end_user_last_updated'
        | 'last_transaction'
        | 'end_user_last_enriched'
        | 'last_data_source_end_date_or_transaction_timestamp'
    }
    NumericCheck: {
      /** @default false */
      auto_decline?: boolean
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      /** @enum {unknown} */
      type?:
        | 'equal'
        | 'not_equal'
        | 'greater_than'
        | 'greater_than_or_equal'
        | 'less_than'
        | 'less_than_or_equal'
      value?: string
    }
    OcrolusBankAccount: {
      account_category?: string
      account_number?: string
      alternative_lender_transactions?: components['schemas']['OcrolusTransaction'][]
      daily_balances?: {
        [key: string]: string
      }
      debt_consolidator_txns?: components['schemas']['OcrolusTransaction'][]
      deposits_max_by_month?: {
        [key: string]: components['schemas']['OcrolusTransaction'][] | null
      }
      estimated_expense_txns_list?: components['schemas']['OcrolusTransaction'][]
      estimated_revenue_txns_list?: components['schemas']['OcrolusTransaction'][]
      factor_txns?: components['schemas']['OcrolusTransaction'][]
      holder_country?: string
      insurance_credits?: components['schemas']['OcrolusTransaction'][]
      insurance_debits?: components['schemas']['OcrolusTransaction'][]
      interbank_transactions?: components['schemas']['OcrolusTransaction'][]
      merchant_cash_advance_lender_txns?: components['schemas']['OcrolusTransaction'][]
      non_estimated_revenue_txns_list?: components['schemas']['OcrolusTransaction'][]
      nsf_transactions?: components['schemas']['OcrolusTransaction'][]
      nsf_transactions_paid_or_negative_balance?: components['schemas']['OcrolusTransaction'][]
      nsf_transactions_returned_or_not_paid?: components['schemas']['OcrolusTransaction'][]
      outside_source_deposits?: components['schemas']['OcrolusTransaction'][]
      payroll?: components['schemas']['OcrolusTransaction'][]
      period_balance_mismatches?: components['schemas']['OcrolusTransaction'][]
      ppp_loan_txns?: components['schemas']['OcrolusTransaction'][]
      probable_recurring_txns?: components['schemas']['OcrolusTransaction'][][]
      returned_items?: components['schemas']['OcrolusTransaction'][]
      round_number_txns?: components['schemas']['OcrolusTransaction'][]
      txn_count?: number
      withdrawals?: components['schemas']['OcrolusTransaction'][]
      withdrawals_max_by_month?: {
        [key: string]: components['schemas']['OcrolusTransaction'][] | null
      }
    }
    OcrolusResponse: {
      bank_accounts: components['schemas']['OcrolusBankAccount'][]
      name: string
    }
    OcrolusSchema: {
      response: components['schemas']['OcrolusResponse']
    }
    OcrolusTransaction: {
      amount?: string
      description?: string
      pk?: number
      /** Format: date-time */
      timestamp?: string
      /** Format: date */
      txn_date?: string
    }
    Owner: {
      /**
       * Format: date
       * @example 1990-01-01
       */
      date_of_birth?: string
      email_address?: string
      first_name?: string
      home_address?: components['schemas']['Address']
      home_phone?: string
      last_name?: string
      mobile_phone?: string
      /**
       * @description Percentage of ownership
       * @example 100
       */
      ownership_percentage?: number
      social_security_number?: string
    }
    Pagination: {
      /**
       * Format: url
       * @description the URL of the next page
       */
      next_url?: string | null
      /** @description the number of results returned */
      num_results?: number
      /** @description current page */
      page?: number
      /** @description the max number of results per page */
      per_page?: number
      /**
       * Format: url
       * @description the URL of the last page
       */
      prev_url?: string | null
    }
    PaymentProcessor: {
      /** @example mrc_nRYdGU7nYuevb7qem65cEb */
      heron_id?: string
      /**
       * Format: url
       * @default null
       * @example https://storage.googleapis.com/heron-merchant-assets/icons/mrc_nRYdGU7nYuevb7qem65cEb.svg
       */
      icon_url?: string | null
      /**
       * Format: url
       * @default null
       * @example https://storage.googleapis.com/heron-merchant-assets/logos/mrc_nRYdGU7nYuevb7qem65cEb.svg
       */
      logo_url?: string | null
      /**
       * @default null
       * @example Paypal
       */
      name?: string | null
      /**
       * Format: url
       * @default null
       * @example https://www.paypal.com
       */
      url?: string | null
    }
    PdfGet: {
      /**
       * @description ID generated by Heron Data
       * @example pdf_8Vvp4vmFqpdBv7vzk3AciB
       */
      heron_id?: string
      /**
       * @description Status of PDF
       * @example processed
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
    }
    PdfGetSchema: {
      /**
       * @description Unique ID for account associated with PDF
       * @example checking_account_202348
       */
      account_id?: string
      /**
       * Format: date-time
       * @description Timestamp when PDF was created in Heron system
       * @example 2024-05-31T14:08:37.099278
       */
      created?: string
      /**
       * @description ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs
       * @example USD
       * @enum {string}
       */
      currency?: 'USD' | 'GBP'
      end_user?: components['schemas']['EndUser2']
      /**
       * @description The filename of the PDF
       * @example my-favourite.pdf
       */
      filename?: string
      /**
       * @description ID generated by Heron Data
       * @example pdf_8Vvp4vmFqpdBv7vzk3AciB
       */
      heron_id?: string
      /**
       * Format: date-time
       * @description Timestamp when PDF was last updated in Heron system
       * @example 2024-05-31T14:08:37.099315
       */
      last_updated?: string
      /**
       * @description Notes for the PDF, e.g., failed reason
       * @example failed to send to external OCR provider
       */
      notes?: string
      /** @description Indicates which provider was used to parse this pdf */
      parsing_version?: string
      /**
       * @description An optional field for your unique identifier for the PDF
       * @example my-favourite-pdf
       */
      reference_id?: string
      statements?: components['schemas']['PdfStatement'][]
      /**
       * @description Status of PDF
       * @example processed
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
    }
    PdfPatchStatementSummary: {
      account_number?: string
      bank_name?: string
      company?: string
      currency?: string
      end_balance?: number
      fraud_reasons?: string[]
      fraud_score?: number
      start_balance?: number
      /** Format: date-time */
      statement_end_date?: string
      /** Format: date-time */
      statement_start_date?: string
    }
    PdfPatchTransaction: {
      amount?: number | null
      balance?: number | null
      bounds?: components['schemas']['MoneyThumbTransactionBounds'] | null
      currency?: string | null
      description?: string | null
      ocr_suspect?: boolean | null
      reference_id?: string | null
      /** Format: date-time */
      timestamp?: string | null
      transaction_code?: string | null
    }
    PdfPostSchema: {
      /**
       * @description Unique ID for account associated with PDF
       * @default null
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description ISO 4217 currency code for transactions in account. We currently only support GBP and USD PDFs
       * @default null
       * @example USD
       * @enum {string|null}
       */
      currency?: 'USD' | 'GBP' | null
      /**
       * @description The filename of the PDF
       * @default null
       * @example my-favourite.pdf
       */
      filename?: string | null
      /** @description The base64 encoded string of the PDF file. If using Javascript, this is directly the output of the FileReader.readAsDataURL() output. See https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL for more info */
      pdf_base64: string
      /**
       * @description True if date formats in the statement are US: month/date/year
       * @default null
       */
      read_us_dates?: boolean | null
      /**
       * @description An optional field for your unique identifier for the PDF
       * @default null
       * @example my-favourite-pdf
       */
      reference_id?: string | null
      /**
       * @description True if fraud detection should be enabled for this PDF
       * @default null
       */
      with_fraud?: boolean | null
    }
    PdfPutSchema: {
      /**
       * @description The filename of the PDF
       * @example my-favourite.pdf
       */
      filename?: string
      /** @description If fraud reason */
      fraud_reason?: string | null
      /** @description True if fraud was detected in the PDF */
      is_fraud?: boolean
      /** @description Notes associated with PDF, e.g., rejected reason, failed reason */
      notes?: string
      /**
       * @description An optional field for your unique identifier for the PDF
       * @example my-favourite-pdf
       */
      reference_id?: string
      /**
       * @description Status of PDF
       * @example processed
       * @enum {string}
       */
      status?:
        | 'new'
        | 'parsing'
        | 'parsed'
        | 'processed'
        | 'approved'
        | 'rejected'
        | 'failed'
        | 'transactions_loaded'
    }
    PdfStatement: {
      /** @description True if the statement should be excluded from processing */
      exclude?: boolean
      invalid_transaction_partials?: components['schemas']['PdfPatchTransaction'][]
      summary?: components['schemas']['MoneyThumbStatementSummary']
      transaction_partials?: components['schemas']['PdfTransaction'][]
    }
    PdfStatementPatchSchema: {
      /** @description True if the statement should be excluded from processing */
      exclude?: boolean
      /** @description The index of the statement in the pdf to patch */
      index: number
      summary?: components['schemas']['PdfPatchStatementSummary']
      /** @description The full list of transactions that will be used to override the extracted transactions for the specified statement */
      transactions: components['schemas']['PdfPatchTransaction'][]
    }
    PdfTransaction: {
      amount: number
      balance?: number
      bounds?: components['schemas']['MoneyThumbTransactionBounds'] | null
      currency?: string | null
      description: string
      ocr_suspect?: boolean
      reference_id?: string
      /** Format: date-time */
      timestamp: string
      transaction_code?: string
    }
    PlaidAccount: {
      account_id: string
      balances: components['schemas']['PlaidAccountSnapshotBalance']
      historical_balances: components['schemas']['PlaidAccountBalance'][]
      mask?: string | null
      name?: string | null
      official_name?: string | null
      owners?: components['schemas']['PlaidAccountOwners'][] | null
      subtype?: string | null
      transactions: components['schemas']['PlaidTransaction'][]
      type?: string | null
    }
    PlaidAccountBalance: {
      current?: number
      /** Format: date */
      date?: string
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      iso_currency_code?: string | null
    }
    PlaidAccountOwners: {
      names: string[]
    }
    PlaidAccountSnapshot: {
      account_id?: string
      /** @description Balance information for the account as an object. This is optional, but if not provided, balance calculations will not be performed for individual transactions. */
      balances?: components['schemas']['PlaidAccountSnapshotBalance'] | null
      mask?: string | null
      name?: string
      official_name?: string | null
      subtype?: string
      type?: string
    }
    PlaidAccountSnapshotBalance: {
      available?: number | null
      current?: number | null
      iso_currency_code?: string
      limit?: number | null
    }
    PlaidAssetReport: {
      /** Format: date-time */
      date_generated: string
      days_requested: number
      items: components['schemas']['PlaidAssetReportItem'][]
    }
    PlaidAssetReportItem: {
      accounts: components['schemas']['PlaidAccount'][]
      institution_name: string
    }
    PlaidAssetsSchema: {
      report: components['schemas']['PlaidAssetReport']
    }
    PlaidTransaction: {
      account_id?: string
      amount?: number
      balance?: number
      category?: string | null
      /** Format: date */
      date?: string
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      iso_currency_code?: string | null
      merchant_name?: string | null
      name?: string
      /** @default null */
      pending_transaction_id?: string | null
      /** Format: date-time */
      timestamp?: string
      transaction_code?: string | null
      transaction_id?: string
    }
    PlaidTransactionsSchema: {
      accounts?: components['schemas']['PlaidAccountSnapshot'][]
      transactions: components['schemas']['PlaidTransaction'][]
    }
    PnlMetric: {
      /** @description Amount weighted confidence for the metric, based on the confidene associated with category labels of related transactions */
      confidence?: number | null
      /** @description Indentation level for formatting purposes */
      indent?: number
      /** @description Whether the metric is a ratio or not */
      is_ratio?: boolean
      /** @description Name of metric */
      name?: string
      /** @description The list of values ordered according to date */
      values?: (number | null)[]
    }
    PnlMetricFractionTerm: {
      /** @description List of category labels associated with the fraction term */
      labels?: string[]
      /** @description List of section slugs associated with the fraction term */
      sections?: string[]
    }
    PnlMetricLayout: {
      /** @description If the metric is a ratio, the denominator of the metric; otherwise this is just 1 */
      denominator?: components['schemas']['PnlMetricFractionTerm'] | null
      /** @description Indentation level for formatting purposes */
      indent?: number
      /** @description If true, calculates the % growth in the metric over time */
      is_growth?: boolean
      /** @description Name of metric */
      name?: string
      /** @description The numerator of the metric */
      numerator?: components['schemas']['PnlMetricFractionTerm']
    }
    PnlSection: {
      /** @description Ordered list of P&L metrics */
      metrics?: components['schemas']['PnlMetric'][]
      /** @description Name of P&L section, e.g,. Operating Expenses */
      name?: string
      /** @description Slugified version of the name */
      slug?: string
    }
    PnlSectionLayout: {
      /** @description The category labels associated with the section */
      labels?: string[]
      /** @description An ordered list of metric layouts */
      metrics?: components['schemas']['PnlMetricLayout'][]
      /** @description Name of P&L section, e.g,. Operating Expenses */
      name?: string
      /** @description Slugified version of the name */
      slug?: string
    }
    Policy: {
      checks?: components['schemas']['Check'][]
      heron_id: string
      name: string
    }
    PolicyEvaluationSchema: {
      failed_checks?: components['schemas']['CheckEvaluation'][]
      missing_data_checks?: components['schemas']['CheckEvaluation'][]
      passed_checks?: components['schemas']['CheckEvaluation'][]
      policy?: components['schemas']['Policy']
      /** @enum {unknown} */
      result?: 'passed' | 'failed' | 'missing_data'
    }
    PostIsoApplicationBase64Schema: {
      /**
       * @description The base64 encoded string of the file
       * @example base64_encoded_string
       */
      file_base64: string
      /**
       * @description The original filename of the ISO application form
       * @example iso_app.pdf
       */
      filename: string
      /**
       * @description A reference id for the file
       * @default null
       * @example your-file-id
       */
      reference_id?: string | null
    }
    ProfitAndLossLayoutSchema: {
      /** @description Ordered list of P&L sections */
      sections?: components['schemas']['PnlSectionLayout'][]
    }
    ProfitAndLossLayoutUpdateSchema: {
      /**
       * @description List of category labels to assign to a different section
       * @example [
       *   "Postage"
       * ]
       */
      category_labels: string[]
      /**
       * @description Slug of section to assign labels to
       * @example operational_expenses
       */
      section_slug: string
    }
    ProfitAndLossParams: {
      /**
       * @description ISO 4217 currency code for balance
       * @example USD
       */
      currency?: string | null
      /**
       * @description If true, dates are sorted left to right by ascending order. False by default, i.e., by default sorted in descending date order so more recent dates are first
       * @default false
       */
      dates_ascending?: boolean
      /**
       * Format: date
       * @description The earliest transaction timestamp date to use
       * @default null
       * @example 2022-01-01
       */
      from_date?: string | null
      /**
       * Format: date
       * @description The latest transaction timestamp date to use
       * @default null
       * @example 2022-01-31
       */
      to_date?: string | null
    }
    ProfitAndLossSchema: {
      /** @description Ordered list of dates representing the columns of the P&L table */
      dates?: string[]
      /** @description Ordered list of P&L sections */
      sections?: components['schemas']['PnlSection'][]
    }
    Rule: {
      /**
       * @description Key for how to compare metric value to rule value
       * @example equal
       * @enum {string}
       */
      condition?:
        | 'equal'
        | 'not_equal'
        | 'greater_than'
        | 'greater_than_or_equal'
        | 'less_than'
        | 'less_than_or_equal'
        | 'contains'
      /**
       * Format: date-time
       * @description When the rule was created in Heron system
       * @example 2024-04-19T14:08:37.175835
       */
      created?: string
      /**
       * @description Date range corresponding to metric
       * @example last_180_days
       * @enum {string}
       */
      date_range?:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      /**
       * @description Used to display rules by the stage in the underwriting workflow to which they apply.
       * @example data_quality_datasource
       * @enum {string|null}
       */
      group?:
        | 'data_quality_datasource'
        | 'data_quality_account'
        | 'data_quality_transaction'
        | null
      /**
       * @description Unique id for rule generated by Heron
       * @example rul_kCNkpFBA9WHVgbri9bENKd
       */
      heron_id?: string
      /**
       * Format: date-time
       * @description When the rule was last updated in Heron system
       * @example 2024-05-31T14:08:37.175875
       */
      last_updated?: string
      /**
       * @description Label corresponding to metric
       * @example unique_transactions
       * @enum {string}
       */
      metric_label?:
        | 'data_volume'
        | 'date_range'
        | 'date_range_with_data_sources'
        | 'data_freshness'
        | 'has_balance_ratio'
        | 'data_coverage'
        | 'accounts'
        | 'potentially_duplicated_account_pairs'
        | 'category_coverage'
        | 'inflows'
        | 'outflows'
        | 'deposit_days'
        | 'net_amount'
        | 'inflow_amount'
        | 'inflow_growth_rate'
        | 'merchant_coverage'
        | 'confidence'
        | 'revenue_anomalies'
        | 'last_debt_investment'
        | 'last_debt_investment_days'
        | 'merchant_heron_ids'
        | 'distinct_mcas'
        | 'latest_largest_mca_funding_amount'
        | 'min_revenue_count_per_statement_ignoring_savings_accounts'
        | 'max_negative_balance_days_per_statement'
        | 'min_total_revenue_per_statement'
        | 'min_average_daily_balance_per_statement'
        | 'revenue_daily_average'
        | 'cogs_daily_average'
        | 'opex_daily_average'
        | 'debt_repayment_daily_average'
        | 'debt_investment'
        | 'debt_investors'
        | 'nsf_fees'
        | 'nsf_days'
        | 'distinct_mcas_from_outflows'
        | 'distinct_mcas_from_inflows'
        | 'inflow_daily_average'
        | 'unconnected_account_ratio'
        | 'outflow_daily_average'
        | 'revenue_sources'
        | 'debt_investment_count'
        | 'debt_collection'
        | 'atm_withdrawals'
        | 'tax_payments'
        | 'tax_payment_amount'
        | 'revenue'
        | 'annualized_revenue'
        | 'cogs'
        | 'average_credit_card_spend'
        | 'opex'
        | 'revenue_profit_and_loss'
        | 'annualized_revenue_profit_and_loss'
        | 'cogs_profit_and_loss'
        | 'opex_profit_and_loss'
        | 'revenue_monthly_average'
        | 'debt_repayment'
        | 'revenue_growth_rate'
        | 'category_debt_repayment_count'
        | 'category_other_expenses_count'
        | 'category_revenue_count'
        | 'category_postage_count'
        | 'category_debt_investment_count'
        | 'category_atm_cash_outflows_count'
        | 'category_rent_count'
        | 'insurance_in_out_ratio'
        | 'rent_in_out_ratio'
        | 'taxes_in_out_ratio'
        | 'travel_in_out_ratio'
        | 'company_investments_in_out_ratio'
        | 'atm_cash_outflows_in_out_ratio'
        | 'overdraft_nsf_fees_in_out_ratio'
        | 'reconciled_intra_company_transfers_to_insurance_ratio'
        | 'insurance_to_general_payment_ratio'
        | 'insurance_to_advertising_ratio'
        | 'insurance_to_credit_card_ratio'
        | 'insurance_to_check_deposits_ratio'
        | 'insurance_to_atm_cash_inflows_ratio'
        | 'insurance_to_debt_repayment_ratio'
        | 'insurance_to_charges_fees_ratio'
        | 'insurance_to_travel_ratio'
        | 'insurance_to_inventory_ratio'
        | 'insurance_to_none_ratio'
        | 'equity_investment_to_advertising_ratio'
        | 'equity_investment_to_debt_repayment_ratio'
        | 'equity_investment_to_charges_fees_ratio'
        | 'equity_investment_to_unreconciled_intra_company_transfers_ratio'
        | 'equity_investment_to_travel_ratio'
        | 'equity_investment_to_company_investments_ratio'
        | 'general_payment_to_credit_card_ratio'
        | 'general_payment_to_p2p_transfers_ratio'
        | 'general_payment_to_company_investments_ratio'
        | 'general_payment_to_none_ratio'
        | 'debt_investment_to_overdraft_nsf_fees_ratio'
        | 'debt_investment_to_other_expenses_ratio'
        | 'debt_investment_to_none_ratio'
        | 'advertising_to_p2p_transfers_ratio'
        | 'advertising_to_other_expenses_ratio'
        | 'credit_card_to_check_deposits_ratio'
        | 'credit_card_to_charges_fees_ratio'
        | 'credit_card_to_travel_ratio'
        | 'credit_card_to_inventory_ratio'
        | 'credit_card_to_revenue_ratio'
        | 'credit_card_to_payroll_and_consultants_ratio'
        | 'credit_card_to_none_ratio'
        | 'rent_to_check_deposits_ratio'
        | 'rent_to_postage_ratio'
        | 'rent_to_special_outflows_ratio'
        | 'rent_to_travel_ratio'
        | 'rent_to_p2p_transfers_ratio'
        | 'rent_to_payroll_and_consultants_ratio'
        | 'check_deposits_to_debt_repayment_ratio'
        | 'check_deposits_to_postage_ratio'
        | 'check_deposits_to_unreconciled_intra_company_transfers_ratio'
        | 'check_deposits_to_revenue_ratio'
        | 'special_inflows_to_charges_fees_ratio'
        | 'special_inflows_to_utilities_ratio'
        | 'special_inflows_to_unreconciled_intra_company_transfers_ratio'
        | 'special_inflows_to_travel_ratio'
        | 'special_inflows_to_revenue_ratio'
        | 'special_inflows_to_atm_cash_outflows_ratio'
        | 'special_inflows_to_payroll_and_consultants_ratio'
        | 'refunds_to_atm_cash_inflows_ratio'
        | 'refunds_to_charges_fees_ratio'
        | 'refunds_to_utilities_ratio'
        | 'refunds_to_unreconciled_intra_company_transfers_ratio'
        | 'refunds_to_travel_ratio'
        | 'refunds_to_overdraft_nsf_fees_ratio'
        | 'refunds_to_atm_cash_outflows_ratio'
        | 'atm_cash_inflows_to_charges_fees_ratio'
        | 'atm_cash_inflows_to_utilities_ratio'
        | 'atm_cash_inflows_to_unreconciled_intra_company_transfers_ratio'
        | 'atm_cash_inflows_to_atm_cash_outflows_ratio'
        | 'atm_cash_inflows_to_other_expenses_ratio'
        | 'debt_repayment_to_taxes_ratio'
        | 'debt_repayment_to_postage_ratio'
        | 'debt_repayment_to_special_outflows_ratio'
        | 'debt_repayment_to_atm_cash_outflows_ratio'
        | 'debt_repayment_to_payroll_and_consultants_ratio'
        | 'check_outflows_to_charges_fees_ratio'
        | 'check_outflows_to_utilities_ratio'
        | 'check_outflows_to_travel_ratio'
        | 'check_outflows_to_p2p_transfers_ratio'
        | 'check_outflows_to_revenue_ratio'
        | 'check_outflows_to_other_expenses_ratio'
        | 'check_outflows_to_payroll_and_consultants_ratio'
        | 'taxes_to_travel_ratio'
        | 'taxes_to_p2p_transfers_ratio'
        | 'taxes_to_revenue_ratio'
        | 'taxes_to_atm_cash_outflows_ratio'
        | 'taxes_to_other_expenses_ratio'
        | 'taxes_to_payroll_and_consultants_ratio'
        | 'charges_fees_to_postage_ratio'
        | 'charges_fees_to_overdraft_nsf_fees_ratio'
        | 'charges_fees_to_revenue_ratio'
        | 'charges_fees_to_company_investments_ratio'
        | 'charges_fees_to_other_expenses_ratio'
        | 'charges_fees_to_none_ratio'
        | 'utilities_to_postage_ratio'
        | 'utilities_to_special_outflows_ratio'
        | 'utilities_to_travel_ratio'
        | 'utilities_to_overdraft_nsf_fees_ratio'
        | 'utilities_to_other_expenses_ratio'
        | 'postage_to_unreconciled_intra_company_transfers_ratio'
        | 'postage_to_p2p_transfers_ratio'
        | 'postage_to_none_ratio'
        | 'unreconciled_intra_company_transfers_to_travel_ratio'
        | 'unreconciled_intra_company_transfers_to_p2p_transfers_ratio'
        | 'unreconciled_intra_company_transfers_to_atm_cash_outflows_ratio'
        | 'unreconciled_intra_company_transfers_to_other_expenses_ratio'
        | 'special_outflows_to_p2p_transfers_ratio'
        | 'special_outflows_to_atm_cash_outflows_ratio'
        | 'travel_to_p2p_transfers_ratio'
        | 'travel_to_inventory_ratio'
        | 'travel_to_other_expenses_ratio'
        | 'travel_to_payroll_and_consultants_ratio'
        | 'travel_to_none_ratio'
        | 'p2p_transfers_to_overdraft_nsf_fees_ratio'
        | 'p2p_transfers_to_atm_cash_outflows_ratio'
        | 'inventory_to_overdraft_nsf_fees_ratio'
        | 'inventory_to_company_investments_ratio'
        | 'inventory_to_atm_cash_outflows_ratio'
        | 'inventory_to_other_expenses_ratio'
        | 'overdraft_nsf_fees_to_other_expenses_ratio'
        | 'revenue_to_payroll_and_consultants_ratio'
        | 'latest_balance'
        | 'balance_minimum'
        | 'balance_average'
        | 'change_in_balance'
        | 'negative_balance_days'
        | 'negative_balance_days_by_account'
        | 'mean_balance_velocity'
        | 'mean_abs_balance_velocity'
        | 'weekday_balance_average'
        | 'weekday_with_highest_avg'
        | 'weekday_with_lowest_avg'
        | 'gross_operating_cashflow_daily_average'
        | 'net_operating_cashflow_daily_average'
        | 'gross_operating_cashflow'
        | 'net_operating_cashflow'
        | 'gross_operating_cashflow_profit_and_loss'
        | 'net_operating_cashflow_profit_and_loss'
        | 'debt_service_coverage_ratio'
        | 'predicted_nsf_fees'
        | 'predicted_balance_daily_average'
        | 'heron_score'
      /**
       * @description Description of rule. Sent with webhook response, so can be used as a reference to the rule
       * @example notify_if_debt_investment_count_gt_0_last_180d
       */
      name?: string | null
      /**
       * @description key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users.
       * @example {
       *   "is_portfolio": true
       * }
       */
      selector?: Record<string, never>
      /**
       * @description Numeric value to compare to a metric; use this when the threshold is numeric
       * @example 42.42
       */
      value?: number | null
      /**
       * @description String value to compare to a metric; use this when the threshold is a string
       * @example mrc_12345678ijwdd321d921
       */
      value_str?: string | null
    }
    RuleEvaluationSchema: {
      metric?: components['schemas']['Metric']
      /** @enum {string} */
      result?: 'PASS' | 'FAIL' | 'NOT_AVAILABLE'
      rule?: components['schemas']['Rule']
    }
    RuleUpdateSchema: {
      /**
       * @description Key for how to compare metric value to rule value
       * @example equal
       * @enum {string}
       */
      condition?:
        | 'equal'
        | 'not_equal'
        | 'greater_than'
        | 'greater_than_or_equal'
        | 'less_than'
        | 'less_than_or_equal'
        | 'contains'
      /**
       * Format: date-time
       * @description When the rule was created in Heron system
       * @example 2024-04-19T14:08:37.175835
       */
      created?: string
      /**
       * @description Date range corresponding to metric
       * @example last_180_days
       * @enum {string}
       */
      date_range?:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      /**
       * @description Used to display rules by the stage in the underwriting workflow to which they apply.
       * @example data_quality_datasource
       * @enum {string|null}
       */
      group?:
        | 'data_quality_datasource'
        | 'data_quality_account'
        | 'data_quality_transaction'
        | null
      /**
       * @description Unique id for rule generated by Heron
       * @example rul_kCNkpFBA9WHVgbri9bENKd
       */
      heron_id?: string
      /**
       * Format: date-time
       * @description When the rule was last updated in Heron system
       * @example 2024-05-31T14:08:37.175875
       */
      last_updated?: string
      /**
       * @description Label corresponding to metric
       * @example unique_transactions
       * @enum {string}
       */
      metric_label?:
        | 'data_volume'
        | 'date_range'
        | 'date_range_with_data_sources'
        | 'data_freshness'
        | 'has_balance_ratio'
        | 'data_coverage'
        | 'accounts'
        | 'potentially_duplicated_account_pairs'
        | 'category_coverage'
        | 'inflows'
        | 'outflows'
        | 'deposit_days'
        | 'net_amount'
        | 'inflow_amount'
        | 'inflow_growth_rate'
        | 'merchant_coverage'
        | 'confidence'
        | 'revenue_anomalies'
        | 'last_debt_investment'
        | 'last_debt_investment_days'
        | 'merchant_heron_ids'
        | 'distinct_mcas'
        | 'latest_largest_mca_funding_amount'
        | 'min_revenue_count_per_statement_ignoring_savings_accounts'
        | 'max_negative_balance_days_per_statement'
        | 'min_total_revenue_per_statement'
        | 'min_average_daily_balance_per_statement'
        | 'revenue_daily_average'
        | 'cogs_daily_average'
        | 'opex_daily_average'
        | 'debt_repayment_daily_average'
        | 'debt_investment'
        | 'debt_investors'
        | 'nsf_fees'
        | 'nsf_days'
        | 'distinct_mcas_from_outflows'
        | 'distinct_mcas_from_inflows'
        | 'inflow_daily_average'
        | 'unconnected_account_ratio'
        | 'outflow_daily_average'
        | 'revenue_sources'
        | 'debt_investment_count'
        | 'debt_collection'
        | 'atm_withdrawals'
        | 'tax_payments'
        | 'tax_payment_amount'
        | 'revenue'
        | 'annualized_revenue'
        | 'cogs'
        | 'average_credit_card_spend'
        | 'opex'
        | 'revenue_profit_and_loss'
        | 'annualized_revenue_profit_and_loss'
        | 'cogs_profit_and_loss'
        | 'opex_profit_and_loss'
        | 'revenue_monthly_average'
        | 'debt_repayment'
        | 'revenue_growth_rate'
        | 'category_debt_repayment_count'
        | 'category_other_expenses_count'
        | 'category_revenue_count'
        | 'category_postage_count'
        | 'category_debt_investment_count'
        | 'category_atm_cash_outflows_count'
        | 'category_rent_count'
        | 'insurance_in_out_ratio'
        | 'rent_in_out_ratio'
        | 'taxes_in_out_ratio'
        | 'travel_in_out_ratio'
        | 'company_investments_in_out_ratio'
        | 'atm_cash_outflows_in_out_ratio'
        | 'overdraft_nsf_fees_in_out_ratio'
        | 'reconciled_intra_company_transfers_to_insurance_ratio'
        | 'insurance_to_general_payment_ratio'
        | 'insurance_to_advertising_ratio'
        | 'insurance_to_credit_card_ratio'
        | 'insurance_to_check_deposits_ratio'
        | 'insurance_to_atm_cash_inflows_ratio'
        | 'insurance_to_debt_repayment_ratio'
        | 'insurance_to_charges_fees_ratio'
        | 'insurance_to_travel_ratio'
        | 'insurance_to_inventory_ratio'
        | 'insurance_to_none_ratio'
        | 'equity_investment_to_advertising_ratio'
        | 'equity_investment_to_debt_repayment_ratio'
        | 'equity_investment_to_charges_fees_ratio'
        | 'equity_investment_to_unreconciled_intra_company_transfers_ratio'
        | 'equity_investment_to_travel_ratio'
        | 'equity_investment_to_company_investments_ratio'
        | 'general_payment_to_credit_card_ratio'
        | 'general_payment_to_p2p_transfers_ratio'
        | 'general_payment_to_company_investments_ratio'
        | 'general_payment_to_none_ratio'
        | 'debt_investment_to_overdraft_nsf_fees_ratio'
        | 'debt_investment_to_other_expenses_ratio'
        | 'debt_investment_to_none_ratio'
        | 'advertising_to_p2p_transfers_ratio'
        | 'advertising_to_other_expenses_ratio'
        | 'credit_card_to_check_deposits_ratio'
        | 'credit_card_to_charges_fees_ratio'
        | 'credit_card_to_travel_ratio'
        | 'credit_card_to_inventory_ratio'
        | 'credit_card_to_revenue_ratio'
        | 'credit_card_to_payroll_and_consultants_ratio'
        | 'credit_card_to_none_ratio'
        | 'rent_to_check_deposits_ratio'
        | 'rent_to_postage_ratio'
        | 'rent_to_special_outflows_ratio'
        | 'rent_to_travel_ratio'
        | 'rent_to_p2p_transfers_ratio'
        | 'rent_to_payroll_and_consultants_ratio'
        | 'check_deposits_to_debt_repayment_ratio'
        | 'check_deposits_to_postage_ratio'
        | 'check_deposits_to_unreconciled_intra_company_transfers_ratio'
        | 'check_deposits_to_revenue_ratio'
        | 'special_inflows_to_charges_fees_ratio'
        | 'special_inflows_to_utilities_ratio'
        | 'special_inflows_to_unreconciled_intra_company_transfers_ratio'
        | 'special_inflows_to_travel_ratio'
        | 'special_inflows_to_revenue_ratio'
        | 'special_inflows_to_atm_cash_outflows_ratio'
        | 'special_inflows_to_payroll_and_consultants_ratio'
        | 'refunds_to_atm_cash_inflows_ratio'
        | 'refunds_to_charges_fees_ratio'
        | 'refunds_to_utilities_ratio'
        | 'refunds_to_unreconciled_intra_company_transfers_ratio'
        | 'refunds_to_travel_ratio'
        | 'refunds_to_overdraft_nsf_fees_ratio'
        | 'refunds_to_atm_cash_outflows_ratio'
        | 'atm_cash_inflows_to_charges_fees_ratio'
        | 'atm_cash_inflows_to_utilities_ratio'
        | 'atm_cash_inflows_to_unreconciled_intra_company_transfers_ratio'
        | 'atm_cash_inflows_to_atm_cash_outflows_ratio'
        | 'atm_cash_inflows_to_other_expenses_ratio'
        | 'debt_repayment_to_taxes_ratio'
        | 'debt_repayment_to_postage_ratio'
        | 'debt_repayment_to_special_outflows_ratio'
        | 'debt_repayment_to_atm_cash_outflows_ratio'
        | 'debt_repayment_to_payroll_and_consultants_ratio'
        | 'check_outflows_to_charges_fees_ratio'
        | 'check_outflows_to_utilities_ratio'
        | 'check_outflows_to_travel_ratio'
        | 'check_outflows_to_p2p_transfers_ratio'
        | 'check_outflows_to_revenue_ratio'
        | 'check_outflows_to_other_expenses_ratio'
        | 'check_outflows_to_payroll_and_consultants_ratio'
        | 'taxes_to_travel_ratio'
        | 'taxes_to_p2p_transfers_ratio'
        | 'taxes_to_revenue_ratio'
        | 'taxes_to_atm_cash_outflows_ratio'
        | 'taxes_to_other_expenses_ratio'
        | 'taxes_to_payroll_and_consultants_ratio'
        | 'charges_fees_to_postage_ratio'
        | 'charges_fees_to_overdraft_nsf_fees_ratio'
        | 'charges_fees_to_revenue_ratio'
        | 'charges_fees_to_company_investments_ratio'
        | 'charges_fees_to_other_expenses_ratio'
        | 'charges_fees_to_none_ratio'
        | 'utilities_to_postage_ratio'
        | 'utilities_to_special_outflows_ratio'
        | 'utilities_to_travel_ratio'
        | 'utilities_to_overdraft_nsf_fees_ratio'
        | 'utilities_to_other_expenses_ratio'
        | 'postage_to_unreconciled_intra_company_transfers_ratio'
        | 'postage_to_p2p_transfers_ratio'
        | 'postage_to_none_ratio'
        | 'unreconciled_intra_company_transfers_to_travel_ratio'
        | 'unreconciled_intra_company_transfers_to_p2p_transfers_ratio'
        | 'unreconciled_intra_company_transfers_to_atm_cash_outflows_ratio'
        | 'unreconciled_intra_company_transfers_to_other_expenses_ratio'
        | 'special_outflows_to_p2p_transfers_ratio'
        | 'special_outflows_to_atm_cash_outflows_ratio'
        | 'travel_to_p2p_transfers_ratio'
        | 'travel_to_inventory_ratio'
        | 'travel_to_other_expenses_ratio'
        | 'travel_to_payroll_and_consultants_ratio'
        | 'travel_to_none_ratio'
        | 'p2p_transfers_to_overdraft_nsf_fees_ratio'
        | 'p2p_transfers_to_atm_cash_outflows_ratio'
        | 'inventory_to_overdraft_nsf_fees_ratio'
        | 'inventory_to_company_investments_ratio'
        | 'inventory_to_atm_cash_outflows_ratio'
        | 'inventory_to_other_expenses_ratio'
        | 'overdraft_nsf_fees_to_other_expenses_ratio'
        | 'revenue_to_payroll_and_consultants_ratio'
        | 'latest_balance'
        | 'balance_minimum'
        | 'balance_average'
        | 'change_in_balance'
        | 'negative_balance_days'
        | 'negative_balance_days_by_account'
        | 'mean_balance_velocity'
        | 'mean_abs_balance_velocity'
        | 'weekday_balance_average'
        | 'weekday_with_highest_avg'
        | 'weekday_with_lowest_avg'
        | 'gross_operating_cashflow_daily_average'
        | 'net_operating_cashflow_daily_average'
        | 'gross_operating_cashflow'
        | 'net_operating_cashflow'
        | 'gross_operating_cashflow_profit_and_loss'
        | 'net_operating_cashflow_profit_and_loss'
        | 'debt_service_coverage_ratio'
        | 'predicted_nsf_fees'
        | 'predicted_balance_daily_average'
        | 'heron_score'
      /**
       * @description Description of rule. Sent with webhook response, so can be used as a reference to the rule
       * @example notify_if_debt_investment_count_gt_0_last_180d
       */
      name?: string | null
      /**
       * @description key-value pairs of the desired selector that should select whichend users to apply this rule. They are evaluated as an AND condition(all must be true to run this rule for an end user). Leave empty toapply to all end users.
       * @example {
       *   "is_portfolio": true
       * }
       */
      selector?: Record<string, never>
      /**
       * @description Numeric value to compare to a metric; use this when the threshold is numeric
       * @example 42.42
       */
      value?: number | null
      /**
       * @description String value to compare to a metric; use this when the threshold is a string
       * @example mrc_12345678ijwdd321d921
       */
      value_str?: string | null
    }
    RuleViolation: {
      metric?: components['schemas']['Metric']
      rule?: components['schemas']['Rule']
    }
    SaltEdgeCsvSchema: {
      account_id?: number
      amount?: number
      category?: string
      closing_balance?: number | null
      currency_code?: string
      description?: string
      /** Format: date */
      made_on?: string
      payee?: string | null
      payer?: string | null
      transaction_id?: number
    }
    ScorecardQueryParams: {
      /**
       * Format: date
       * @description Cut-off date to consider transactions to for calculating scorecard (inclusive)
       * @default null
       * @example 2023-01-19
       */
      date?: string | null
      /**
       * @description Qualitative description for date to calculate scorecard
       * @default null
       * @example end_user_created
       * @enum {string|null}
       */
      named_date?:
        | 'end_user_created'
        | 'end_user_last_updated'
        | 'last_transaction'
        | 'end_user_last_enriched'
        | 'last_data_source_end_date_or_transaction_timestamp'
        | null
    }
    StringCheck: {
      /** @default false */
      auto_decline?: boolean
      /** @default null */
      decline_description?: string | null
      /** @default null */
      email_template_name?: string | null
      /** @default false */
      ignore_metric_availability?: boolean
      /** @default null */
      pass_description?: string | null
      /** @enum {unknown} */
      type?:
        | 'equal'
        | 'not_equal'
        | 'contains'
        | 'does_not_start_with'
        | 'does_not_contain'
        | 'is_in'
        | 'is_not_in'
      value?: string
    }
    Transaction: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /**
       * @description Category of transaction that you may have received from other sources
       * @example shopping
       */
      categories_default?: string | null
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * Format: date
       * @description The date of the transaction; 'timestamp' field takes priority over 'date'
       * @example 2020-04-27
       */
      date?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id?: string | null
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    Transaction1: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /**
       * @description Category of transaction that you may have received from other sources
       * @example shopping
       */
      categories_default?: string | null
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * Format: date
       * @description The date of the transaction; 'timestamp' field takes priority over 'date'
       * @example 2020-04-27
       */
      date?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id?: string | null
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    Transaction2: {
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
    }
    Transaction3: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
    }
    TransactionAnnotation: {
      /**
       * @description Annotator type
       * @example predicted
       */
      annotator?: string
      /**
       * @description The confidence associated with the category annotation
       * @example 0.5
       */
      confidence?: number
      /**
       * @description Unique ID of category; generated by Heron Data
       * @example ctg_UmZv5wd5BojRzsCoBwMSYN
       */
      heron_id?: string
      /**
       * @description Label of category
       * @example Rent
       */
      label?: string
      /**
       * @description The model version that produced the categorisation
       * @example 57f0d608-2ec3-41b1-bf5d-5475d96d9a7c
       */
      model_version?: string
    }
    TransactionDeleteReference: {
      /** @description list of transactions (only ids) that have been deleted */
      transactions?: components['schemas']['Transaction2'][]
    }
    TransactionDeleteWebhook: {
      /**
       * Format: date-time
       * @description time webhook was sent
       * @example 2024-05-31T14:08:36.306899
       */
      created?: string
      /** @description payload of the webhook */
      data?: components['schemas']['TransactionDeleteReference']
      /** @description meta information about the webhook */
      meta?: Record<string, never>
      /**
       * @description topic of webhook
       * @example end_user.processed
       */
      topic?: string
    }
    TransactionEnriched: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /** @description The category annotation associated with the transaction */
      annotation?: components['schemas']['Annotation']
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /**
       * @description Category of transaction that you may have received from other sources
       * @example shopping
       */
      categories_default?: string | null
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * Format: date
       * @description The date of the transaction; 'timestamp' field takes priority over 'date'
       * @example 2020-04-27
       */
      date?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id?: string | null
      /** @description Features calculated from transaction */
      features?: components['schemas']['TransactionFeatures']
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /**
       * Format: date-time
       * @description When the transaction was last updated, either by updating its enrichments or the values of the transaction itself
       * @example 2024-05-31T14:08:36.299479
       */
      last_updated?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description The merchant associated with the transaction */
      merchant?: components['schemas']['Merchant']
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    TransactionFeatures: {
      /**
       * @description The cleaned description of the transaction
       * @example GOOGLE ADS
       */
      description_clean?: string
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original
       * @example txn_Qfnamjdtp5kfNGpbExEQYh
       */
      duplicate_of_id?: unknown
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean
    }
    TransactionFeedbackParams: {
      /**
       * @description If true, enables the triggering of transaction_updated webhook. Set to false to suppress trigger. Default true
       * @default true
       */
      trigger_webhook?: boolean
    }
    TransactionFeedbackSchema: {
      /**
       * @default {}
       * @example {
       *   "heron_id": "ctg_fyEmcT9kg4HkhWsZdkgdpo",
       *   "label": "Insurance"
       * }
       */
      category?: components['schemas']['CategoryFeedback']
      /**
       * @default {}
       * @example {
       *   "heron_id": "mrc_RAynjeJEwU6D2aPcvrXfrS",
       *   "is_correct": false,
       *   "name": "Spotify"
       * }
       */
      merchant?: components['schemas']['MerchantFeedback']
      /**
       * @description your identifier for where the feedback comes from e.g. bob_the_underwriter
       * @default null
       */
      source?: string | null
    }
    TransactionGetOutput: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description The account number associated with the transaction
       * @example 1234567890
       */
      account_number?: string
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /** @description The category associated with the transaction */
      categories?: components['schemas']['TransactionAnnotation'][]
      /**
       * Format: date-time
       * @description When transaction was created in Heron system
       * @example 2024-05-31T14:08:36.301845
       */
      created?: string
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description Unique ID of the transaction's data source account
       * @example dsa_UQFgFNBKgtBbtVzWF2ERW2
       */
      data_source_account_heron_id?: string
      /**
       * @description Unique ID of the transaction's data source
       * @example dso_KNLpxxz3Hm6yX3izTWLHnp
       */
      data_source_heron_id?: string
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description The cleaned description of the transaction
       * @example GOOGLE ADS
       */
      description_clean?: string
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original
       * @example txn_Qfnamjdtp5kfNGpbExEQYh
       */
      duplicate_of_id?: unknown
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id?: string | null
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean
      /**
       * Format: date-time
       * @description When transaction was last updated in Heron system; could be from recategorisation or attribute updates
       * @example 2024-05-31T14:08:36.301877
       */
      last_updated?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description The merchant associated with the transaction */
      merchant?: components['schemas']['Merchant']
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /** @description The payment processor associated with the transaction */
      payment_processor?: components['schemas']['PaymentProcessor']
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    TransactionPostAsync: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id: string
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /**
       * @description Category of transaction that you may have received from other sources
       * @example shopping
       */
      categories_default?: string | null
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency: string
      /**
       * Format: date
       * @description The date of the transaction; 'timestamp' field takes priority over 'date'
       * @example 2020-04-27
       */
      date?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id: string
      /**
       * @description Unique ID of transaction; generated by Heron Data
       * @example txn_kbUf2BUce7JbyE7XHYCP8N
       */
      heron_id?: string
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id: string
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    TransactionPostOutput: {
      /**
       * @description Your unique ID for account associated with transaction
       * @example checking_account_202348
       */
      account_id?: string | null
      /**
       * @description Amount. Inflows to an account should be positive, and outflows from an account should be negative. If using Plaid, please flip the amount sign for all transactions.
       * @example -42.42
       */
      amount: number
      /**
       * @description The running balance of the account after transaction ocurred
       * @example 423
       */
      balance?: number | null
      /** @description The category associated with the transaction */
      categories?: components['schemas']['TransactionAnnotation'][]
      /**
       * @description ISO 4217 currency code
       * @example USD
       */
      currency?: string | null
      /**
       * @description The text description for the transaction
       * @example GOOGLE *ADS12340929 cc@google.com US
       */
      description: string
      /**
       * @description The cleaned description of the transaction
       * @example GOOGLE ADS
       */
      description_clean?: string
      /**
       * @description Indicates that the transaction is a duplicate and gives the heron_id of the original
       * @example txn_Qfnamjdtp5kfNGpbExEQYh
       */
      duplicate_of_id?: unknown
      /**
       * @description Your unique ID for end user associated with transaction
       * @example my_best_customer_203948
       */
      end_user_id?: string | null
      /** @description Whether the transaction is a transfer; requires end_user_id and timestamp to be present */
      has_matching_transaction?: boolean
      /** @description Indicates whether the transaction has another transaction similar to it */
      is_potential_duplicate?: boolean
      /** @description Whether the transaction is recurring or not; requires end_user_id and timestamp to be present */
      is_recurring?: boolean
      /** @description Merchant category code associated with transaction that you may have received from other sources */
      mcc_code?: string | null
      /** @description The merchant associated with the transaction */
      merchant?: components['schemas']['Merchant']
      /** @description If sending a batch of transactions, the order in which the transaction occurs, where a higher value is equivalent to a more recent transaction */
      order?: number | null
      /** @description The payment processor associated with the transaction */
      payment_processor?: components['schemas']['PaymentProcessor']
      /**
       * @description Your unique ID for transaction
       * @example my_favourite_transaction_231098
       */
      reference_id?: string | null
      /**
       * @description ID associated with request, e.g., all transactions in same POST request will have same request_id
       * @example req_DVqRq8eZ5VeDH3by5o5FeX
       */
      request_id?: string | null
      /**
       * Format: date-time
       * @description The ISO 8601 timezone aware timestamp of the transaction; takes precedence over 'date'
       * @example 2021-11-12T10:38:05Z
       */
      timestamp?: string | null
      /**
       * @description Code associated with transaction to indicate the type of transaction
       * @example card
       */
      transaction_code?: string | null
    }
    TransactionsPostAsyncSchema: {
      /** @description Bank account balance information for a particular account_id. The balance here must be the *latest balance* after all the transactions in this batch have been applied. */
      balances?: components['schemas']['AccountBalance1'][] | null
      transactions: components['schemas']['TransactionPostAsync'][]
    }
    TransactionsPostSyncSchema: {
      transactions: components['schemas']['Transaction1'][]
    }
    UserModifiableSettings: {
      use_new_company_layout?: boolean
      use_new_end_user_table?: boolean
    }
    WebhookSchema: {
      /**
       * @description Headers to send webhook with
       * @example {
       *   "Content-Type": "application/json"
       * }
       */
      headers?: unknown
      /**
       * @description Unique ID for webhook generated by Heron
       * @example wbh_HM9PfoLDsHtsV3PJTDvgnz
       */
      heron_id?: string
      /**
       * @description Whether the webhook is enabled
       * @example true
       */
      is_enabled?: boolean
      /**
       * @description Webhook topic for different Heron events
       * @example end_user.processed
       * @enum {string}
       */
      topic?:
        | 'data_source_account_summary.created'
        | 'data_source.disabled'
        | 'end_user.created'
        | 'end_user.processed'
        | 'end_user.failed'
        | 'end_user.reviewed'
        | 'end_user.transactions_updated'
        | 'end_user.review_required'
        | 'end_user.files_changed'
        | 'end_user.files_classified'
        | 'end_user_information.updated'
        | 'end_user.policy_workflow_finished'
        | 'transactions.deleted'
        | 'transactions.updated'
        | 'pdf.processed'
        | 'pdf.checks_passed'
        | 'pdf.checks_failed'
        | 'pdf.transactions_loaded'
        | 'pdf.failed'
        | 'pdf.parsed'
        | 'pdf.approved'
        | 'integration_link.erroring'
        | 'iso_application.processed'
        | 'iso_application.processed_simple'
        | 'iso_application.created'
        | 'end_user_email.processed'
        | 'end_user_email.failed'
        | 'debt_summary.processed'
      /**
       * Format: url
       * @description URL where webhook should be sent
       * @example https://www.your-webhook-endpoint.com/heron
       */
      url?: string
    }
    WebhookUpdateSchema: {
      /**
       * @description Headers to send webhook with
       * @example {
       *   "Content-Type": "application/json"
       * }
       */
      headers?: unknown
      /**
       * @description Unique ID for webhook generated by Heron
       * @example wbh_HM9PfoLDsHtsV3PJTDvgnz
       */
      heron_id?: string
      /**
       * @description Whether the webhook is enabled
       * @example true
       */
      is_enabled?: boolean
      /**
       * @description Webhook topic for different Heron events
       * @example end_user.processed
       * @enum {string}
       */
      topic?:
        | 'data_source_account_summary.created'
        | 'data_source.disabled'
        | 'end_user.created'
        | 'end_user.processed'
        | 'end_user.failed'
        | 'end_user.reviewed'
        | 'end_user.transactions_updated'
        | 'end_user.review_required'
        | 'end_user.files_changed'
        | 'end_user.files_classified'
        | 'end_user_information.updated'
        | 'end_user.policy_workflow_finished'
        | 'transactions.deleted'
        | 'transactions.updated'
        | 'pdf.processed'
        | 'pdf.checks_passed'
        | 'pdf.checks_failed'
        | 'pdf.transactions_loaded'
        | 'pdf.failed'
        | 'pdf.parsed'
        | 'pdf.approved'
        | 'integration_link.erroring'
        | 'iso_application.processed'
        | 'iso_application.processed_simple'
        | 'iso_application.created'
        | 'end_user_email.processed'
        | 'end_user_email.failed'
        | 'debt_summary.processed'
      /**
       * Format: url
       * @description URL where webhook should be sent
       * @example https://www.your-webhook-endpoint.com/heron
       */
      url?: string
    }
    Widget: {
      /** @description A unique id used to reference the widget */
      id: string
      /** @enum {string} */
      scorecard_metric_date_range?:
        | 'latest'
        | 'last_30_days'
        | 'last_90_days'
        | 'last_120_days'
        | 'last_180_days'
        | 'last_365_days'
        | 'next_30_days'
        | 'next_60_days'
        | 'next_90_days'
        | 'next_180_days'
        | 'last_1_calendar_months'
        | 'last_3_calendar_months'
        | 'last_4_calendar_months'
        | 'last_6_calendar_months'
        | 'last_12_calendar_months'
        | 'last_1_full_calendar_months'
        | 'last_2_full_calendar_months'
        | 'last_3_full_calendar_months'
        | 'last_6_full_calendar_months'
        | 'last_12_full_calendar_months'
      scorecard_metric_label?: string
      /** @enum {string} */
      type:
        | 'scorecard_metric'
        | 'heron_score'
        | 'loan_revenue_ratio'
        | 'deposit_trends_ratio'
    }
    YodleeAccount: {
      balance?: components['schemas']['YodleeAmount']
      classification?: string | null
      id?: number
    }
    YodleeAmount: {
      amount?: number
      currency?: string
    }
    YodleeSchema: {
      accounts?: components['schemas']['YodleeAccount'][]
      transactions?: components['schemas']['YodleeTransaction'][]
    }
    YodleeTransaction: {
      accountId?: number
      amount?: components['schemas']['YodleeAmount']
      /** @enum {string} */
      baseType?: 'CREDIT' | 'DEBIT'
      category?: string
      /** Format: date-time */
      date?: string
      description?: components['schemas']['YodleeTransactionDescription']
      id?: number
    }
    YodleeTransactionDescription: {
      original?: string
      simple?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export type operations = Record<string, never>

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
