/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/config': {
    get: operations['listIntegrations']
    put: operations['updateIntegration']
    post: operations['createIntegration']
  }
  '/config/{provider_config_key}': {
    get: operations['getIntegration']
    delete: operations['deleteIntegration']
  }
  '/connection': {
    get: operations['listConnections']
  }
  '/connection/{connectionId}': {
    get: operations['getConnection']
    delete: operations['deleteConnection']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @enum {string} */
    Provider:
      | 'accelo'
      | 'adobe'
      | 'aircall'
      | 'airtable'
      | 'apollo'
      | 'amazon'
      | 'amplitude'
      | 'asana'
      | 'ashby'
      | 'atlassian'
      | 'bamboohr'
      | 'battlenet'
      | 'bitbucket'
      | 'boldsign'
      | 'box'
      | 'braintree'
      | 'braintree-sandbox'
      | 'brex'
      | 'brex-staging'
      | 'calendly'
      | 'clickup'
      | 'confluence'
      | 'contentstack'
      | 'deel'
      | 'deel-sandbox'
      | 'digitalocean'
      | 'discord'
      | 'docusign'
      | 'docusign-sandbox'
      | 'dropbox'
      | 'epic-games'
      | 'evaluagent'
      | 'eventbrite'
      | 'exact-online'
      | 'factorial'
      | 'facebook'
      | 'figjam'
      | 'figma'
      | 'fitbit'
      | 'freshbooks'
      | 'freshservice'
      | 'front'
      | 'github'
      | 'github-app'
      | 'gitlab'
      | 'gong'
      | 'google'
      | 'google-calendar'
      | 'google-mail'
      | 'google-sheet'
      | 'gorgias'
      | 'greenhouse'
      | 'gumroad'
      | 'gusto'
      | 'health-gorilla'
      | 'highlevel'
      | 'hubspot'
      | 'instagram'
      | 'intercom'
      | 'intuit'
      | 'jira'
      | 'keap'
      | 'lever'
      | 'linear'
      | 'linkedin'
      | 'linkhut'
      | 'mailchimp'
      | 'microsoft-teams'
      | 'mixpanel'
      | 'miro'
      | 'monday'
      | 'mural'
      | 'nationbuilder'
      | 'netsuite'
      | 'notion'
      | 'one-drive'
      | 'osu'
      | 'outreach'
      | 'pagerduty'
      | 'pandadoc'
      | 'payfit'
      | 'pennylane'
      | 'pipedrive'
      | 'qualtrics'
      | 'quickbooks'
      | 'ramp'
      | 'ramp-sandbox'
      | 'reddit'
      | 'ring-central'
      | 'ring-central-sandbox'
      | 'segment'
      | 'sage'
      | 'salesforce'
      | 'salesforce-sandbox'
      | 'salesloft'
      | 'servicem8'
      | 'shopify'
      | 'shortcut'
      | 'slack'
      | 'smugmug'
      | 'splitwise'
      | 'spotify'
      | 'squareup'
      | 'squareup-sandbox'
      | 'stackexchange'
      | 'strava'
      | 'stripe'
      | 'stripe-express'
      | 'survey-monkey'
      | 'teamwork'
      | 'timely'
      | 'trello'
      | 'todoist'
      | 'twitch'
      | 'twitter'
      | 'twitter-v2'
      | 'twinfield'
      | 'typeform'
      | 'uber'
      | 'unauthenticated'
      | 'wakatime'
      | 'wave-accounting'
      | 'wildix-pbx'
      | 'workable'
      | 'xero'
      | 'yahoo'
      | 'yandex'
      | 'youtube'
      | 'zapier-nla'
      | 'zendesk'
      | 'zenefits'
      | 'zoho'
      | 'zoho-books'
      | 'zoho-crm'
      | 'zoho-desk'
      | 'zoho-inventory'
      | 'zoho-invoice'
      | 'zoom'
    /** @enum {string} */
    AuthMode: 'OAUTH2' | 'OAUTH1' | 'BASIC' | 'API_KEY'
    Integration: {
      provider: components['schemas']['Provider']
      unique_key: string
      client_id: string
      client_secret: string
      scopes?: string
      app_link?: string | null
      auth_mode: components['schemas']['AuthMode']
    }
    Connection: {
      connection_id: string
      /** Format: date-time */
      created: string
      id: number
      provider: components['schemas']['Provider']
      /** Format: date-time */
      updated_at: string
      provider_config_key: string
      credentials: {
        type: components['schemas']['AuthMode']
        access_token: string
        refresh_token?: string
        /** Format: date-time */
        expires_at: string
        raw: {
          access_token: string
          expires_in: number
          /** Format: date-time */
          expires_at: string
          refresh_token?: string | null
          refresh_token_expires_in?: number | null
          token_type: string
          scope?: string
        }
      }
      connection_config: {
        [key: string]: unknown
      }
      metadata: {
        [key: string]: unknown
      } | null
      credentials_iv: string
      credentials_tag: string
      environment_id: number
      deleted: boolean
      /** Format: date-time */
      deleted_at: string | null
      /** Format: date-time */
      last_fetched_at: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  listIntegrations: {
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': {
            configs: {
              provider: components['schemas']['Provider']
              unique_key: string
            }[]
          }
        }
      }
    }
  }
  updateIntegration: {
    requestBody?: {
      content: {
        'application/json': {
          provider: components['schemas']['Provider']
          app_link?: string | null
          auth_mode?: components['schemas']['AuthMode']
          provider_config_key: string
          oauth_client_id: string
          oauth_client_secret: string
          oauth_scopes?: string
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': null
        }
      }
    }
  }
  createIntegration: {
    requestBody?: {
      content: {
        'application/json': {
          provider: components['schemas']['Provider']
          app_link?: string | null
          auth_mode?: components['schemas']['AuthMode']
          provider_config_key: string
          oauth_client_id: string
          oauth_client_secret: string
          oauth_scopes?: string
        }
      }
    }
    responses: {
      200: {
        content: {
          'application/json': null
        }
      }
    }
  }
  getIntegration: {
    parameters: {
      query?: {
        include_creds?: boolean
      }
      path: {
        provider_config_key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': {
            config:
              | components['schemas']['Integration']
              | {
                  provider: components['schemas']['Provider']
                  unique_key: string
                }
          }
        }
      }
    }
  }
  deleteIntegration: {
    parameters: {
      path: {
        provider_config_key: string
      }
    }
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': null
        }
      }
    }
  }
  listConnections: {
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': {
            connections: {
              connection_id: string
              /** Format: date-time */
              created: string
              id: number
              provider: components['schemas']['Provider']
            }[]
          }
        }
      }
    }
  }
  getConnection: {
    parameters: {
      query: {
        provider_config_key: string
        force_refresh?: boolean
        refresh_token?: boolean
      }
      path: {
        connectionId: string
      }
    }
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': components['schemas']['Connection']
        }
      }
    }
  }
  deleteConnection: {
    parameters: {
      query: {
        provider_config_key: string
        force_refresh?: boolean
        refresh_token?: boolean
      }
      path: {
        connection_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': unknown
      }
    }
    responses: {
      200: {
        content: {
          'application/json': null
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
