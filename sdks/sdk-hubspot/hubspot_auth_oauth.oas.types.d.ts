/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/access-tokens/{token}': {
    get: operations['get-/oauth/v1/access-tokens/{token}']
  }
  '/v1/refresh-tokens/{token}': {
    get: operations['get-/oauth/v1/refresh-tokens/{token}']
    delete: operations['delete-/oauth/v1/refresh-tokens/{token}']
  }
  '/v1/token': {
    post: operations['post-/oauth/v1/token']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorDetail: {
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example An error occurred
       */
      message: string
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /** @description The error category */
      category: string
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
      /**
       * @description Context about the error condition
       * @example {
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ],
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps */
      links?: {
        [key: string]: string
      }
    }
    AccessTokenInfoResponse: {
      token: string
      user?: string
      hub_domain?: string
      scopes: string[]
      scope_to_scope_group_pks: number[]
      trial_scopes: string[]
      trial_scope_to_scope_group_pks: number[]
      /** Format: int32 */
      hub_id: number
      /** Format: int32 */
      app_id: number
      /** Format: int32 */
      expires_in: number
      /** Format: int32 */
      user_id: number
      token_type: string
    }
    TokenResponseIF: {
      access_token: string
      /** Format: int32 */
      expires_in: number
      refresh_token: string
      token_type: string
      id_token?: string
    }
    RefreshTokenInfoResponse: {
      token: string
      user?: string
      hub_domain?: string
      scopes: string[]
      /** Format: int32 */
      hub_id: number
      client_id: string
      /** Format: int32 */
      user_id: number
      token_type: string
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  'get-/oauth/v1/access-tokens/{token}': {
    parameters: {
      path: {
        token: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['AccessTokenInfoResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'get-/oauth/v1/refresh-tokens/{token}': {
    parameters: {
      path: {
        token: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['RefreshTokenInfoResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'delete-/oauth/v1/refresh-tokens/{token}': {
    parameters: {
      path: {
        token: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  'post-/oauth/v1/token': {
    requestBody?: {
      content: {
        'application/x-www-form-urlencoded': {
          /** @enum {string} */
          grant_type?: 'authorization_code' | 'refresh_token'
          code?: string
          redirect_uri?: string
          client_id?: string
          client_secret?: string
          refresh_token?: string
        }
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TokenResponseIF']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
