/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cms/v3/blogs/posts/schedule': {
    /**
     * Schedule a Blog Post to be Published
     * @description Schedule a Blog Post to be Published.
     */
    post: operations['post-/cms/v3/blogs/posts/schedule_schedule']
  }
  '/cms/v3/blogs/posts/batch/read': {
    /**
     * Retrieve a batch of Blog Posts
     * @description Retrieve the Blog Post objects identified in the request body.
     */
    post: operations['post-/cms/v3/blogs/posts/batch/read_readBatch']
  }
  '/cms/v3/blogs/posts/multi-language/update-languages': {
    /**
     * Update languages of multi-language group
     * @description Explicitly set new languages for each Blog Post in a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/posts/multi-language/update-languages_updateLangs']
  }
  '/cms/v3/blogs/posts/batch/create': {
    /**
     * Create a batch of Blog Posts
     * @description Create the Blog Post objects detailed in the request body.
     */
    post: operations['post-/cms/v3/blogs/posts/batch/create_createBatch']
  }
  '/cms/v3/blogs/posts/batch/update': {
    /**
     * Update a batch of Blog Posts
     * @description Update the Blog Post objects identified in the request body.
     */
    post: operations['post-/cms/v3/blogs/posts/batch/update_updateBatch']
  }
  '/cms/v3/blogs/posts/{objectId}/draft': {
    /**
     * Retrieve the full draft version of the Blog Post
     * @description Retrieve the full draft version of the Blog Post.
     */
    get: operations['get-/cms/v3/blogs/posts/{objectId}/draft_getDraftById']
    /**
     * Update a Blog Post draft
     * @description Sparse updates the draft version of a single Blog Post object identified by the id in the path.
     * All the column values need not be specified. Only the that need to be modified can be specified.
     */
    patch: operations['patch-/cms/v3/blogs/posts/{objectId}/draft_updateDraft']
  }
  '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}': {
    /**
     * Retrieves a previous version of a blog post
     * @description Retrieves a previous version of a blog post.
     */
    get: operations['get-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}_getPreviousVersion']
  }
  '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft': {
    /**
     * Restore a previous version of a blog post, to the draft version of the blog post
     * @description Takes a specified version of a blog post, sets it as the new draft version of the blog post.
     */
    post: operations['post-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft_restorePreviousVersionToDraft']
  }
  '/cms/v3/blogs/posts/multi-language/create-language-variation': {
    /**
     * Create a new language variation
     * @description Create a new language variation from an existing Blog Post
     */
    post: operations['post-/cms/v3/blogs/posts/multi-language/create-language-variation_createLangVariation']
  }
  '/cms/v3/blogs/posts': {
    /**
     * Get all Blog Posts
     * @description Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
     */
    get: operations['get-/cms/v3/blogs/posts_getPage']
    /**
     * Create a new Blog Post
     * @description Create a new Blog Post.
     */
    post: operations['post-/cms/v3/blogs/posts_create']
  }
  '/cms/v3/blogs/posts/clone': {
    /**
     * Clone a Blog Post
     * @description Clone a Blog Post.
     */
    post: operations['post-/cms/v3/blogs/posts/clone_clone']
  }
  '/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore': {
    /**
     * Restore a previous version of a blog post
     * @description Takes a specified version of a blog post and restores it.
     */
    post: operations['post-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore_restorePreviousVersion']
  }
  '/cms/v3/blogs/posts/multi-language/detach-from-lang-group': {
    /**
     * Detach a Blog Post from a multi-language group
     * @description Detach a Blog Post from a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/posts/multi-language/detach-from-lang-group_detachFromLangGroup']
  }
  '/cms/v3/blogs/posts/{objectId}/draft/push-live': {
    /**
     * Push Blog Post draft edits live
     * @description Take any changes from the draft version of the Blog Post and apply them to the live version.
     */
    post: operations['post-/cms/v3/blogs/posts/{objectId}/draft/push-live_pushLive']
  }
  '/cms/v3/blogs/posts/batch/archive': {
    /**
     * Delete a batch of Blog Posts
     * @description Delete the Blog Post objects identified in the request body.
     * Note: This is not the same as the in-app `archive` function. To perform a dashboard `archive` send an normal update with the `archivedInDashboard` field set to true.
     */
    post: operations['post-/cms/v3/blogs/posts/batch/archive_archiveBatch']
  }
  '/cms/v3/blogs/posts/{objectId}/draft/reset': {
    /**
     * Reset the Blog Post draft to the live version
     * @description Discards any edits and resets the draft to the live version.
     */
    post: operations['post-/cms/v3/blogs/posts/{objectId}/draft/reset_resetDraft']
  }
  '/cms/v3/blogs/posts/multi-language/attach-to-lang-group': {
    /**
     * Attach a Blog Post to a multi-language group
     * @description Attach a Blog Post to a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/posts/multi-language/attach-to-lang-group_attachToLangGroup']
  }
  '/cms/v3/blogs/posts/multi-language/set-new-lang-primary': {
    /**
     * Set a new primary language
     * @description Set a Blog Post as the primary language of a multi-language group.
     */
    put: operations['put-/cms/v3/blogs/posts/multi-language/set-new-lang-primary_setLangPrimary']
  }
  '/cms/v3/blogs/posts/{objectId}': {
    /**
     * Retrieve a Blog Post
     * @description Retrieve the Blog Post object identified by the id in the path.
     */
    get: operations['get-/cms/v3/blogs/posts/{objectId}_getById']
    /**
     * Delete a Blog Post
     * @description Delete the Blog Post object identified by the id in the path.
     */
    delete: operations['delete-/cms/v3/blogs/posts/{objectId}_archive']
    /**
     * Update a Blog Post
     * @description Sparse updates a single Blog Post object identified by the id in the path.
     * All the column values need not be specified. Only the that need to be modified can be specified.
     */
    patch: operations['patch-/cms/v3/blogs/posts/{objectId}_update']
  }
  '/cms/v3/blogs/posts/{objectId}/revisions': {
    /**
     * Retrieves all the previous versions of a blog post
     * @description Retrieves all the previous versions of a blog post.
     */
    get: operations['get-/cms/v3/blogs/posts/{objectId}/revisions_getPreviousVersions']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Wrapper for providing an array of strings as inputs. */
    BatchInputString: {
      /** @description Strings to input. */
      inputs: string[]
    }
    /** @description Model definition for a standard error. */
    StandardError: {
      /** @description Error subcategory. */
      subCategory?: Record<string, never>
      /** @description Error context. */
      context: {
        [key: string]: string[]
      }
      /** @description Error links. */
      links: {
        [key: string]: string
      }
      /** @description Error ID. */
      id?: string
      /** @description Error category. */
      category: string
      /** @description Error message. */
      message: string
      /** @description List of error details. */
      errors: components['schemas']['ErrorDetail'][]
      /** @description Error status. */
      status: string
    }
    /** @description Wrapper for providing an array of JSON nodes as inputs. */
    BatchInputJsonNode: {
      /** @description JSON nodes to input. */
      inputs: Record<string, never>[]
    }
    /** @description Request object for updating languages within a multi-language group. */
    UpdateLanguagesRequestVNext: {
      /** @description Map of object IDs to associated languages of object in the multi-language group. */
      languages: {
        [key: string]: string
      }
      /** @description ID of the primary object in the multi-language group. */
      primaryId: string
    }
    /** @description Request body object for setting a new primary language. */
    SetNewLanguagePrimaryRequestVNext: {
      /** @description ID of object to set as primary in multi-language group. */
      id: string
    }
    /** @description Response object for collections of blog post versions with pagination information. */
    CollectionResponseWithTotalVersionBlogPost: {
      /**
       * Format: int32
       * @description Total number of blog post versions.
       */
      total: number
      paging?: components['schemas']['Paging']
      /** @description Collection of blog post versions. */
      results: components['schemas']['VersionBlogPost'][]
    }
    /** @description A color defined by RGB values. */
    RGBAColor: {
      /** @description Alpha. */
      a: number
      /**
       * Format: int32
       * @description Red.
       */
      r: number
      /**
       * Format: int32
       * @description Blue.
       */
      b: number
      /**
       * Format: int32
       * @description Green.
       */
      g: number
    }
    /** @description Request body object for detaching objects from multi-language groups. */
    DetachFromLangGroupRequestVNext: {
      /** @description ID of the object to remove from a multi-language group. */
      id: string
    }
    RowMetaData: {
      cssClass: string
      styles: components['schemas']['Styles']
    }
    ContentLanguageVariation: {
      archivedInDashboard: boolean
      /** Format: date-time */
      created: string
      tagIds?: number[]
      /** Format: date-time */
      publishDate: string
      publicAccessRules: components['schemas']['PublicAccessRule'][]
      password: string
      authorName: string
      publicAccessRulesEnabled: boolean
      name: string
      campaign: string
      /** Format: int64 */
      id: number
      state: string
      /** Format: date-time */
      updated: string
      slug: string
    }
    /** @description Request body object for attaching objects to multi-language groups. */
    AttachToLangPrimaryRequestVNext: {
      /** @description Designated language of the object to add to a multi-language group. */
      language: string
      /** @description ID of the object to add to a multi-language group. */
      id: string
      /** @description ID of primary language object in multi-language group. */
      primaryId: string
      /** @description Primary language of the multi-language group. */
      primaryLanguage?: string
    }
    SideOrCorner: {
      horizontalSide: string
      verticalSide: string
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    /** @description Wrapper for providing an array of blog posts as inputs. */
    BatchInputBlogPost: {
      /** @description Blog posts to input. */
      inputs: components['schemas']['BlogPost'][]
    }
    /** @description Model definition for forward paging. */
    ForwardPaging: {
      next?: components['schemas']['NextPage']
    }
    /** @description Request body object for creating new blog post language variant. */
    BlogPostLanguageCloneRequestVNext: {
      /** @description Target language of new variant. */
      language?: string
      /** @description ID of blog post to clone. */
      id: string
    }
    /** @description Model definition for a version user. Contains addition information about the user who created a version. */
    VersionUser: {
      /** @description The first and last name of the User. */
      fullName: string
      /** @description The unique ID of the User. */
      id: string
      /** @description The email address of the user. */
      email: string
    }
    ColorStop: {
      color: components['schemas']['RGBAColor']
    }
    Gradient: {
      angle: components['schemas']['Angle']
      sideOrCorner: components['schemas']['SideOrCorner']
      colors: components['schemas']['ColorStop'][]
    }
    LayoutSection: {
      cssStyle: string
      label: string
      type: string
      /** @description null */
      params: {
        [key: string]: Record<string, never>
      }
      rows: {
        [key: string]: components['schemas']['LayoutSection']
      }[]
      rowMetaData: components['schemas']['RowMetaData'][]
      cells: components['schemas']['LayoutSection'][]
      cssClass: string
      /** Format: int32 */
      w: number
      cssId: string
      /** Format: int32 */
      x: number
      name: string
      styles: components['schemas']['Styles']
    }
    /** @description Model definition for paging. */
    Paging: {
      next?: components['schemas']['NextPage']
      prev?: components['schemas']['PreviousPage']
    }
    /** @description Model definition of a version of a blog post. */
    VersionBlogPost: {
      /** @description The id of the version. */
      id: string
      user: components['schemas']['VersionUser']
      object: components['schemas']['BlogPost']
      /** Format: date-time */
      updatedAt: string
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    /** @description Response object for batch operations on blog posts with errors. */
    BatchResponseBlogPostWithErrors: {
      /**
       * Format: date-time
       * @description Time of batch operation completion.
       */
      completedAt: string
      /**
       * Format: int32
       * @description Number of errors.
       */
      numErrors?: number
      /**
       * Format: date-time
       * @description Time of batch operation request.
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description Time of batch operation start.
       */
      startedAt: string
      /** @description Links associated with batch operation. */
      links?: {
        [key: string]: string
      }
      /** @description Results of batch operation. */
      results: components['schemas']['BlogPost'][]
      /** @description Errors in batch operation. */
      errors?: components['schemas']['StandardError'][]
      /**
       * @description Status of batch operation.
       * @enum {string}
       */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /** @description Model definition for a Blog Post. */
    BlogPost: {
      /**
       * Format: date-time
       * @description The date (ISO8601 format) the blog post is to be published at.
       */
      publishDate: string
      /**
       * @description The explicitly defined ISO 639 language code of the Blog Post. If null, the Blog Post will default to the language of the ParentBlog.
       * @enum {string}
       */
      language:
        | 'af'
        | 'af-na'
        | 'af-za'
        | 'agq'
        | 'agq-cm'
        | 'ak'
        | 'ak-gh'
        | 'am'
        | 'am-et'
        | 'ar'
        | 'ar-001'
        | 'ar-ae'
        | 'ar-bh'
        | 'ar-dj'
        | 'ar-dz'
        | 'ar-eg'
        | 'ar-eh'
        | 'ar-er'
        | 'ar-il'
        | 'ar-iq'
        | 'ar-jo'
        | 'ar-km'
        | 'ar-kw'
        | 'ar-lb'
        | 'ar-ly'
        | 'ar-ma'
        | 'ar-mr'
        | 'ar-om'
        | 'ar-ps'
        | 'ar-qa'
        | 'ar-sa'
        | 'ar-sd'
        | 'ar-so'
        | 'ar-ss'
        | 'ar-sy'
        | 'ar-td'
        | 'ar-tn'
        | 'ar-ye'
        | 'as'
        | 'as-in'
        | 'asa'
        | 'asa-tz'
        | 'ast'
        | 'ast-es'
        | 'az'
        | 'az-az'
        | 'bas'
        | 'bas-cm'
        | 'be'
        | 'be-by'
        | 'bem'
        | 'bem-zm'
        | 'bez'
        | 'bez-tz'
        | 'bg'
        | 'bg-bg'
        | 'bm'
        | 'bm-ml'
        | 'bn'
        | 'bn-bd'
        | 'bn-in'
        | 'bo'
        | 'bo-cn'
        | 'bo-in'
        | 'br'
        | 'br-fr'
        | 'brx'
        | 'brx-in'
        | 'bs'
        | 'bs-ba'
        | 'ca'
        | 'ca-ad'
        | 'ca-es'
        | 'ca-fr'
        | 'ca-it'
        | 'ccp'
        | 'ccp-bd'
        | 'ccp-in'
        | 'ce'
        | 'ce-ru'
        | 'ceb'
        | 'ceb-ph'
        | 'cgg'
        | 'cgg-ug'
        | 'chr'
        | 'chr-us'
        | 'ckb'
        | 'ckb-iq'
        | 'ckb-ir'
        | 'cs'
        | 'cs-cz'
        | 'cu'
        | 'cu-ru'
        | 'cy'
        | 'cy-gb'
        | 'da'
        | 'da-dk'
        | 'da-gl'
        | 'dav'
        | 'dav-ke'
        | 'de'
        | 'de-at'
        | 'de-be'
        | 'de-ch'
        | 'de-de'
        | 'de-gr'
        | 'de-it'
        | 'de-li'
        | 'de-lu'
        | 'dje'
        | 'dje-ne'
        | 'doi'
        | 'doi-in'
        | 'dsb'
        | 'dsb-de'
        | 'dua'
        | 'dua-cm'
        | 'dyo'
        | 'dyo-sn'
        | 'dz'
        | 'dz-bt'
        | 'ebu'
        | 'ebu-ke'
        | 'ee'
        | 'ee-gh'
        | 'ee-tg'
        | 'el'
        | 'el-cy'
        | 'el-gr'
        | 'en'
        | 'en-001'
        | 'en-150'
        | 'en-ae'
        | 'en-ag'
        | 'en-ai'
        | 'en-as'
        | 'en-at'
        | 'en-au'
        | 'en-bb'
        | 'en-be'
        | 'en-bi'
        | 'en-bm'
        | 'en-bs'
        | 'en-bw'
        | 'en-bz'
        | 'en-ca'
        | 'en-cc'
        | 'en-ch'
        | 'en-ck'
        | 'en-cm'
        | 'en-cn'
        | 'en-cx'
        | 'en-cy'
        | 'en-de'
        | 'en-dg'
        | 'en-dk'
        | 'en-dm'
        | 'en-er'
        | 'en-fi'
        | 'en-fj'
        | 'en-fk'
        | 'en-fm'
        | 'en-gb'
        | 'en-gd'
        | 'en-gg'
        | 'en-gh'
        | 'en-gi'
        | 'en-gm'
        | 'en-gu'
        | 'en-gy'
        | 'en-hk'
        | 'en-ie'
        | 'en-il'
        | 'en-im'
        | 'en-in'
        | 'en-io'
        | 'en-je'
        | 'en-jm'
        | 'en-ke'
        | 'en-ki'
        | 'en-kn'
        | 'en-ky'
        | 'en-lc'
        | 'en-lr'
        | 'en-ls'
        | 'en-lu'
        | 'en-mg'
        | 'en-mh'
        | 'en-mo'
        | 'en-mp'
        | 'en-ms'
        | 'en-mt'
        | 'en-mu'
        | 'en-mw'
        | 'en-mx'
        | 'en-my'
        | 'en-na'
        | 'en-nf'
        | 'en-ng'
        | 'en-nl'
        | 'en-nr'
        | 'en-nu'
        | 'en-nz'
        | 'en-pg'
        | 'en-ph'
        | 'en-pk'
        | 'en-pn'
        | 'en-pr'
        | 'en-pw'
        | 'en-rw'
        | 'en-sb'
        | 'en-sc'
        | 'en-sd'
        | 'en-se'
        | 'en-sg'
        | 'en-sh'
        | 'en-si'
        | 'en-sl'
        | 'en-ss'
        | 'en-sx'
        | 'en-sz'
        | 'en-tc'
        | 'en-tk'
        | 'en-to'
        | 'en-tt'
        | 'en-tv'
        | 'en-tz'
        | 'en-ug'
        | 'en-um'
        | 'en-us'
        | 'en-vc'
        | 'en-vg'
        | 'en-vi'
        | 'en-vu'
        | 'en-ws'
        | 'en-za'
        | 'en-zm'
        | 'en-zw'
        | 'eo'
        | 'eo-001'
        | 'es'
        | 'es-419'
        | 'es-ar'
        | 'es-bo'
        | 'es-br'
        | 'es-bz'
        | 'es-cl'
        | 'es-co'
        | 'es-cr'
        | 'es-cu'
        | 'es-do'
        | 'es-ea'
        | 'es-ec'
        | 'es-es'
        | 'es-gq'
        | 'es-gt'
        | 'es-hn'
        | 'es-ic'
        | 'es-mx'
        | 'es-ni'
        | 'es-pa'
        | 'es-pe'
        | 'es-ph'
        | 'es-pr'
        | 'es-py'
        | 'es-sv'
        | 'es-us'
        | 'es-uy'
        | 'es-ve'
        | 'et'
        | 'et-ee'
        | 'eu'
        | 'eu-es'
        | 'ewo'
        | 'ewo-cm'
        | 'fa'
        | 'fa-af'
        | 'fa-ir'
        | 'ff'
        | 'ff-bf'
        | 'ff-cm'
        | 'ff-gh'
        | 'ff-gm'
        | 'ff-gn'
        | 'ff-gw'
        | 'ff-lr'
        | 'ff-mr'
        | 'ff-ne'
        | 'ff-ng'
        | 'ff-sl'
        | 'ff-sn'
        | 'fi'
        | 'fi-fi'
        | 'fil'
        | 'fil-ph'
        | 'fo'
        | 'fo-dk'
        | 'fo-fo'
        | 'fr'
        | 'fr-be'
        | 'fr-bf'
        | 'fr-bi'
        | 'fr-bj'
        | 'fr-bl'
        | 'fr-ca'
        | 'fr-cd'
        | 'fr-cf'
        | 'fr-cg'
        | 'fr-ch'
        | 'fr-ci'
        | 'fr-cm'
        | 'fr-dj'
        | 'fr-dz'
        | 'fr-fr'
        | 'fr-ga'
        | 'fr-gf'
        | 'fr-gn'
        | 'fr-gp'
        | 'fr-gq'
        | 'fr-ht'
        | 'fr-km'
        | 'fr-lu'
        | 'fr-ma'
        | 'fr-mc'
        | 'fr-mf'
        | 'fr-mg'
        | 'fr-ml'
        | 'fr-mq'
        | 'fr-mr'
        | 'fr-mu'
        | 'fr-nc'
        | 'fr-ne'
        | 'fr-pf'
        | 'fr-pm'
        | 'fr-re'
        | 'fr-rw'
        | 'fr-sc'
        | 'fr-sn'
        | 'fr-sy'
        | 'fr-td'
        | 'fr-tg'
        | 'fr-tn'
        | 'fr-vu'
        | 'fr-wf'
        | 'fr-yt'
        | 'fur'
        | 'fur-it'
        | 'fy'
        | 'fy-nl'
        | 'ga'
        | 'ga-gb'
        | 'ga-ie'
        | 'gd'
        | 'gd-gb'
        | 'gl'
        | 'gl-es'
        | 'gsw'
        | 'gsw-ch'
        | 'gsw-fr'
        | 'gsw-li'
        | 'gu'
        | 'gu-in'
        | 'guz'
        | 'guz-ke'
        | 'gv'
        | 'gv-im'
        | 'ha'
        | 'ha-gh'
        | 'ha-ne'
        | 'ha-ng'
        | 'haw'
        | 'haw-us'
        | 'he'
        | 'hi'
        | 'hi-in'
        | 'hr'
        | 'hr-ba'
        | 'hr-hr'
        | 'hsb'
        | 'hsb-de'
        | 'hu'
        | 'hu-hu'
        | 'hy'
        | 'hy-am'
        | 'ia'
        | 'ia-001'
        | 'id'
        | 'ig'
        | 'ig-ng'
        | 'ii'
        | 'ii-cn'
        | 'id-id'
        | 'is'
        | 'is-is'
        | 'it'
        | 'it-ch'
        | 'it-it'
        | 'it-sm'
        | 'it-va'
        | 'he-il'
        | 'ja'
        | 'ja-jp'
        | 'jgo'
        | 'jgo-cm'
        | 'yi'
        | 'yi-001'
        | 'jmc'
        | 'jmc-tz'
        | 'jv'
        | 'jv-id'
        | 'ka'
        | 'ka-ge'
        | 'kab'
        | 'kab-dz'
        | 'kam'
        | 'kam-ke'
        | 'kde'
        | 'kde-tz'
        | 'kea'
        | 'kea-cv'
        | 'khq'
        | 'khq-ml'
        | 'ki'
        | 'ki-ke'
        | 'kk'
        | 'kk-kz'
        | 'kkj'
        | 'kkj-cm'
        | 'kl'
        | 'kl-gl'
        | 'kln'
        | 'kln-ke'
        | 'km'
        | 'km-kh'
        | 'kn'
        | 'kn-in'
        | 'ko'
        | 'ko-kp'
        | 'ko-kr'
        | 'kok'
        | 'kok-in'
        | 'ks'
        | 'ks-in'
        | 'ksb'
        | 'ksb-tz'
        | 'ksf'
        | 'ksf-cm'
        | 'ksh'
        | 'ksh-de'
        | 'kw'
        | 'kw-gb'
        | 'ku'
        | 'ku-tr'
        | 'ky'
        | 'ky-kg'
        | 'lag'
        | 'lag-tz'
        | 'lb'
        | 'lb-lu'
        | 'lg'
        | 'lg-ug'
        | 'lkt'
        | 'lkt-us'
        | 'ln'
        | 'ln-ao'
        | 'ln-cd'
        | 'ln-cf'
        | 'ln-cg'
        | 'lo'
        | 'lo-la'
        | 'lrc'
        | 'lrc-iq'
        | 'lrc-ir'
        | 'lt'
        | 'lt-lt'
        | 'lu'
        | 'lu-cd'
        | 'luo'
        | 'luo-ke'
        | 'luy'
        | 'luy-ke'
        | 'lv'
        | 'lv-lv'
        | 'mai'
        | 'mai-in'
        | 'mas'
        | 'mas-ke'
        | 'mas-tz'
        | 'mer'
        | 'mer-ke'
        | 'mfe'
        | 'mfe-mu'
        | 'mg'
        | 'mg-mg'
        | 'mgh'
        | 'mgh-mz'
        | 'mgo'
        | 'mgo-cm'
        | 'mi'
        | 'mi-nz'
        | 'mk'
        | 'mk-mk'
        | 'ml'
        | 'ml-in'
        | 'mn'
        | 'mn-mn'
        | 'mni'
        | 'mni-in'
        | 'mr'
        | 'mr-in'
        | 'ms'
        | 'ms-bn'
        | 'ms-id'
        | 'ms-my'
        | 'ms-sg'
        | 'mt'
        | 'mt-mt'
        | 'mua'
        | 'mua-cm'
        | 'my'
        | 'my-mm'
        | 'mzn'
        | 'mzn-ir'
        | 'naq'
        | 'naq-na'
        | 'nb'
        | 'nb-no'
        | 'nb-sj'
        | 'nd'
        | 'nd-zw'
        | 'nds'
        | 'nds-de'
        | 'nds-nl'
        | 'ne'
        | 'ne-in'
        | 'ne-np'
        | 'nl'
        | 'nl-aw'
        | 'nl-be'
        | 'nl-ch'
        | 'nl-bq'
        | 'nl-cw'
        | 'nl-lu'
        | 'nl-nl'
        | 'nl-sr'
        | 'nl-sx'
        | 'nmg'
        | 'nmg-cm'
        | 'nn'
        | 'nn-no'
        | 'nnh'
        | 'nnh-cm'
        | 'no'
        | 'no-no'
        | 'nus'
        | 'nus-ss'
        | 'nyn'
        | 'nyn-ug'
        | 'om'
        | 'om-et'
        | 'om-ke'
        | 'or'
        | 'or-in'
        | 'os'
        | 'os-ge'
        | 'os-ru'
        | 'pa'
        | 'pa-in'
        | 'pa-pk'
        | 'pcm'
        | 'pcm-ng'
        | 'pl'
        | 'pl-pl'
        | 'prg'
        | 'prg-001'
        | 'ps'
        | 'ps-af'
        | 'ps-pk'
        | 'pt'
        | 'pt-ao'
        | 'pt-br'
        | 'pt-ch'
        | 'pt-cv'
        | 'pt-gq'
        | 'pt-gw'
        | 'pt-lu'
        | 'pt-mo'
        | 'pt-mz'
        | 'pt-pt'
        | 'pt-st'
        | 'pt-tl'
        | 'qu'
        | 'qu-bo'
        | 'qu-ec'
        | 'qu-pe'
        | 'rm'
        | 'rm-ch'
        | 'rn'
        | 'rn-bi'
        | 'ro'
        | 'ro-md'
        | 'ro-ro'
        | 'rof'
        | 'rof-tz'
        | 'ru'
        | 'ru-by'
        | 'ru-kg'
        | 'ru-kz'
        | 'ru-md'
        | 'ru-ru'
        | 'ru-ua'
        | 'rw'
        | 'rw-rw'
        | 'rwk'
        | 'rwk-tz'
        | 'sa'
        | 'sa-in'
        | 'sah'
        | 'sah-ru'
        | 'saq'
        | 'saq-ke'
        | 'sat'
        | 'sat-in'
        | 'sbp'
        | 'sbp-tz'
        | 'sd'
        | 'sd-in'
        | 'sd-pk'
        | 'se'
        | 'se-fi'
        | 'se-no'
        | 'se-se'
        | 'seh'
        | 'seh-mz'
        | 'ses'
        | 'ses-ml'
        | 'sg'
        | 'sg-cf'
        | 'shi'
        | 'shi-ma'
        | 'si'
        | 'si-lk'
        | 'sk'
        | 'sk-sk'
        | 'sl'
        | 'sl-si'
        | 'smn'
        | 'smn-fi'
        | 'sn'
        | 'sn-zw'
        | 'so'
        | 'so-dj'
        | 'so-et'
        | 'so-ke'
        | 'so-so'
        | 'sq'
        | 'sq-al'
        | 'sq-mk'
        | 'sq-xk'
        | 'sr'
        | 'sr-ba'
        | 'sr-cs'
        | 'sr-me'
        | 'sr-rs'
        | 'sr-xk'
        | 'su'
        | 'su-id'
        | 'sv'
        | 'sv-ax'
        | 'sv-fi'
        | 'sv-se'
        | 'sw'
        | 'sw-cd'
        | 'sw-ke'
        | 'sw-tz'
        | 'sw-ug'
        | 'sy'
        | 'ta'
        | 'ta-in'
        | 'ta-lk'
        | 'ta-my'
        | 'ta-sg'
        | 'te'
        | 'te-in'
        | 'teo'
        | 'teo-ke'
        | 'teo-ug'
        | 'tg'
        | 'tg-tj'
        | 'th'
        | 'th-th'
        | 'ti'
        | 'ti-er'
        | 'ti-et'
        | 'tk'
        | 'tk-tm'
        | 'tl'
        | 'to'
        | 'to-to'
        | 'tr'
        | 'tr-cy'
        | 'tr-tr'
        | 'tt'
        | 'tt-ru'
        | 'twq'
        | 'twq-ne'
        | 'tzm'
        | 'tzm-ma'
        | 'ug'
        | 'ug-cn'
        | 'uk'
        | 'uk-ua'
        | 'ur'
        | 'ur-in'
        | 'ur-pk'
        | 'uz'
        | 'uz-af'
        | 'uz-uz'
        | 'vai'
        | 'vai-lr'
        | 'vi'
        | 'vi-vn'
        | 'vo'
        | 'vo-001'
        | 'vun'
        | 'vun-tz'
        | 'wae'
        | 'wae-ch'
        | 'wo'
        | 'wo-sn'
        | 'xh'
        | 'xh-za'
        | 'xog'
        | 'xog-ug'
        | 'yav'
        | 'yav-cm'
        | 'yo'
        | 'yo-bj'
        | 'yo-ng'
        | 'yue'
        | 'yue-cn'
        | 'yue-hk'
        | 'zgh'
        | 'zgh-ma'
        | 'zh'
        | 'zh-cn'
        | 'zh-hk'
        | 'zh-mo'
        | 'zh-sg'
        | 'zh-tw'
        | 'zh-hans'
        | 'zh-hant'
        | 'zu'
        | 'zu-za'
      /** @description Boolean to determine whether or not the styles from the template should be applied. */
      enableLayoutStylesheets: boolean
      /** @description A description that goes in <meta> tag on the page. */
      metaDescription: string
      /** @description List of stylesheets to attach to this blog post. These stylesheets are attached to just this page. Order of precedence is bottom to top, just like in the HTML. */
      attachedStylesheets: {
        [key: string]: Record<string, never>
      }[]
      /** @description Set this to create a password protected page. Entering the password will be required to view the page. */
      password: string
      /** @description The html title of this Blog Post. */
      htmlTitle: string
      /** @description Set this to true if you want to be published immediately when the schedule publish endpoint is called, and to ignore the publish_date setting. */
      publishImmediately: boolean
      translations: {
        [key: string]: components['schemas']['ContentLanguageVariation']
      }
      /** @description The unique ID of the Blog Post. */
      id: string
      /** @description An ENUM descibing the current state of this Blog Post. */
      state: string
      /** @description The path of the this blog post. This field is appended to the domain to construct the url of this post. */
      slug: string
      /** @description The ID of the user that created this Blog Post. */
      createdById: string
      /** @description The contents of the RSS body for this Blog Post. */
      rssBody: string
      currentlyPublished: boolean
      /** @description If True, the post will not show up in your dashboard, although the post could still be live. */
      archivedInDashboard: boolean
      /** Format: date-time */
      created: string
      /**
       * @description An ENUM descibing the type of this object. Should always be BLOG_POST.
       * @enum {string}
       */
      contentTypeCategory:
        | '0'
        | '1'
        | '2'
        | '3'
        | '4'
        | '5'
        | '6'
        | '7'
        | '8'
        | '9'
        | '10'
        | '11'
        | '12'
      mabExperimentId: string
      /** @description The ID of the user that updated this Blog Post. */
      updatedById: string
      /** @description ID of the primary blog post this object was translated from. */
      translatedFromId: string
      folderId: string
      /** @description A data structure containing the data for all the modules inside the containers for this post. This will only be populated if the page has widget containers. */
      widgetContainers: {
        [key: string]: Record<string, never>
      }
      /** Format: int64 */
      pageExpiryRedirectId: number
      /** Format: int32 */
      dynamicPageDataSourceType: number
      /** @description The featuredImage of this Blog Post. */
      featuredImage: string
      /** @description The name of the user that updated this Blog Post. */
      authorName: string
      /** @description The domain this Blog Post will resolve to. If null, the Blog Post will default to the domain of the ParentBlog. */
      domain: string
      /** @description The internal name of the Blog Post. */
      name: string
      /** @description The ID of the HubDB table this Blog Post references, if applicable */
      dynamicPageHubDbTableId: string
      /** @description The GUID of the marketing campaign this Blog Post is a part of. */
      campaign: string
      dynamicPageDataSourceId: string
      /** @description Boolean to determine whether or not the styles from the template should be applied. */
      enableDomainStylesheets: boolean
      /** @description Boolean to determine whether or not the Primary CSS Files should be applied. */
      includeDefaultCustomCss: boolean
      layoutSections: {
        [key: string]: components['schemas']['LayoutSection']
      }
      /** Format: date-time */
      updated: string
      /** @description Custom HTML for embed codes, javascript that should be placed before the </body> tag of the page. */
      footerHtml: string
      /** @description List of IDs for the tags associated with this Blog Post. */
      tagIds: number[]
      /** @description A data structure containing the data for all the modules for this page. */
      widgets: {
        [key: string]: Record<string, never>
      }
      /** @description The summary of the blog post that will appear on the main listing page. */
      postSummary: string
      /** @description Custom HTML for embed codes, javascript, etc. that goes in the <head> tag of the page. */
      headHtml: string
      pageExpiryRedirectUrl: string
      /** @enum {string} */
      abStatus:
        | 'master'
        | 'variant'
        | 'loser_variant'
        | 'mab_master'
        | 'mab_variant'
        | 'automated_master'
        | 'automated_variant'
        | 'automated_loser_variant'
      /** @description Boolean to determine if this post should use a featuredImage. */
      useFeaturedImage: boolean
      abTestId: string
      /** @description Alt Text of the featuredImage. */
      featuredImageAltText: string
      /** @description The ID of the Blog Author associated with this Blog Post. */
      blogAuthorId: string
      /** @description The ID of the parent Blog this Blog Post is associated with. */
      contentGroupId: string
      /** @description The contents of the RSS summary for this Blog Post. */
      rssSummary: string
      pageExpiryEnabled: boolean
      /** @description A generated field representing the URL of this blog post. */
      url: string
      /** @description Rules for require member registration to access private content. */
      publicAccessRules: components['schemas']['PublicAccessRule'][]
      /** @description Boolean to allow overriding the AMP settings for the blog. */
      enableGoogleAmpOutputOverride: boolean
      /**
       * Format: int64
       * @description The timestamp (ISO8601 format) when this Blog Post was deleted.
       */
      archivedAt: number
      /** @description The HTML of the main post body. */
      postBody: string
      themeSettingsValues: {
        [key: string]: Record<string, never>
      }
      /** Format: int64 */
      pageExpiryDate: number
      /** @description Boolean to determine whether or not to respect publicAccessRules. */
      publicAccessRulesEnabled: boolean
      /**
       * @description A generated ENUM descibing the current state of this Blog Post. Should always match state.
       * @enum {string}
       */
      currentState:
        | 'AUTOMATED'
        | 'AUTOMATED_DRAFT'
        | 'AUTOMATED_SENDING'
        | 'AUTOMATED_FOR_FORM'
        | 'AUTOMATED_FOR_FORM_BUFFER'
        | 'AUTOMATED_FOR_FORM_DRAFT'
        | 'AUTOMATED_FOR_FORM_LEGACY'
        | 'BLOG_EMAIL_DRAFT'
        | 'BLOG_EMAIL_PUBLISHED'
        | 'DRAFT'
        | 'DRAFT_AB'
        | 'DRAFT_AB_VARIANT'
        | 'ERROR'
        | 'LOSER_AB_VARIANT'
        | 'PAGE_STUB'
        | 'PRE_PROCESSING'
        | 'PROCESSING'
        | 'PUBLISHED'
        | 'PUBLISHED_AB'
        | 'PUBLISHED_AB_VARIANT'
        | 'PUBLISHED_OR_SCHEDULED'
        | 'RSS_TO_EMAIL_DRAFT'
        | 'RSS_TO_EMAIL_PUBLISHED'
        | 'SCHEDULED'
        | 'SCHEDULED_AB'
        | 'SCHEDULED_OR_PUBLISHED'
        | 'AUTOMATED_AB'
        | 'AUTOMATED_AB_VARIANT'
        | 'AUTOMATED_DRAFT_AB'
        | 'AUTOMATED_DRAFT_ABVARIANT'
        | 'AUTOMATED_LOSER_ABVARIANT'
      /**
       * Format: int32
       * @description ID of the type of object this is. Should always .
       */
      categoryId: number
      /** @description Optional override to set the URL to be used in the rel=canonical link tag on the page. */
      linkRelCanonicalUrl: string
    }
    /** @description Response object for batch operations on blog posts. */
    BatchResponseBlogPost: {
      /**
       * Format: date-time
       * @description Time of batch operation completion.
       */
      completedAt: string
      /**
       * Format: date-time
       * @description Time of batch operation request.
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description Time of batch operation start.
       */
      startedAt: string
      /** @description Links associated with batch operation. */
      links?: {
        [key: string]: string
      }
      /** @description Results of batch operation. */
      results: components['schemas']['BlogPost'][]
      /**
       * @description Status of batch operation.
       * @enum {string}
       */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /** @description Response object for collections of blog posts with pagination information. */
    CollectionResponseWithTotalBlogPostForwardPaging: {
      /**
       * Format: int32
       * @description Total number of blog posts.
       */
      total: number
      paging?: components['schemas']['ForwardPaging']
      /** @description Collection of blog posts. */
      results: components['schemas']['BlogPost'][]
    }
    PublicAccessRule: Record<string, never>
    BackgroundImage: {
      imageUrl: string
      backgroundSize: string
      backgroundPosition: string
    }
    Angle: {
      units: string
      value: number
    }
    /** @description Model definition for a previous page */
    PreviousPage: {
      before: string
      link?: string
    }
    /** @description Request body object for scheduling the publish of content */
    ContentScheduleRequestVNext: {
      /**
       * Format: date-time
       * @description The date the object should transition from scheduled to published.
       */
      publishDate: string
      /** @description The ID of the object to be scheduled. */
      id: string
    }
    /** @description Request body object for cloning content. */
    ContentCloneRequestVNext: {
      /** @description Name of the cloned object. */
      cloneName?: string
      /** @description ID of the object to be cloned. */
      id: string
    }
    /** @description Model definition for a next page. */
    NextPage: {
      link?: string
      after: string
    }
    Styles: {
      backgroundColor: components['schemas']['RGBAColor']
      flexboxPositioning: string
      backgroundImage: components['schemas']['BackgroundImage']
      forceFullWidthSection: boolean
      verticalAlignment: string
      /** Format: int32 */
      maxWidthSectionCentering: number
      backgroundGradient: components['schemas']['Gradient']
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Schedule a Blog Post to be Published
   * @description Schedule a Blog Post to be Published.
   */
  'post-/cms/v3/blogs/posts/schedule_schedule': {
    /** @description The JSON representation of the ContentScheduleRequestVNext object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentScheduleRequestVNext']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieve a batch of Blog Posts
   * @description Retrieve the Blog Post objects identified in the request body.
   */
  'post-/cms/v3/blogs/posts/batch/read_readBatch': {
    parameters: {
      query?: {
        /** @description Specifies whether to return deleted Blog Posts. Defaults to `false`. */
        archived?: boolean
      }
    }
    /** @description The JSON array of Blog Post ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPost']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPostWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update languages of multi-language group
   * @description Explicitly set new languages for each Blog Post in a multi-language group.
   */
  'post-/cms/v3/blogs/posts/multi-language/update-languages_updateLangs': {
    /** @description The JSON representation of the SetNewLanguagePrimaryRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLanguagesRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a batch of Blog Posts
   * @description Create the Blog Post objects detailed in the request body.
   */
  'post-/cms/v3/blogs/posts/batch/create_createBatch': {
    /** @description The JSON array of new Blog Posts to create. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputBlogPost']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPost']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPostWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a batch of Blog Posts
   * @description Update the Blog Post objects identified in the request body.
   */
  'post-/cms/v3/blogs/posts/batch/update_updateBatch': {
    parameters: {
      query?: {
        /** @description Specifies whether to update deleted Blog Posts. Defaults to `false`. */
        archived?: boolean
      }
    }
    /** @description A JSON array of the JSON representations of the updated Blog Posts. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputJsonNode']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPost']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseBlogPostWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieve the full draft version of the Blog Post
   * @description Retrieve the full draft version of the Blog Post.
   */
  'get-/cms/v3/blogs/posts/{objectId}/draft_getDraftById': {
    parameters: {
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a Blog Post draft
   * @description Sparse updates the draft version of a single Blog Post object identified by the id in the path.
   * All the column values need not be specified. Only the that need to be modified can be specified.
   */
  'patch-/cms/v3/blogs/posts/{objectId}/draft_updateDraft': {
    parameters: {
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    /** @description The JSON representation of the updated Blog Post to be applied to the draft. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BlogPost']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieves a previous version of a blog post
   * @description Retrieves a previous version of a blog post.
   */
  'get-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}_getPreviousVersion': {
    parameters: {
      path: {
        /** @description The Blog Post id. */
        objectId: string
        /** @description The Blog Post version id. */
        revisionId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['VersionBlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Restore a previous version of a blog post, to the draft version of the blog post
   * @description Takes a specified version of a blog post, sets it as the new draft version of the blog post.
   */
  'post-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore-to-draft_restorePreviousVersionToDraft': {
    parameters: {
      path: {
        /** @description The Blog Post id. */
        objectId: string
        /** @description The Blog Post version id to restore. */
        revisionId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new language variation
   * @description Create a new language variation from an existing Blog Post
   */
  'post-/cms/v3/blogs/posts/multi-language/create-language-variation_createLangVariation': {
    /** @description The JSON representation of the BlogPostLanguageCloneRequestVNext object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BlogPostLanguageCloneRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get all Blog Posts
   * @description Get the list of blog posts. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
   */
  'get-/cms/v3/blogs/posts_getPage': {
    parameters: {
      query?: {
        /** @description Only return Blog Posts created at exactly the specified time. */
        createdAt?: string
        /** @description Only return Blog Posts created after the specified time. */
        createdAfter?: string
        /** @description Only return Blog Posts created before the specified time. */
        createdBefore?: string
        /** @description Only return Blog Posts last updated at exactly the specified time. */
        updatedAt?: string
        /** @description Only return Blog Posts last updated after the specified time. */
        updatedAfter?: string
        /** @description Only return Blog Posts last updated before the specified time. */
        updatedBefore?: string
        /** @description Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is 20. */
        limit?: number
        /** @description Specifies whether to return deleted Blog Posts. Defaults to `false`. */
        archived?: boolean
        property?: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalBlogPostForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new Blog Post
   * @description Create a new Blog Post.
   */
  'post-/cms/v3/blogs/posts_create': {
    /** @description The JSON representation of a new Blog Post. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BlogPost']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Clone a Blog Post
   * @description Clone a Blog Post.
   */
  'post-/cms/v3/blogs/posts/clone_clone': {
    /** @description The JSON representation of the ContentCloneRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentCloneRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Restore a previous version of a blog post
   * @description Takes a specified version of a blog post and restores it.
   */
  'post-/cms/v3/blogs/posts/{objectId}/revisions/{revisionId}/restore_restorePreviousVersion': {
    parameters: {
      path: {
        /** @description The Blog Post id. */
        objectId: string
        /** @description The Blog Post version id to restore. */
        revisionId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Detach a Blog Post from a multi-language group
   * @description Detach a Blog Post from a multi-language group.
   */
  'post-/cms/v3/blogs/posts/multi-language/detach-from-lang-group_detachFromLangGroup': {
    /** @description The JSON representation of the DetachFromLangGroupRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['DetachFromLangGroupRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Push Blog Post draft edits live
   * @description Take any changes from the draft version of the Blog Post and apply them to the live version.
   */
  'post-/cms/v3/blogs/posts/{objectId}/draft/push-live_pushLive': {
    parameters: {
      path: {
        /** @description The id of the Blog Post for which it's draft will be pushed live. */
        objectId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Delete a batch of Blog Posts
   * @description Delete the Blog Post objects identified in the request body.
   * Note: This is not the same as the in-app `archive` function. To perform a dashboard `archive` send an normal update with the `archivedInDashboard` field set to true.
   */
  'post-/cms/v3/blogs/posts/batch/archive_archiveBatch': {
    /** @description The JSON array of Blog Post ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Reset the Blog Post draft to the live version
   * @description Discards any edits and resets the draft to the live version.
   */
  'post-/cms/v3/blogs/posts/{objectId}/draft/reset_resetDraft': {
    parameters: {
      path: {
        /** @description The id of the Blog Post for which it's draft will be reset. */
        objectId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Attach a Blog Post to a multi-language group
   * @description Attach a Blog Post to a multi-language group.
   */
  'post-/cms/v3/blogs/posts/multi-language/attach-to-lang-group_attachToLangGroup': {
    /** @description The JSON representation of the AttachToLangPrimaryRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['AttachToLangPrimaryRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Set a new primary language
   * @description Set a Blog Post as the primary language of a multi-language group.
   */
  'put-/cms/v3/blogs/posts/multi-language/set-new-lang-primary_setLangPrimary': {
    /** @description The JSON representation of the SetNewLanguagePrimaryRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['SetNewLanguagePrimaryRequestVNext']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieve a Blog Post
   * @description Retrieve the Blog Post object identified by the id in the path.
   */
  'get-/cms/v3/blogs/posts/{objectId}_getById': {
    parameters: {
      query?: {
        /** @description Specifies whether to return deleted Blog Posts. Defaults to `false`. */
        archived?: boolean
        property?: string
      }
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Delete a Blog Post
   * @description Delete the Blog Post object identified by the id in the path.
   */
  'delete-/cms/v3/blogs/posts/{objectId}_archive': {
    parameters: {
      query?: {
        /** @description Whether to return only results that have been archived. */
        archived?: boolean
      }
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a Blog Post
   * @description Sparse updates a single Blog Post object identified by the id in the path.
   * All the column values need not be specified. Only the that need to be modified can be specified.
   */
  'patch-/cms/v3/blogs/posts/{objectId}_update': {
    parameters: {
      query?: {
        /** @description Specifies whether to update deleted Blog Posts. Defaults to `false`. */
        archived?: boolean
      }
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    /** @description The JSON representation of the updated Blog Post. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BlogPost']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieves all the previous versions of a blog post
   * @description Retrieves all the previous versions of a blog post.
   */
  'get-/cms/v3/blogs/posts/{objectId}/revisions_getPreviousVersions': {
    parameters: {
      query?: {
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        before?: string
        /** @description The maximum number of results to return. Default is 100. */
        limit?: number
      }
      path: {
        /** @description The Blog Post id. */
        objectId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalVersionBlogPost']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
