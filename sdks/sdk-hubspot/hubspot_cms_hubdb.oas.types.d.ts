/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft/export': {
    /**
     * Export a draft table
     * @description Exports the `draft` version of a table to CSV / EXCEL format.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/draft/export_exportDraftTable']
  }
  '/cms/v3/hubdb/tables/draft': {
    /**
     * Return all draft tables
     * @description Returns the details for each draft table defined in the specified account, including column definitions.
     */
    get: operations['get-/cms/v3/hubdb/tables/draft_getAllDraftTables']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft': {
    /**
     * Get rows from draft table
     * @description Returns rows in the `draft` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft_readDraftTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}': {
    /**
     * Get a table row
     * @description Get a single row by ID from a table's `published` version.
     * **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}_getTableRow']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone': {
    /**
     * Clone a row
     * @description Clones a single row in the `draft` version of the table.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone_cloneDraftTableRow']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset': {
    /**
     * Reset a draft table
     * @description Replaces the data in the `draft` version of the table with values from the `published` version. Any unpublished changes in the `draft` will be lost after this call is made.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset_resetDraftTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/export': {
    /**
     * Export a published version of a table
     * @description Exports the `published` version of a table to CSV / EXCEL format.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/export_exportTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace': {
    /**
     * Replace rows in batch in draft table
     * @description Replaces multiple rows as a batch in the `draft` version of the table, with a maximum of 100 rows per call. See the endpoint `PUT /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace_replaceDraftTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone': {
    /**
     * Clone a table
     * @description Clone an existing HubDB table. The `newName` and `newLabel` of the new table can be sent as JSON in the `body` parameter. This will create the cloned table as a `draft`.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone_cloneDraftTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge': {
    /**
     * Permanently deletes rows
     * @description Permanently deletes rows from the `draft` version of the table, given a set of row ids. Maximum of 100 row ids per call.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge_purgeDraftTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft/import': {
    /**
     * Import data into draft table
     * @description Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the `draft` version of the table. Use `/publish` endpoint to push these changes to `published` version.
     * This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as `config`.  The second part will be the CSV file you want to import and you can specify this with the name as `file`. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/import_importDraftTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft': {
    /**
     * Get a row from the draft table
     * @description Get a single row by ID from a table's `draft` version.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_getDraftTableRowById']
    /**
     * Replaces an existing row
     * @description Replace a single row in the table's `draft` version.
     * All the column values must be specified. If a column has a value in the target table and this request doesn't define that value, it will be deleted.
     * See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
     */
    put: operations['put-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_replaceDraftTableRow']
    /**
     * Permanently deletes a row
     * @description Permanently deletes a row from a table's `draft` version.
     */
    delete: operations['delete-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_purgeDraftTableRow']
    /**
     * Updates an existing row
     * @description Sparse updates a single row in the table's `draft` version.
     * All the column values need not be specified. Only the columns or fields that needs to be modified can be specified.
     * See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
     */
    patch: operations['patch-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_updateDraftTableRow']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows': {
    /**
     * Get rows for a table
     * @description Returns a set of rows in the `published` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
     * **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/rows_getTableRows']
    /**
     * Add a new row to a table
     * @description Add a new row to a HubDB table. New rows will be added to the `draft` version of the table. Use `publish` endpoint to push these changes to published version.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows_createTableRow']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read': {
    /**
     * Get a set of rows
     * @description Returns rows in the `published` version of the specified table, given a set of row ids.
     * **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read_readTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create': {
    /**
     * Create rows in batch
     * @description Creates rows in the `draft` version of the specified table, given an array of row objects. Maximum of 100 row object per call. See the overview section for more details with an example.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create_createDraftTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}': {
    /**
     * Get details for a published table
     * @description Returns the details for the `published` version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.
     *
     * **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}_getTableDetails']
    /**
     * Archive a table
     * @description Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
     */
    delete: operations['delete-/cms/v3/hubdb/tables/{tableIdOrName}_archiveTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read': {
    /**
     * Get a set of rows from draft table
     * @description Returns rows in the `draft` version of the specified table, given a set of row ids.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read_readDraftTableRows']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone': {
    /**
     * Clone rows in batch
     * @description Clones rows in the `draft` version of the specified table, given a set of row ids. Maximum of 100 row ids per call.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone_cloneDraftTableRows']
  }
  '/cms/v3/hubdb/tables': {
    /**
     * Get all published tables
     * @description Returns the details for the `published` version of each table defined in an account, including column definitions.
     */
    get: operations['get-/cms/v3/hubdb/tables_getAllTables']
    /**
     * Create a new table
     * @description Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
     */
    post: operations['post-/cms/v3/hubdb/tables_createTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/unpublish': {
    /**
     * Unpublish a table
     * @description Unpublishes the table, meaning any website pages using data from the table will not render any data.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/unpublish_unpublishTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft': {
    /**
     * Get details for a draft table
     * @description Get the details for the `draft` version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
     */
    get: operations['get-/cms/v3/hubdb/tables/{tableIdOrName}/draft_getDraftTableDetailsById']
    /**
     * Update an existing table
     * @description Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the `draft` verion of the table. Use `publish` endpoint to push all the changes to the `published` version. To restore a table, include the query parameter `archived=true` and `"archived": false` in the json body.
     * **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
     */
    patch: operations['patch-/cms/v3/hubdb/tables/{tableIdOrName}/draft_updateDraftTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish': {
    /**
     * Publish a table from draft
     * @description Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish_publishDraftTable']
  }
  '/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update': {
    /**
     * Update rows in batch in draft table
     * @description Updates multiple rows as a batch in the `draft` version of the table, with a maximum of 100 rows per call. See the endpoint `PATCH /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
     */
    post: operations['post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update_updateDraftTableRows']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    BatchInputString: {
      inputs: string[]
    }
    StandardError: {
      subCategory?: Record<string, never>
      context: {
        [key: string]: string[]
      }
      links: {
        [key: string]: string
      }
      id?: string
      category: string
      message: string
      errors: components['schemas']['ErrorDetail'][]
      status: string
    }
    /**
     * @example {
     *   "newName": "test_table_new",
     *   "newLabel": "Test Table New",
     *   "copyRows": "true"
     * }
     */
    HubDbTableCloneRequest: {
      /**
       * @description The new name for the cloned table
       * @example test_table_new
       */
      newName?: string
      /**
       * @description The new label for the cloned table
       * @example Test Table New
       */
      newLabel?: string
      /**
       * @description Specifies whether to copy the rows during clone
       * @example true
       */
      copyRows: boolean
    }
    SimpleUser: {
      firstName: string
      lastName: string
      id: string
      email: string
    }
    CollectionResponseWithTotalHubDbTableV3ForwardPaging: {
      /** Format: int32 */
      total: number
      paging?: components['schemas']['ForwardPaging']
      results: components['schemas']['HubDbTableV3'][]
    }
    BatchInputHubDbTableRowV3Request: {
      inputs: components['schemas']['HubDbTableRowV3Request'][]
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    ForwardPaging: {
      next?: components['schemas']['NextPage']
    }
    CollectionResponseWithTotalHubDbTableRowV3ForwardPaging: {
      /** Format: int32 */
      total: number
      paging?: components['schemas']['ForwardPaging']
      results: components['schemas']['HubDbTableRowV3'][]
    }
    /**
     * @example {
     *   "name": "text_column",
     *   "label": "Text Column",
     *   "archived": false,
     *   "type": "TEXT",
     *   "id": 1
     * }
     */
    Column: {
      /**
       * Format: int64
       * @description Foreign table id referenced
       */
      foreignTableId?: number
      description?: string
      /**
       * @description Label of the column
       * @example Text Column
       */
      label: string
      /**
       * @description Type of the column
       * @example TEXT
       * @enum {string}
       */
      type:
        | 'NULL'
        | 'TEXT'
        | 'NUMBER'
        | 'URL'
        | 'IMAGE'
        | 'SELECT'
        | 'MULTISELECT'
        | 'BOOLEAN'
        | 'LOCATION'
        | 'DATE'
        | 'DATETIME'
        | 'CURRENCY'
        | 'RICHTEXT'
        | 'FOREIGN_ID'
        | 'VIDEO'
        | 'CTA'
        | 'FILE'
      /**
       * Format: int32
       * @description Number of options available
       */
      optionCount?: number
      /** @description Foreign Ids */
      foreignIds?: components['schemas']['ForeignId'][]
      deleted?: boolean
      /**
       * @description Name of the column
       * @example text_column
       */
      name: string
      /** @description Options to choose for select and multi-select columns */
      options?: components['schemas']['Option'][]
      /**
       * Format: int32
       * @description Column width for HubDB UI
       */
      width?: number
      /**
       * @description Column Id
       * @example 1
       */
      id?: string
      /** @description Foreign ids */
      foreignIdsById?: {
        [key: string]: components['schemas']['ForeignId']
      }
      /**
       * Format: int32
       * @description Foreign Column id
       */
      foreignColumnId?: number
      /** @description Foreign ids by name */
      foreignIdsByName?: {
        [key: string]: components['schemas']['ForeignId']
      }
    }
    /**
     * @description Model for HubDB table
     * @example {
     *   "id": "1630034",
     *   "label": "Test Table",
     *   "name": "test_table",
     *   "createdAt": "2019-03-15T21:20:51.556Z",
     *   "publishedAt": "2020-04-02T16:00:45.009Z",
     *   "updatedAt": "2020-04-02T16:00:43.880Z",
     *   "columns": [
     *     {
     *       "name": "text_column",
     *       "label": "Text Column",
     *       "id": "1",
     *       "archived": false,
     *       "foreignIdsById": {},
     *       "foreignIdsByName": {},
     *       "type": "TEXT"
     *     }
     *   ],
     *   "archived": false,
     *   "rowCount": 0,
     *   "useForPages": true,
     *   "allowChildTables": true,
     *   "enableChildTablePages": false,
     *   "dynamicMetaTags": {},
     *   "allowPublicApiAccess": false,
     *   "columnCount": 3
     * }
     */
    HubDbTableV3: {
      /**
       * @description Specifies the key value pairs of the metadata fields with the associated column ids
       * @example {}
       */
      dynamicMetaTags?: {
        [key: string]: number
      }
      updatedBy?: components['schemas']['SimpleUser']
      /**
       * @description Specifies whether the table can be read by public without authorization
       * @example false
       */
      allowPublicApiAccess?: boolean
      /**
       * @description Specifies whether the table can be used for creation of dynamic pages
       * @example true
       */
      useForPages?: boolean
      /**
       * Format: date-time
       * @description Timestamp at which the table is published recently
       */
      publishedAt?: string
      /**
       * @description List of columns in the table
       * @example [
       *   {
       *     "id": "1",
       *     "name": "text_column",
       *     "type": "TEXT",
       *     "label": "Text Column",
       *     "archived": false,
       *     "foreignIdsById": {},
       *     "foreignIdsByName": {}
       *   }
       * ]
       */
      columns?: components['schemas']['Column'][]
      /**
       * @description Label of the table
       * @example Test Table
       */
      label: string
      published?: boolean
      /**
       * Format: int32
       * @description Number of columns including deleted
       * @example 3
       */
      columnCount?: number
      /**
       * @description Specifies whether child tables can be created
       * @example true
       */
      allowChildTables?: boolean
      /**
       * Format: date-time
       * @description Timestamp at which the table is created
       */
      createdAt?: string
      deleted?: boolean
      createdBy?: components['schemas']['SimpleUser']
      /**
       * @description Name of the table
       * @example test_table
       */
      name: string
      /**
       * @description Specifies creation of multi-level dynamic pages using child tables
       * @example false
       */
      enableChildTablePages?: boolean
      /**
       * @description Id of the table
       * @example 1630034
       */
      id?: string
      /**
       * Format: int32
       * @description Number of rows in the table
       * @example 0
       */
      rowCount?: number
      isOrderedManually?: boolean
      /**
       * Format: date-time
       * @description Timestamp at which the table is updated recently
       */
      updatedAt?: string
    }
    BatchResponseHubDbTableRowV3: {
      /** Format: date-time */
      completedAt?: string
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt?: string
      links?: {
        [key: string]: string
      }
      results?: components['schemas']['HubDbTableRowV3'][]
      /** @enum {string} */
      status?: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    ForeignId: {
      name: string
      id: string
      type: string
    }
    /** @description The result of import operation */
    ImportResult: {
      /** @description Specifies whether row limit exceeded during import */
      rowLimitExceeded: boolean
      /**
       * Format: int32
       * @description Specifies number of duplicate rows
       */
      duplicateRows: number
      /**
       * Format: int32
       * @description Specifies number of rows imported
       */
      rowsImported: number
      /** @description List of errors during import */
      errors: components['schemas']['Error'][]
    }
    /**
     * @example {
     *   "label": "Test Table",
     *   "name": "test_table",
     *   "columns": [
     *     {
     *       "name": "text_column",
     *       "label": "Text Column",
     *       "id": "1",
     *       "type": "TEXT"
     *     }
     *   ],
     *   "useForPages": true,
     *   "allowChildTables": true,
     *   "enableChildTablePages": false,
     *   "dynamicMetaTags": {},
     *   "allowPublicApiAccess": false
     * }
     */
    HubDbTableV3Request: {
      /**
       * @description Specifies the key value pairs of the metadata fields with the associated column ids
       * @example {}
       */
      dynamicMetaTags?: {
        [key: string]: number
      }
      /**
       * @description Specifies whether the table can be read by public without authorization
       * @example false
       */
      allowPublicApiAccess?: boolean
      /**
       * @description Specifies whether the table can be used for creation of dynamic pages
       * @example true
       */
      useForPages?: boolean
      /**
       * @description List of columns in the table
       * @example [
       *   {
       *     "id": "1",
       *     "name": "text_column",
       *     "type": "TEXT",
       *     "label": "Text Column"
       *   }
       * ]
       */
      columns?: components['schemas']['ColumnRequest'][]
      /**
       * @description Name of the table
       * @example test_table
       */
      name: string
      /**
       * @description Specifies creation of multi-level dynamic pages using child tables
       * @example false
       */
      enableChildTablePages?: boolean
      /**
       * @description Label of the table
       * @example Test Table
       */
      label: string
      /**
       * @description Specifies whether child tables can be created
       * @example true
       */
      allowChildTables?: boolean
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    BatchResponseHubDbTableRowV3WithErrors: {
      /** Format: date-time */
      completedAt: string
      /** Format: int32 */
      numErrors?: number
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['HubDbTableRowV3'][]
      errors?: components['schemas']['StandardError'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /**
     * @example {
     *   "name": "text_column",
     *   "label": "Text Column",
     *   "archived": false,
     *   "type": "TEXT",
     *   "id": 1
     * }
     */
    ColumnRequest: {
      /**
       * Format: int64
       * @description The id of another table to which the column refers/points to.
       */
      foreignTableId?: number
      /**
       * @description Name of the column
       * @example text_column
       */
      name: string
      /** @description Options to choose for select and multi-select columns */
      options: components['schemas']['Option'][]
      /**
       * Format: int32
       * @description Column Id
       * @example 1
       */
      id: number
      /**
       * @description Label of the column
       * @example Text Column
       */
      label: string
      /**
       * @description Type of the column
       * @example TEXT
       * @enum {string}
       */
      type:
        | 'NULL'
        | 'TEXT'
        | 'NUMBER'
        | 'URL'
        | 'IMAGE'
        | 'SELECT'
        | 'MULTISELECT'
        | 'BOOLEAN'
        | 'LOCATION'
        | 'DATE'
        | 'DATETIME'
        | 'CURRENCY'
        | 'RICHTEXT'
        | 'FOREIGN_ID'
        | 'VIDEO'
        | 'CTA'
        | 'FILE'
      /**
       * Format: int32
       * @description The id of the column from another table to which the column refers/points to.
       */
      foreignColumnId?: number
    }
    Variant: Record<string, never>
    /**
     * @example {
     *   "id": "4099275931",
     *   "values": {
     *     "text_column": "sample text value",
     *     "number_column": 76,
     *     "multiselect": [
     *       {
     *         "id": "1",
     *         "name": "Option 1",
     *         "type": "option",
     *         "order": 0
     *       },
     *       {
     *         "id": "2",
     *         "name": "Option 2",
     *         "type": "option",
     *         "order": 1
     *       }
     *     ]
     *   },
     *   "path": "test_path",
     *   "name": "test_title",
     *   "childTableId": "1902373"
     * }
     */
    HubDbTableRowV3BatchUpdateRequest: {
      /**
       * @description Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
       * @example test_path
       */
      path?: string
      /**
       * Format: int32
       * @description Specifies the value for the column child table id
       * @example 1902373
       */
      childTableId?: number
      /**
       * @description List of key value pairs with the column name and column value
       * @example {
       *   "multiselect": [
       *     {
       *       "id": "1",
       *       "name": "Option 1",
       *       "type": "option",
       *       "order": 0
       *     },
       *     {
       *       "id": "2",
       *       "name": "Option 2",
       *       "type": "option",
       *       "order": 1
       *     }
       *   ],
       *   "text_column": "sample text value",
       *   "number_column": 76
       * }
       */
      values: {
        [key: string]: components['schemas']['Variant']
      }
      /**
       * @description Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
       * @example test_title
       */
      name?: string
      /**
       * @description The id of the table row
       * @example 4099275931
       */
      id: string
      /** Format: int32 */
      displayIndex?: number
    }
    /**
     * @example {
     *   "id": "4099275931",
     *   "createdAt": "2020-03-30T20:39:52.328Z",
     *   "updatedAt": "2020-03-30T20:39:52.328Z",
     *   "values": {
     *     "text_column": "sample text value",
     *     "number_column": 76,
     *     "multiselect": [
     *       {
     *         "id": "1",
     *         "name": "Option 1",
     *         "type": "option",
     *         "order": 0
     *       },
     *       {
     *         "id": "2",
     *         "name": "Option 2",
     *         "type": "option",
     *         "order": 1
     *       }
     *     ]
     *   },
     *   "path": "test_path",
     *   "name": "test_title",
     *   "childTableId": "1902373"
     * }
     */
    HubDbTableRowV3: {
      /**
       * @description Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
       * @example test_path
       */
      path?: string
      /**
       * Format: date-time
       * @description Timestamp at which the row is created
       */
      createdAt?: string
      /**
       * @description Specifies the value for the column child table id
       * @example 1902373
       */
      childTableId?: string
      /** Format: date-time */
      publishedAt?: string
      /**
       * @description List of key value pairs with the column name and column value
       * @example {
       *   "multiselect": [
       *     {
       *       "id": "1",
       *       "name": "Option 1",
       *       "type": "option",
       *       "order": 0
       *     },
       *     {
       *       "id": "2",
       *       "name": "Option 2",
       *       "type": "option",
       *       "order": 1
       *     }
       *   ],
       *   "text_column": "sample text value",
       *   "number_column": 76
       * }
       */
      values: {
        [key: string]: Record<string, never>
      }
      /**
       * @description Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
       * @example test_title
       */
      name?: string
      /**
       * @description The id of the table row
       * @example 4099275931
       */
      id?: string
      /**
       * Format: date-time
       * @description Timestamp at which the row is updated last time
       */
      updatedAt?: string
    }
    /**
     * @example {
     *   "values": {
     *     "text_column": "sample text value",
     *     "number_column": 76,
     *     "multiselect": [
     *       {
     *         "id": "1",
     *         "name": "Option 1",
     *         "type": "option",
     *         "order": 0
     *       },
     *       {
     *         "id": "2",
     *         "name": "Option 2",
     *         "type": "option",
     *         "order": 1
     *       }
     *     ]
     *   },
     *   "path": "test_path",
     *   "name": "test_title",
     *   "childTableId": "1902373"
     * }
     */
    HubDbTableRowV3Request: {
      /**
       * @description Specifies the value for `hs_path` column, which will be used as slug in the dynamic pages
       * @example test_path
       */
      path?: string
      /**
       * Format: int32
       * @description Specifies the value for the column child table id
       * @example 1902373
       */
      childTableId?: number
      /**
       * @description List of key value pairs with the column name and column value
       * @example {
       *   "multiselect": [
       *     {
       *       "id": "1",
       *       "name": "Option 1",
       *       "type": "option",
       *       "order": 0
       *     },
       *     {
       *       "id": "2",
       *       "name": "Option 2",
       *       "type": "option",
       *       "order": 1
       *     }
       *   ],
       *   "text_column": "sample text value",
       *   "number_column": 76
       * }
       */
      values: {
        [key: string]: components['schemas']['Variant']
      }
      /**
       * @description Specifies the value for `hs_name` column, which will be used as title in the dynamic pages
       * @example test_title
       */
      name?: string
      /** Format: int32 */
      displayIndex?: number
    }
    Option: {
      name: string
      id: string
      label?: string
      type: string
      /** Format: int32 */
      order: number
    }
    NextPage: {
      link?: string
      after: string
    }
    BatchInputHubDbTableRowV3BatchUpdateRequest: {
      inputs: components['schemas']['HubDbTableRowV3BatchUpdateRequest'][]
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Export a draft table
   * @description Exports the `draft` version of a table to CSV / EXCEL format.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/draft/export_exportDraftTable': {
    parameters: {
      query?: {
        /** @description The file format to export. Possible values include `CSV`, `XLSX`, and `XLS`. */
        format?: string
      }
      path: {
        /** @description The ID or name of the table to export. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/vnd.ms-excel': string
          'text/csv': string
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Return all draft tables
   * @description Returns the details for each draft table defined in the specified account, including column definitions.
   */
  'get-/cms/v3/hubdb/tables/draft_getAllDraftTables': {
    parameters: {
      query?: {
        /** @description Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is 1000. */
        limit?: number
        /** @description Only return tables created at exactly the specified time. */
        createdAt?: string
        /** @description Only return tables created after the specified time. */
        createdAfter?: string
        /** @description Only return tables created before the specified time. */
        createdBefore?: string
        /** @description Only return tables last updated at exactly the specified time. */
        updatedAt?: string
        /** @description Only return tables last updated after the specified time. */
        updatedAfter?: string
        /** @description Only return tables last updated before the specified time. */
        updatedBefore?: string
        /** @description Specifies whether to return archived tables. Defaults to `false`. */
        archived?: boolean
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalHubDbTableV3ForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get rows from draft table
   * @description Returns rows in the `draft` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft_readDraftTableRows': {
    parameters: {
      query?: {
        /** @description Specifies the column names to sort the results by. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is `1000`. */
        limit?: number
        /** @description Specify the column names to get results containing only the required columns instead of all column details. If you want to include multiple columns in the result, use this query param as many times. */
        properties?: string[]
      }
      path: {
        /** @description The ID or name of the table to query. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalHubDbTableRowV3ForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get a table row
   * @description Get a single row by ID from a table's `published` version.
   * **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}_getTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Clone a row
   * @description Clones a single row in the `draft` version of the table.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft/clone_cloneDraftTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Reset a draft table
   * @description Replaces the data in the `draft` version of the table with values from the `published` version. Any unpublished changes in the `draft` will be lost after this call is made.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/reset_resetDraftTable': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the response. */
        includeForeignIds?: boolean
      }
      path: {
        /** @description The ID or name of the table to reset. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Export a published version of a table
   * @description Exports the `published` version of a table to CSV / EXCEL format.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/export_exportTable': {
    parameters: {
      query?: {
        /** @description The file format to export. Possible values include `CSV`, `XLSX`, and `XLS`. */
        format?: string
      }
      path: {
        /** @description The ID or name of the table to export. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/vnd.ms-excel': string
          'text/csv': string
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Replace rows in batch in draft table
   * @description Replaces multiple rows as a batch in the `draft` version of the table, with a maximum of 100 rows per call. See the endpoint `PUT /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/replace_replaceDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description JSON array of row objects. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputHubDbTableRowV3BatchUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3WithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Clone a table
   * @description Clone an existing HubDB table. The `newName` and `newLabel` of the new table can be sent as JSON in the `body` parameter. This will create the cloned table as a `draft`.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/clone_cloneDraftTable': {
    parameters: {
      path: {
        /** @description The ID or name of the table to clone. */
        tableIdOrName: string
      }
    }
    /** @description JSON object with the properties newName and newLabel. You can set copyRows to false to clone the table with copying rows and default is true. */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableCloneRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Permanently deletes rows
   * @description Permanently deletes rows from the `draft` version of the table, given a set of row ids. Maximum of 100 row ids per call.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/purge_purgeDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description JSON array of row ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Import data into draft table
   * @description Import the contents of a CSV file into an existing HubDB table. The data will always be imported into the `draft` version of the table. Use `/publish` endpoint to push these changes to `published` version.
   * This endpoint takes a multi-part POST request. The first part will be a set of JSON-formatted options for the import and you can specify this with the name as `config`.  The second part will be the CSV file you want to import and you can specify this with the name as `file`. Refer the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#importing-tables) to check the details and format of the JSON-formatted options for the import.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/import_importDraftTable': {
    parameters: {
      path: {
        /** @description The ID of the destination table where data will be imported. */
        tableIdOrName: string
      }
    }
    requestBody?: {
      content: {
        'multipart/form-data': {
          /** @description Configuration for the import in JSON format as described above. */
          config?: string
          /**
           * Format: binary
           * @description The source CSV file to be imported.
           */
          file?: string
        }
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['ImportResult']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get a row from the draft table
   * @description Get a single row by ID from a table's `draft` version.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_getDraftTableRowById': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Replaces an existing row
   * @description Replace a single row in the table's `draft` version.
   * All the column values must be specified. If a column has a value in the target table and this request doesn't define that value, it will be deleted.
   * See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
   */
  'put-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_replaceDraftTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    /** @description The JSON object of the row */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableRowV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Permanently deletes a row
   * @description Permanently deletes a row from a table's `draft` version.
   */
  'delete-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_purgeDraftTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Updates an existing row
   * @description Sparse updates a single row in the table's `draft` version.
   * All the column values need not be specified. Only the columns or fields that needs to be modified can be specified.
   * See the `Create a row` endpoint for instructions on how to format the JSON row definitions.
   */
  'patch-/cms/v3/hubdb/tables/{tableIdOrName}/rows/{rowId}/draft_updateDraftTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
        /** @description The ID of the row */
        rowId: string
      }
    }
    /** @description The JSON object of the row with necessary fields that needs to be updated. */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableRowV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get rows for a table
   * @description Returns a set of rows in the `published` version of the specified table. Row results can be filtered and sorted. Filtering and sorting options will be sent as query parameters to the API request. For example, by adding the query parameters `column1__gt=5&sort=-column1`, API returns the rows with values for column `column1` greater than 5 and in the descending order of `column1` values. Refer to the [overview section](https://developers.hubspot.com/docs/api/cms/hubdb#filtering-and-sorting-table-rows) for detailed filtering and sorting options.
   * **Note:** This endpoint can be accessed without any authentication, if the table is set to be allowed for public access.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/rows_getTableRows': {
    parameters: {
      query?: {
        /** @description Specifies the column names to sort the results by. See the above description for more details. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is `1000`. */
        limit?: number
        /** @description Specify the column names to get results containing only the required columns instead of all column details. */
        properties?: string[]
      }
      path: {
        /** @description The ID or name of the table to query. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalHubDbTableRowV3ForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Add a new row to a table
   * @description Add a new row to a HubDB table. New rows will be added to the `draft` version of the table. Use `publish` endpoint to push these changes to published version.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows_createTableRow': {
    parameters: {
      path: {
        /** @description The ID or name of the target table. */
        tableIdOrName: string
      }
    }
    /** @description The row definition JSON, formatted as described above. */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableRowV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['HubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get a set of rows
   * @description Returns rows in the `published` version of the specified table, given a set of row ids.
   * **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/batch/read_readTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table to query. */
        tableIdOrName: string
      }
    }
    /** @description The JSON array of row ids */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3WithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create rows in batch
   * @description Creates rows in the `draft` version of the specified table, given an array of row objects. Maximum of 100 row object per call. See the overview section for more details with an example.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/create_createDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description JSON array of row objects */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputHubDbTableRowV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3WithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get details for a published table
   * @description Returns the details for the `published` version of the specified table. This will include the definitions for the columns in the table and the number of rows in the table.
   *
   * **Note:** This endpoint can be accessed without any authentication if the table is set to be allowed for public access.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}_getTableDetails': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the result. */
        includeForeignIds?: boolean
        /** @description Set this to `true` to return details for an archived table. Defaults to `false`. */
        archived?: boolean
      }
      path: {
        /** @description The ID or name of the table to return. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Archive a table
   * @description Archive (soft delete) an existing HubDB table. This archives both the published and draft versions.
   */
  'delete-/cms/v3/hubdb/tables/{tableIdOrName}_archiveTable': {
    parameters: {
      path: {
        /** @description The ID or name of the table to archive. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get a set of rows from draft table
   * @description Returns rows in the `draft` version of the specified table, given a set of row ids.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/read_readDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description JSON array of row ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3WithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Clone rows in batch
   * @description Clones rows in the `draft` version of the specified table, given a set of row ids. Maximum of 100 row ids per call.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/clone_cloneDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description The JSON array of row ids */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get all published tables
   * @description Returns the details for the `published` version of each table defined in an account, including column definitions.
   */
  'get-/cms/v3/hubdb/tables_getAllTables': {
    parameters: {
      query?: {
        /** @description Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is 1000. */
        limit?: number
        /** @description Only return tables created at exactly the specified time. */
        createdAt?: string
        /** @description Only return tables created after the specified time. */
        createdAfter?: string
        /** @description Only return tables created before the specified time. */
        createdBefore?: string
        /** @description Only return tables last updated at exactly the specified time. */
        updatedAt?: string
        /** @description Only return tables last updated after the specified time. */
        updatedAfter?: string
        /** @description Only return tables last updated before the specified time. */
        updatedBefore?: string
        /** @description Specifies whether to return archived tables. Defaults to `false`. */
        archived?: boolean
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalHubDbTableV3ForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new table
   * @description Creates a new draft HubDB table given a JSON schema. The table name and label should be unique for each account.
   */
  'post-/cms/v3/hubdb/tables_createTable': {
    /** @description The JSON schema for the table being created. */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Unpublish a table
   * @description Unpublishes the table, meaning any website pages using data from the table will not render any data.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/unpublish_unpublishTable': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the response. */
        includeForeignIds?: boolean
      }
      path: {
        /** @description The ID or name of the table to publish. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get details for a draft table
   * @description Get the details for the `draft` version of a specific HubDB table. This will include the definitions for the columns in the table and the number of rows in the table.
   */
  'get-/cms/v3/hubdb/tables/{tableIdOrName}/draft_getDraftTableDetailsById': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the result. */
        includeForeignIds?: boolean
        /** @description Set this to `true` to return an archived table. Defaults to `false`. */
        archived?: boolean
      }
      path: {
        /** @description The ID or name of the table to return. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update an existing table
   * @description Update an existing HubDB table. You can use this endpoint to add or remove columns to the table as well as restore an archived table. Tables updated using the endpoint will only modify the `draft` verion of the table. Use `publish` endpoint to push all the changes to the `published` version. To restore a table, include the query parameter `archived=true` and `"archived": false` in the json body.
   * **Note:** You need to include all the columns in the input when you are adding/removing/updating a column. If you do not include an already existing column in the request, it will be deleted.
   */
  'patch-/cms/v3/hubdb/tables/{tableIdOrName}/draft_updateDraftTable': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the result. */
        includeForeignIds?: boolean
        /** @description Specifies whether to return archived tables. Defaults to `false`. */
        archived?: boolean
      }
      path: {
        /** @description The ID or name of the table to update. */
        tableIdOrName: string
      }
    }
    /** @description The JSON schema for the table being updated. */
    requestBody: {
      content: {
        'application/json': components['schemas']['HubDbTableV3Request']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Publish a table from draft
   * @description Publishes the table by copying the data and table schema changes from draft version to the published version, meaning any website pages using data from the table will be updated.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/draft/publish_publishDraftTable': {
    parameters: {
      query?: {
        /** @description Set this to `true` to populate foreign ID values in the response. */
        includeForeignIds?: boolean
      }
      path: {
        /** @description The ID or name of the table to publish. */
        tableIdOrName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['HubDbTableV3']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update rows in batch in draft table
   * @description Updates multiple rows as a batch in the `draft` version of the table, with a maximum of 100 rows per call. See the endpoint `PATCH /tables/{tableIdOrName}/rows/{rowId}/draft` for details on updating a single row.
   */
  'post-/cms/v3/hubdb/tables/{tableIdOrName}/rows/draft/batch/update_updateDraftTableRows': {
    parameters: {
      path: {
        /** @description The ID or name of the table */
        tableIdOrName: string
      }
    }
    /** @description JSON array of row objects. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputHubDbTableRowV3BatchUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseHubDbTableRowV3WithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
