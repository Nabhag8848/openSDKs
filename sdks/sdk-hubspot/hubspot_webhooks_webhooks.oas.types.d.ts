/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/webhooks/v3/{appId}/settings': {
    get: operations['get-/webhooks/v3/{appId}/settings_getAll']
    put: operations['put-/webhooks/v3/{appId}/settings_configure']
    delete: operations['delete-/webhooks/v3/{appId}/settings_clear']
  }
  '/webhooks/v3/{appId}/subscriptions/{subscriptionId}': {
    get: operations['get-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_getById']
    delete: operations['delete-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_archive']
    patch: operations['patch-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_update']
  }
  '/webhooks/v3/{appId}/subscriptions': {
    get: operations['get-/webhooks/v3/{appId}/subscriptions_getAll']
    post: operations['post-/webhooks/v3/{appId}/subscriptions_create']
  }
  '/webhooks/v3/{appId}/subscriptions/batch/update': {
    post: operations['post-/webhooks/v3/{appId}/subscriptions/batch/update_updateBatch']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Configuration details for webhook throttling. */
    ThrottlingSettings: {
      /**
       * @description Time scale for this setting. Can be either `SECONDLY` (per second) or `ROLLING_MINUTE` (per minute).
       * @enum {string}
       */
      period: 'SECONDLY' | 'ROLLING_MINUTE'
      /**
       * Format: int32
       * @description The maximum number of concurrent HTTP requests HubSpot will attempt to make to your app.
       */
      maxConcurrentRequests: number
    }
    StandardError: {
      subCategory?: Record<string, never>
      context: {
        [key: string]: string[]
      }
      links: {
        [key: string]: string
      }
      id?: string
      category: string
      message: string
      errors: components['schemas']['ErrorDetail'][]
      status: string
    }
    BatchResponseSubscriptionResponse: {
      /** Format: date-time */
      completedAt: string
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['SubscriptionResponse'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /** @description List of event subscriptions for your app */
    SubscriptionListResponse: {
      /** @description List of event subscriptions for your app */
      results: components['schemas']['SubscriptionResponse'][]
    }
    /**
     * @description New or updated webhook settings for an app.
     * @example {
     *   "targetUrl": "https://www.example.com/hubspot/target",
     *   "throttling": {
     *     "maxConcurrentRequests": 10,
     *     "period": "SECONDLY"
     *   }
     * }
     */
    SettingsChangeRequest: {
      throttling: components['schemas']['ThrottlingSettings']
      /**
       * @description A publicly available URL for HubSpot to call where event payloads will be delivered.
       * @example https://www.example.com/hubspot/target
       */
      targetUrl: string
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    /**
     * @description Updated details for the subscription.
     * @example {
     *   "active": true
     * }
     */
    SubscriptionPatchRequest: {
      /**
       * @description Determines if the subscription is active or paused.
       * @example true
       */
      active?: boolean
    }
    BatchResponseSubscriptionResponseWithErrors: {
      /** Format: date-time */
      completedAt: string
      /** Format: int32 */
      numErrors?: number
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['SubscriptionResponse'][]
      errors?: components['schemas']['StandardError'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    /**
     * @description Webhook settings for an app.
     * @example {
     *   "targetUrl": "https://www.example.com/hubspot/target",
     *   "throttling": {
     *     "maxConcurrentRequests": 10,
     *     "period": "SECONDLY"
     *   },
     *   "createdAt": "2020-01-24T16:27:59Z",
     *   "updatedAt": "2020-01-24T16:32:43Z"
     * }
     */
    SettingsResponse: {
      /**
       * Format: date-time
       * @description When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
       */
      createdAt: string
      throttling: components['schemas']['ThrottlingSettings']
      /**
       * @description A publicly available URL for HubSpot to call where event payloads will be delivered. See [link-so-some-doc](#) for details about the format of these event payloads.
       * @example https://www.example.com/hubspot/target
       */
      targetUrl: string
      /**
       * Format: date-time
       * @description When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
       */
      updatedAt?: string
    }
    BatchInputSubscriptionBatchUpdateRequest: {
      inputs: components['schemas']['SubscriptionBatchUpdateRequest'][]
    }
    /** @description Complete details for an event subscription. */
    SubscriptionResponse: {
      /**
       * Format: date-time
       * @description When this subscription was created. Formatted as milliseconds from the [Unix epoch](#).
       */
      createdAt: string
      /** @description The internal name of the property being monitored for changes. Only applies when `eventType` is `propertyChange`. */
      propertyName?: string
      /** @description Determines if the subscription is active or paused. */
      active: boolean
      /**
       * @description Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
       * @enum {string}
       */
      eventType:
        | 'contact.propertyChange'
        | 'company.propertyChange'
        | 'deal.propertyChange'
        | 'ticket.propertyChange'
        | 'product.propertyChange'
        | 'line_item.propertyChange'
        | 'contact.creation'
        | 'contact.deletion'
        | 'contact.privacyDeletion'
        | 'company.creation'
        | 'company.deletion'
        | 'deal.creation'
        | 'deal.deletion'
        | 'ticket.creation'
        | 'ticket.deletion'
        | 'product.creation'
        | 'product.deletion'
        | 'line_item.creation'
        | 'line_item.deletion'
        | 'conversation.creation'
        | 'conversation.deletion'
        | 'conversation.newMessage'
        | 'conversation.privacyDeletion'
        | 'conversation.propertyChange'
        | 'contact.merge'
        | 'company.merge'
        | 'deal.merge'
        | 'ticket.merge'
        | 'product.merge'
        | 'line_item.merge'
        | 'contact.restore'
        | 'company.restore'
        | 'deal.restore'
        | 'ticket.restore'
        | 'product.restore'
        | 'line_item.restore'
        | 'contact.associationChange'
        | 'company.associationChange'
        | 'deal.associationChange'
        | 'ticket.associationChange'
        | 'line_item.associationChange'
      /** @description The unique ID of the subscription. */
      id: string
      /**
       * Format: date-time
       * @description When this subscription was last updated. Formatted as milliseconds from the [Unix epoch](#).
       */
      updatedAt?: string
    }
    SubscriptionBatchUpdateRequest: {
      active: boolean
      /** Format: int32 */
      id: number
    }
    /**
     * @description New webhook settings for an app.
     * @example {
     *   "active": true,
     *   "eventType": "contact.propertyChange",
     *   "propertyName": "email"
     * }
     */
    SubscriptionCreateRequest: {
      /**
       * @description The internal name of the property to monitor for changes. Only applies when `eventType` is `propertyChange`.
       * @example email
       */
      propertyName?: string
      /**
       * @description Determines if the subscription is active or paused. Defaults to false.
       * @example true
       */
      active?: boolean
      /**
       * @description Type of event to listen for. Can be one of `create`, `delete`, `deletedForPrivacy`, or `propertyChange`.
       * @example contact.propertyChange
       * @enum {string}
       */
      eventType:
        | 'contact.propertyChange'
        | 'company.propertyChange'
        | 'deal.propertyChange'
        | 'ticket.propertyChange'
        | 'product.propertyChange'
        | 'line_item.propertyChange'
        | 'contact.creation'
        | 'contact.deletion'
        | 'contact.privacyDeletion'
        | 'company.creation'
        | 'company.deletion'
        | 'deal.creation'
        | 'deal.deletion'
        | 'ticket.creation'
        | 'ticket.deletion'
        | 'product.creation'
        | 'product.deletion'
        | 'line_item.creation'
        | 'line_item.deletion'
        | 'conversation.creation'
        | 'conversation.deletion'
        | 'conversation.newMessage'
        | 'conversation.privacyDeletion'
        | 'conversation.propertyChange'
        | 'contact.merge'
        | 'company.merge'
        | 'deal.merge'
        | 'ticket.merge'
        | 'product.merge'
        | 'line_item.merge'
        | 'contact.restore'
        | 'company.restore'
        | 'deal.restore'
        | 'ticket.restore'
        | 'product.restore'
        | 'line_item.restore'
        | 'contact.associationChange'
        | 'company.associationChange'
        | 'deal.associationChange'
        | 'ticket.associationChange'
        | 'line_item.associationChange'
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  'get-/webhooks/v3/{appId}/settings_getAll': {
    parameters: {
      path: {
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SettingsResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'put-/webhooks/v3/{appId}/settings_configure': {
    parameters: {
      path: {
        appId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SettingsChangeRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SettingsResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'delete-/webhooks/v3/{appId}/settings_clear': {
    parameters: {
      path: {
        appId: number
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  'get-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_getById': {
    parameters: {
      path: {
        subscriptionId: number
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'delete-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_archive': {
    parameters: {
      path: {
        subscriptionId: number
        appId: number
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  'patch-/webhooks/v3/{appId}/subscriptions/{subscriptionId}_update': {
    parameters: {
      path: {
        subscriptionId: number
        appId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionPatchRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'get-/webhooks/v3/{appId}/subscriptions_getAll': {
    parameters: {
      path: {
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['SubscriptionListResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'post-/webhooks/v3/{appId}/subscriptions_create': {
    parameters: {
      path: {
        appId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SubscriptionCreateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['SubscriptionResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  'post-/webhooks/v3/{appId}/subscriptions/batch/update_updateBatch': {
    parameters: {
      path: {
        appId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputSubscriptionBatchUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseSubscriptionResponse']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseSubscriptionResponseWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
