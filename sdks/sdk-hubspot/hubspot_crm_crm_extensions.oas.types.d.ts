/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sample-response': {
    /**
     * Get sample card detail response
     * @description Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.
     */
    get: operations['get-/crm/v3/extensions/cards/sample-response']
  }
  '/{appId}': {
    /**
     * Get all cards
     * @description Returns a list of cards for a given app.
     */
    get: operations['get-/crm/v3/extensions/cards/{appId}']
    /**
     * Create a new card
     * @description Defines a new card that will become active on an account when this app is installed.
     */
    post: operations['post-/crm/v3/extensions/cards/{appId}']
  }
  '/{appId}/{cardId}': {
    /**
     * Get a card.
     * @description Returns the definition for a card with the given ID.
     */
    get: operations['get-/crm/v3/extensions/cards/{appId}/{cardId}']
    /**
     * Delete a card
     * @description Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
     */
    delete: operations['delete-/crm/v3/extensions/cards/{appId}/{cardId}']
    /**
     * Update a card
     * @description Update a card definition with new details.
     */
    patch: operations['patch-/crm/v3/extensions/cards/{appId}/{cardId}']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Variant of CardFetchBody with fields as optional for patches */
    CardFetchBodyPatch: {
      /** @description URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed. */
      targetUrl?: string
      /** @description An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here. */
      objectTypes: components['schemas']['CardObjectTypeBody'][]
    }
    /**
     * @description State of card definition to be created
     * @example {
     *   "fetch": {
     *     "objectTypes": [
     *       {
     *         "name": "contacts",
     *         "propertiesToSend": [
     *           "email",
     *           "firstname"
     *         ]
     *       }
     *     ],
     *     "targetUrl": "https://www.example.com/hubspot/target"
     *   },
     *   "display": {
     *     "properties": {
     *       "dataType": "STRING",
     *       "name": "pet_name",
     *       "label": "Pets Name"
     *     }
     *   },
     *   "title": "PetSpot",
     *   "actions": {
     *     "baseUrls": [
     *       "https://www.example.com/hubspot"
     *     ]
     *   }
     * }
     */
    CardCreateRequest: {
      /** @description The top-level title for this card. Displayed to users in the CRM UI. */
      title: string
      fetch: components['schemas']['CardFetchBody']
      display: components['schemas']['CardDisplayBody']
      actions: components['schemas']['CardActions']
    }
    IntegratorObjectResult: {
      id: string
      title: string
      linkUrl?: string
      tokens: components['schemas']['ObjectToken'][]
      actions: (
        | components['schemas']['ActionHookActionBody']
        | components['schemas']['IFrameActionBody']
      )[]
    }
    /** @description Definition for a card display property. */
    CardDisplayProperty: {
      /** @description An internal identifier for this property. This value must be unique TODO. */
      name: string
      /** @description The label for this property as you'd like it displayed to users. */
      label: string
      /**
       * @description Type of data represented by this property.
       * @enum {string}
       */
      dataType:
        | 'BOOLEAN'
        | 'CURRENCY'
        | 'DATE'
        | 'DATETIME'
        | 'EMAIL'
        | 'LINK'
        | 'NUMERIC'
        | 'STRING'
        | 'STATUS'
      /** @description An array of available options that can be displayed. Only used in when `dataType` is `STATUS`. */
      options: components['schemas']['DisplayOption'][]
    }
    /** @description Configuration for this card's data fetch request. */
    CardFetchBody: {
      /** @description URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed. */
      targetUrl: string
      /** @description An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here. */
      objectTypes: components['schemas']['CardObjectTypeBody'][]
    }
    CardObjectTypeBody: {
      /**
       * @description A CRM object type where this card should be displayed.
       * @enum {string}
       */
      name: 'contacts' | 'deals' | 'companies' | 'tickets'
      /** @description An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type. */
      propertiesToSend: string[]
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example An error occurred
       */
      message: string
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /** @description The error category */
      category: string
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
      /**
       * @description Context about the error condition
       * @example {
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ],
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps */
      links?: {
        [key: string]: string
      }
    }
    TopLevelActions: {
      settings?: components['schemas']['IFrameActionBody']
      primary?:
        | components['schemas']['ActionHookActionBody']
        | components['schemas']['IFrameActionBody']
      secondary: (
        | components['schemas']['ActionHookActionBody']
        | components['schemas']['IFrameActionBody']
      )[]
    }
    /** @description Option definition for STATUS dataTypes. */
    DisplayOption: {
      /** @description JSON-friendly unique name for option. */
      name: string
      /** @description The text that will be displayed to users for this option. */
      label: string
      /**
       * @description The type of status.
       * @enum {string}
       */
      type: 'DEFAULT' | 'SUCCESS' | 'WARNING' | 'DANGER' | 'INFO'
    }
    ErrorDetail: {
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
    }
    /** ACTION_HOOK */
    ActionHookActionBody: {
      /**
       * @default ACTION_HOOK
       * @enum {string}
       */
      type: 'ACTION_HOOK'
      confirmation?: components['schemas']['ActionConfirmationBody']
      /** @enum {string} */
      httpMethod:
        | 'CONNECT'
        | 'DELETE'
        | 'GET'
        | 'HEAD'
        | 'OPTIONS'
        | 'PATCH'
        | 'POST'
        | 'PUT'
        | 'TRACE'
      url: string
      label?: string
      propertyNamesIncluded: string[]
    }
    ObjectToken: {
      name?: string
      label?: string
      /** @enum {string} */
      dataType?:
        | 'BOOLEAN'
        | 'CURRENCY'
        | 'DATE'
        | 'DATETIME'
        | 'EMAIL'
        | 'LINK'
        | 'NUMERIC'
        | 'STRING'
        | 'STATUS'
      value: string
    }
    /** @description List of card definitions */
    CardListResponse: {
      /** @description List of card definitions */
      results: components['schemas']['CardResponse'][]
    }
    /** @description The card details payload, sent to HubSpot by an app in response to a data fetch request when a user visits a CRM record page. */
    IntegratorCardPayloadResponse: {
      /**
       * Format: int32
       * @description The total number of card properties that will be sent in this response.
       */
      totalCount: number
      /** @description URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`. */
      allItemsLinkUrl?: string
      /** @description The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title. */
      cardLabel?: string
      topLevelActions?: components['schemas']['TopLevelActions']
      /** @description A list of up to five valid card sub categories. */
      sections?: components['schemas']['IntegratorObjectResult'][]
      /** @enum {string} */
      responseVersion?: 'v1' | 'v3'
    }
    /** IFRAME */
    IFrameActionBody: {
      /**
       * @default IFRAME
       * @enum {string}
       */
      type: 'IFRAME'
      /** Format: int32 */
      width: number
      /** Format: int32 */
      height: number
      url: string
      label?: string
      propertyNamesIncluded: string[]
    }
    ActionConfirmationBody: {
      prompt: string
      confirmButtonLabel: string
      cancelButtonLabel: string
    }
    /** @description Current state of Card Definition */
    CardResponse: {
      /** @description Generated unique ID for card. */
      id: string
      /**
       * Format: date-time
       * @description When this card was created.
       */
      createdAt?: string
      /**
       * Format: date-time
       * @description The last time this card was updated.
       */
      updatedAt?: string
      /** @description Displayed title of this card. */
      title: string
      fetch: components['schemas']['CardFetchBody']
      display: components['schemas']['CardDisplayBody']
      actions: components['schemas']['CardActions']
    }
    /** @description Configuration for displayed info on a card */
    CardDisplayBody: {
      /** @description Card display properties. These will will be rendered as "label : value" pairs in the card UI. See the [example card](#) in the overview docs for more details. */
      properties: components['schemas']['CardDisplayProperty'][]
    }
    /**
     * @description Body for a patch with optional fields
     * @example {
     *   "fetch": {
     *     "objectTypes": [
     *       {
     *         "name": "contacts",
     *         "propertiesToSend": [
     *           "email",
     *           "firstname"
     *         ]
     *       }
     *     ],
     *     "targetUrl": "https://www.example.com/hubspot/target"
     *   },
     *   "display": {
     *     "properties": {
     *       "dataType": "STRING",
     *       "name": "pet_name",
     *       "label": "Pets Name"
     *     }
     *   },
     *   "title": "PetSpot",
     *   "actions": {
     *     "baseUrls": [
     *       "https://www.example.com/hubspot"
     *     ]
     *   }
     * }
     */
    CardPatchRequest: {
      /** @description The top-level title for this card. Displayed to users in the CRM UI. */
      title?: string
      fetch?: components['schemas']['CardFetchBodyPatch']
      display?: components['schemas']['CardDisplayBody']
      actions?: components['schemas']['CardActions']
    }
    /**
     * @description Configuration for custom user actions on cards.
     * @example {
     *   "baseUrls": [
     *     "https://www.example.com/hubspot"
     *   ]
     * }
     */
    CardActions: {
      /** @description A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed. */
      baseUrls: string[]
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get sample card detail response
   * @description Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request.
   */
  'get-/crm/v3/extensions/cards/sample-response': {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['IntegratorCardPayloadResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get all cards
   * @description Returns a list of cards for a given app.
   */
  'get-/crm/v3/extensions/cards/{appId}': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CardListResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new card
   * @description Defines a new card that will become active on an account when this app is installed.
   */
  'post-/crm/v3/extensions/cards/{appId}': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
      }
    }
    /** @description The new card definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['CardCreateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['CardResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get a card.
   * @description Returns the definition for a card with the given ID.
   */
  'get-/crm/v3/extensions/cards/{appId}/{cardId}': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
        /** @description The ID of the target card. */
        cardId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CardResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Delete a card
   * @description Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone.
   */
  'delete-/crm/v3/extensions/cards/{appId}/{cardId}': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
        /** @description The ID of the card to delete. */
        cardId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a card
   * @description Update a card definition with new details.
   */
  'patch-/crm/v3/extensions/cards/{appId}/{cardId}': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
        /** @description The ID of the card to update. */
        cardId: string
      }
    }
    /** @description Card definition fields to be updated. */
    requestBody: {
      content: {
        'application/json': components['schemas']['CardPatchRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CardResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
