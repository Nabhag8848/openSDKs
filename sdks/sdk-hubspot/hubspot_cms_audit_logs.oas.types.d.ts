/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cms/v3/audit-logs/': {
    /**
     * Query audit logs
     * @description Returns audit logs based on filters.
     */
    get: operations['get-/cms/v3/audit-logs/_getPage']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    /** @description The collection of audit logs. */
    CollectionResponsePublicAuditLog: {
      paging?: components['schemas']['Paging']
      results: components['schemas']['PublicAuditLog'][]
    }
    PreviousPage: {
      before: string
      link?: string
    }
    Paging: {
      next?: components['schemas']['NextPage']
      prev?: components['schemas']['PreviousPage']
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    /**
     * @example {
     *   "objectId": "4065364319",
     *   "objectName": "My Landing Page",
     *   "fullName": "John Doe",
     *   "event": "UPDATED",
     *   "userId": "1011561",
     *   "timestamp": "1583792674672",
     *   "objectType": "LANDING_PAGE"
     * }
     */
    PublicAuditLog: {
      meta?: Record<string, never>
      /**
       * @description The internal name of the object in HubSpot.
       * @example My Landing Page
       */
      objectName: string
      /**
       * @description The name of the user who caused the event.
       * @example John Doe
       */
      fullName: string
      /**
       * @description The type of event that took place (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED).
       * @example UPDATED
       * @enum {string}
       */
      event:
        | 'CREATED'
        | 'UPDATED'
        | 'PUBLISHED'
        | 'DELETED'
        | 'UNPUBLISHED'
        | 'RESTORE'
      /**
       * @description The ID of the user who caused the event.
       * @example 1011561
       */
      userId: string
      /**
       * @description The ID of the object.
       * @example 4065364319
       */
      objectId: string
      /**
       * @description The type of the object (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.)
       * @example LANDING_PAGE
       * @enum {string}
       */
      objectType:
        | 'BLOG'
        | 'BLOG_POST'
        | 'LANDING_PAGE'
        | 'WEBSITE_PAGE'
        | 'TEMPLATE'
        | 'MODULE'
        | 'GLOBAL_MODULE'
        | 'SERVERLESS_FUNCTION'
        | 'DOMAIN'
        | 'URL_MAPPING'
        | 'EMAIL'
        | 'CONTENT_SETTINGS'
        | 'HUBDB_TABLE'
        | 'KNOWLEDGE_BASE_ARTICLE'
        | 'KNOWLEDGE_BASE'
        | 'THEME'
        | 'CSS'
        | 'JS'
        | 'CTA'
        | 'FILE'
      /**
       * Format: date-time
       * @description The timestamp at which the event occurred.
       */
      timestamp: string
    }
    NextPage: {
      link?: string
      after: string
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Query audit logs
   * @description Returns audit logs based on filters.
   */
  'get-/cms/v3/audit-logs/_getPage': {
    parameters: {
      query?: {
        /** @description Comma separated list of user ids to filter by. */
        userId?: string[]
        /** @description Comma separated list of event types to filter by (CREATED, UPDATED, PUBLISHED, DELETED, UNPUBLISHED). */
        eventType?: string[]
        /** @description Comma separated list of object types to filter by (BLOG, LANDING_PAGE, DOMAIN, HUBDB_TABLE etc.) */
        objectType?: string[]
        /** @description Comma separated list of object ids to filter by. */
        objectId?: string[]
        /** @description Timestamp after which audit logs will be returned */
        after?: string
        /** @description Timestamp before which audit logs will be returned */
        before?: string
        /** @description The number of logs to return. */
        limit?: number
        /** @description The sort direction for the audit logs. (Can only sort by timestamp). */
        sort?: string[]
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponsePublicAuditLog']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
