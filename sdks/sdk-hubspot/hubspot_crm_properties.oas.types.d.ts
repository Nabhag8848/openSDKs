/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/crm/v3/properties/{objectType}/batch/archive': {
    /**
     * Archive a batch of properties
     * @description Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
     */
    post: operations['post-/crm/v3/properties/{objectType}/batch/archive_archive']
  }
  '/crm/v3/properties/{objectType}/groups/{groupName}': {
    /**
     * Read a property group
     * @description Read a property group identified by {groupName}.
     */
    get: operations['get-/crm/v3/properties/{objectType}/groups/{groupName}_getByName']
    /**
     * Archive a property group
     * @description Move a property group identified by {groupName} to the recycling bin.
     */
    delete: operations['delete-/crm/v3/properties/{objectType}/groups/{groupName}_archive']
    /**
     * Update a property group
     * @description Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
     */
    patch: operations['patch-/crm/v3/properties/{objectType}/groups/{groupName}_update']
  }
  '/crm/v3/properties/{objectType}/{propertyName}': {
    /**
     * Read a property
     * @description Read a property identified by {propertyName}.
     */
    get: operations['get-/crm/v3/properties/{objectType}/{propertyName}_getByName']
    /**
     * Archive a property
     * @description Move a property identified by {propertyName} to the recycling bin.
     */
    delete: operations['delete-/crm/v3/properties/{objectType}/{propertyName}_archive']
    /**
     * Update a property
     * @description Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
     */
    patch: operations['patch-/crm/v3/properties/{objectType}/{propertyName}_update']
  }
  '/crm/v3/properties/{objectType}/batch/read': {
    /**
     * Read a batch of properties
     * @description Read a provided list of properties.
     */
    post: operations['post-/crm/v3/properties/{objectType}/batch/read_read']
  }
  '/crm/v3/properties/{objectType}/batch/create': {
    /**
     * Create a batch of properties
     * @description Create a batch of properties using the same rules as when creating an individual property.
     */
    post: operations['post-/crm/v3/properties/{objectType}/batch/create_create']
  }
  '/crm/v3/properties/{objectType}': {
    /**
     * Read all properties
     * @description Read all existing properties for the specified object type and HubSpot account.
     */
    get: operations['get-/crm/v3/properties/{objectType}_getAll']
    /**
     * Create a property
     * @description Create and return a copy of a new property for the specified object type.
     */
    post: operations['post-/crm/v3/properties/{objectType}_create']
  }
  '/crm/v3/properties/{objectType}/groups': {
    /**
     * Read all property groups
     * @description Read all existing property groups for the specified object type and HubSpot account.
     */
    get: operations['get-/crm/v3/properties/{objectType}/groups_getAll']
    /**
     * Create a property group
     * @description Create and return a copy of a new property group.
     */
    post: operations['post-/crm/v3/properties/{objectType}/groups_create']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    StandardError: {
      subCategory?: Record<string, never>
      context: {
        [key: string]: string[]
      }
      links: {
        [key: string]: string
      }
      id?: string
      category: string
      message: string
      errors: components['schemas']['ErrorDetail'][]
      status: string
    }
    /**
     * @example {
     *   "name": "my_custom_property"
     * }
     */
    PropertyName: {
      /**
       * @description The name of the property to read or modify.
       * @example my_custom_property
       */
      name: string
    }
    BatchResponseProperty: {
      /** Format: date-time */
      completedAt: string
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['Property'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /**
     * @description An ID for a group of properties
     * @example {
     *   "name": "mypropertygroup",
     *   "label": "My Property Group",
     *   "displayOrder": -1
     * }
     */
    PropertyGroup: {
      archived: boolean
      /**
       * @description The internal property group name, which must be used when referencing the property group via the API.
       * @example mypropertygroup
       */
      name: string
      /**
       * Format: int32
       * @description Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
       * @example -1
       */
      displayOrder: number
      /**
       * @description A human-readable label that will be shown in HubSpot.
       * @example My Property Group
       */
      label: string
    }
    CollectionResponsePropertyGroupNoPaging: {
      results: components['schemas']['PropertyGroup'][]
    }
    /**
     * @example {
     *   "label": "My Contact Property",
     *   "type": "enumeration",
     *   "fieldType": "select",
     *   "groupName": "contactinformation",
     *   "hidden": false,
     *   "displayOrder": 2,
     *   "hasUniqueValue": false,
     *   "formField": true,
     *   "options": [
     *     {
     *       "label": "Option A",
     *       "description": "Choice number one",
     *       "value": "A",
     *       "displayOrder": 1,
     *       "hidden": false
     *     },
     *     {
     *       "label": "Option B",
     *       "description": "Choice number two",
     *       "value": "B",
     *       "displayOrder": 2,
     *       "hidden": false
     *     }
     *   ]
     * }
     */
    PropertyCreate: {
      /**
       * @description If true, the property won't be visible and can't be used in HubSpot.
       * @example false
       */
      hidden?: boolean
      /**
       * Format: int32
       * @description Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property to be displayed after any positive values.
       * @example 2
       */
      displayOrder?: number
      /** @description A description of the property that will be shown as help text in HubSpot. */
      description?: string
      /**
       * @description A human-readable property label that will be shown in HubSpot.
       * @example My Contact Property
       */
      label: string
      /**
       * @description The data type of the property.
       * @example enumeration
       * @enum {string}
       */
      type: 'string' | 'number' | 'date' | 'datetime' | 'enumeration' | 'bool'
      /**
       * @description Whether or not the property can be used in a HubSpot form.
       * @example true
       */
      formField?: boolean
      /**
       * @description The name of the property group the property belongs to.
       * @example contactinformation
       */
      groupName: string
      /** @description Should be set to 'OWNER' when 'externalOptions' is true, which causes the property to dynamically pull option values from the current HubSpot users. */
      referencedObjectType?: string
      /** @description The internal property name, which must be used when referencing the property via the API. */
      name: string
      /**
       * @description A list of valid options for the property. This field is required for enumerated properties.
       * @example [
       *   {
       *     "label": "Option A",
       *     "value": "A",
       *     "hidden": false,
       *     "description": "Choice number one",
       *     "displayOrder": 1
       *   },
       *   {
       *     "label": "Option B",
       *     "value": "B",
       *     "hidden": false,
       *     "description": "Choice number two",
       *     "displayOrder": 2
       *   }
       * ]
       */
      options?: components['schemas']['OptionInput'][]
      /** @description Represents a formula that is used to compute a calculated property. */
      calculationFormula?: string
      /**
       * @description Whether or not the property's value must be unique. Once set, this can't be changed.
       * @example false
       */
      hasUniqueValue?: boolean
      /**
       * @description Controls how the property appears in HubSpot.
       * @example select
       * @enum {string}
       */
      fieldType:
        | 'textarea'
        | 'text'
        | 'date'
        | 'file'
        | 'number'
        | 'select'
        | 'radio'
        | 'checkbox'
        | 'booleancheckbox'
        | 'calculation_equation'
      /** @description Applicable only for 'enumeration' type properties.  Should be set to true in conjunction with a 'referencedObjectType' of 'OWNER'.  Otherwise false. */
      externalOptions?: boolean
    }
    /**
     * @example {
     *   "label": "Option A",
     *   "description": "Choice number one",
     *   "value": "A",
     *   "displayOrder": 1,
     *   "hidden": false
     * }
     */
    OptionInput: {
      /**
       * @description Hidden options won't be shown in HubSpot.
       * @example false
       */
      hidden: boolean
      /**
       * Format: int32
       * @description Options are shown in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
       * @example 1
       */
      displayOrder?: number
      /**
       * @description A description of the option.
       * @example Choice number one
       */
      description?: string
      /**
       * @description A human-readable option label that will be shown in HubSpot.
       * @example Option A
       */
      label: string
      /**
       * @description The internal value of the option, which must be used when setting the property value through the API.
       * @example A
       */
      value: string
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    CollectionResponsePropertyNoPaging: {
      results: components['schemas']['Property'][]
    }
    BatchInputPropertyCreate: {
      inputs: components['schemas']['PropertyCreate'][]
    }
    /**
     * @example {
     *   "label": "My Contact Property",
     *   "type": "enumeration",
     *   "fieldType": "select",
     *   "groupName": "contactinformation",
     *   "hidden": false,
     *   "displayOrder": 2,
     *   "formField": true,
     *   "options": [
     *     {
     *       "label": "Option A",
     *       "description": "Choice number one",
     *       "value": "A",
     *       "displayOrder": 1,
     *       "hidden": false
     *     },
     *     {
     *       "label": "Option B",
     *       "description": "Choice number two",
     *       "value": "B",
     *       "displayOrder": 2,
     *       "hidden": false
     *     }
     *   ]
     * }
     */
    PropertyUpdate: {
      /**
       * @description The name of the property group the property belongs to.
       * @example contactinformation
       */
      groupName?: string
      /**
       * @description If true, the property won't be visible and can't be used in HubSpot.
       * @example false
       */
      hidden?: boolean
      /**
       * @description A list of valid options for the property.
       * @example [
       *   {
       *     "label": "Option A",
       *     "value": "A",
       *     "hidden": false,
       *     "description": "Choice number one",
       *     "displayOrder": 1
       *   },
       *   {
       *     "label": "Option B",
       *     "value": "B",
       *     "hidden": false,
       *     "description": "Choice number two",
       *     "displayOrder": 2
       *   }
       * ]
       */
      options?: components['schemas']['OptionInput'][]
      /**
       * Format: int32
       * @description Properties are displayed in order starting with the lowest positive integer value. Values of -1 will cause the Property to be displayed after any positive values.
       * @example 2
       */
      displayOrder?: number
      /** @description A description of the property that will be shown as help text in HubSpot. */
      description?: string
      /** @description Represents a formula that is used to compute a calculated property. */
      calculationFormula?: string
      /**
       * @description A human-readable property label that will be shown in HubSpot.
       * @example My Contact Property
       */
      label?: string
      /**
       * @description The data type of the property.
       * @example enumeration
       * @enum {string}
       */
      type?: 'string' | 'number' | 'date' | 'datetime' | 'enumeration' | 'bool'
      /**
       * @description Controls how the property appears in HubSpot.
       * @example select
       * @enum {string}
       */
      fieldType?:
        | 'textarea'
        | 'text'
        | 'date'
        | 'file'
        | 'number'
        | 'select'
        | 'radio'
        | 'checkbox'
        | 'booleancheckbox'
        | 'calculation_equation'
      /**
       * @description Whether or not the property can be used in a HubSpot form.
       * @example true
       */
      formField?: boolean
    }
    PropertyModificationMetadata: {
      readOnlyOptions?: boolean
      readOnlyValue: boolean
      readOnlyDefinition: boolean
      archivable: boolean
    }
    /**
     * @example {
     *   "name": "mypropertygroup",
     *   "label": "My Property Group",
     *   "displayOrder": -1
     * }
     */
    PropertyGroupCreate: {
      /**
       * @description The internal property group name, which must be used when referencing the property group via the API.
       * @example mypropertygroup
       */
      name: string
      /**
       * Format: int32
       * @description Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
       * @example -1
       */
      displayOrder?: number
      /**
       * @description A human-readable label that will be shown in HubSpot.
       * @example My Property Group
       */
      label: string
    }
    BatchReadInputPropertyName: {
      archived: boolean
      inputs: components['schemas']['PropertyName'][]
    }
    BatchInputPropertyName: {
      inputs: components['schemas']['PropertyName'][]
    }
    BatchResponsePropertyWithErrors: {
      /** Format: date-time */
      completedAt: string
      /** Format: int32 */
      numErrors?: number
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['Property'][]
      errors?: components['schemas']['StandardError'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /**
     * @example {
     *   "label": "Option A",
     *   "description": "Choice number one",
     *   "value": "A",
     *   "displayOrder": 1,
     *   "hidden": false
     * }
     */
    Option: {
      /**
       * @description Hidden options will not be displayed in HubSpot.
       * @example false
       */
      hidden: boolean
      /**
       * Format: int32
       * @description Options are displayed in order starting with the lowest positive integer value. Values of -1 will cause the option to be displayed after any positive values.
       * @example 1
       */
      displayOrder?: number
      /**
       * @description A description of the option.
       * @example Choice number one
       */
      description?: string
      /**
       * @description A human-readable option label that will be shown in HubSpot.
       * @example Option A
       */
      label: string
      /**
       * @description The internal value of the option, which must be used when setting the property value through the API.
       * @example A
       */
      value: string
    }
    /**
     * @example {
     *   "label": "My Property Group",
     *   "displayOrder": -1
     * }
     */
    PropertyGroupUpdate: {
      /**
       * Format: int32
       * @description Property groups are displayed in order starting with the lowest positive integer value. Values of -1 will cause the property group to be displayed after any positive values.
       * @example -1
       */
      displayOrder?: number
      /**
       * @description A human-readable label that will be shown in HubSpot.
       * @example My Property Group
       */
      label?: string
    }
    /**
     * @example {
     *   "name": "my_contact_property",
     *   "label": "My Contact Property",
     *   "type": "enumeration",
     *   "fieldType": "select",
     *   "groupName": "contactinformation",
     *   "hidden": false,
     *   "displayOrder": 2,
     *   "hasUniqueValue": false,
     *   "formField": true,
     *   "modificationMetadata": {
     *     "readOnlyOptions": false,
     *     "readOnlyValue": false,
     *     "readOnlyDefinition": false,
     *     "archivable": true
     *   },
     *   "options": [
     *     {
     *       "label": "Option A",
     *       "description": "Choice number one",
     *       "value": "A",
     *       "displayOrder": 1,
     *       "hidden": false
     *     },
     *     {
     *       "label": "Option B",
     *       "description": "Choice number two",
     *       "value": "B",
     *       "displayOrder": 2,
     *       "hidden": false
     *     }
     *   ]
     * }
     */
    Property: {
      /** @description The internal user ID of the user who created the property in HubSpot. This field may not exist if the property was created outside of HubSpot. */
      createdUserId?: string
      /**
       * @description Whether or not the property will be hidden from the HubSpot UI. It's recommended this be set to false for custom properties.
       * @example false
       */
      hidden?: boolean
      modificationMetadata?: components['schemas']['PropertyModificationMetadata']
      /**
       * Format: int32
       * @description Properties are shown in order, starting with the lowest positive integer value.
       * @example 2
       */
      displayOrder?: number
      /** @description A description of the property that will be shown as help text in HubSpot. */
      description: string
      /** @description Whether or not the property will display the currency symbol set in the account settings. */
      showCurrencySymbol?: boolean
      /**
       * @description A human-readable property label that will be shown in HubSpot.
       * @example My Contact Property
       */
      label: string
      /**
       * @description The property data type.
       * @example enumeration
       */
      type: string
      /** @description This will be true for default object properties built into HubSpot. */
      hubspotDefined?: boolean
      /**
       * @description Whether or not the property can be used in a HubSpot form.
       * @example true
       */
      formField?: boolean
      /** Format: date-time */
      createdAt?: string
      /**
       * Format: date-time
       * @description When the property was archived.
       */
      archivedAt?: string
      /** @description Whether or not the property is archived. */
      archived?: boolean
      /**
       * @description The name of the property group the property belongs to.
       * @example contactinformation
       */
      groupName: string
      /** @description If this property is related to other object(s), they'll be listed here. */
      referencedObjectType?: string
      /**
       * @description The internal property name, which must be used when referencing the property via the API.
       * @example my_contact_property
       */
      name: string
      /**
       * @description A list of valid options for the property. This field is required for enumerated properties, but will be empty for other property types.
       * @example [
       *   {
       *     "label": "Option A",
       *     "value": "A",
       *     "hidden": false,
       *     "description": "Choice number one",
       *     "displayOrder": 1
       *   },
       *   {
       *     "label": "Option B",
       *     "value": "B",
       *     "hidden": false,
       *     "description": "Choice number two",
       *     "displayOrder": 2
       *   }
       * ]
       */
      options: components['schemas']['Option'][]
      /** @description Represents a formula that is used to compute a calculated property. */
      calculationFormula?: string
      /**
       * @description Whether or not the property's value must be unique. Once set, this can't be changed.
       * @example false
       */
      hasUniqueValue?: boolean
      /**
       * @description Controls how the property appears in HubSpot.
       * @example select
       */
      fieldType: string
      /** @description The internal user ID of the user who updated the property in HubSpot. This field may not exist if the property was updated outside of HubSpot. */
      updatedUserId?: string
      /** @description For default properties, true indicates that the property is calculated by a HubSpot process. It has no effect for custom properties. */
      calculated?: boolean
      /** @description For default properties, true indicates that the options are stored externally to the property settings. */
      externalOptions?: boolean
      /** Format: date-time */
      updatedAt?: string
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Archive a batch of properties
   * @description Archive a provided list of properties. This method will return a 204 No Content response on success regardless of the initial state of the property (e.g. active, already archived, non-existent).
   */
  'post-/crm/v3/properties/{objectType}/batch/archive_archive': {
    parameters: {
      path: {
        objectType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputPropertyName']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Read a property group
   * @description Read a property group identified by {groupName}.
   */
  'get-/crm/v3/properties/{objectType}/groups/{groupName}_getByName': {
    parameters: {
      path: {
        objectType: string
        groupName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['PropertyGroup']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Archive a property group
   * @description Move a property group identified by {groupName} to the recycling bin.
   */
  'delete-/crm/v3/properties/{objectType}/groups/{groupName}_archive': {
    parameters: {
      path: {
        objectType: string
        groupName: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a property group
   * @description Perform a partial update of a property group identified by {groupName}. Provided fields will be overwritten.
   */
  'patch-/crm/v3/properties/{objectType}/groups/{groupName}_update': {
    parameters: {
      path: {
        objectType: string
        groupName: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PropertyGroupUpdate']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['PropertyGroup']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Read a property
   * @description Read a property identified by {propertyName}.
   */
  'get-/crm/v3/properties/{objectType}/{propertyName}_getByName': {
    parameters: {
      query?: {
        /** @description Whether to return only results that have been archived. */
        archived?: boolean
        properties?: string
      }
      path: {
        objectType: string
        propertyName: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Property']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Archive a property
   * @description Move a property identified by {propertyName} to the recycling bin.
   */
  'delete-/crm/v3/properties/{objectType}/{propertyName}_archive': {
    parameters: {
      path: {
        objectType: string
        propertyName: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a property
   * @description Perform a partial update of a property identified by {propertyName}. Provided fields will be overwritten.
   */
  'patch-/crm/v3/properties/{objectType}/{propertyName}_update': {
    parameters: {
      path: {
        objectType: string
        propertyName: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PropertyUpdate']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Property']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Read a batch of properties
   * @description Read a provided list of properties.
   */
  'post-/crm/v3/properties/{objectType}/batch/read_read': {
    parameters: {
      path: {
        objectType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchReadInputPropertyName']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseProperty']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponsePropertyWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a batch of properties
   * @description Create a batch of properties using the same rules as when creating an individual property.
   */
  'post-/crm/v3/properties/{objectType}/batch/create_create': {
    parameters: {
      path: {
        objectType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputPropertyCreate']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BatchResponseProperty']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponsePropertyWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Read all properties
   * @description Read all existing properties for the specified object type and HubSpot account.
   */
  'get-/crm/v3/properties/{objectType}_getAll': {
    parameters: {
      query?: {
        /** @description Whether to return only results that have been archived. */
        archived?: boolean
        properties?: string
      }
      path: {
        objectType: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponsePropertyNoPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a property
   * @description Create and return a copy of a new property for the specified object type.
   */
  'post-/crm/v3/properties/{objectType}_create': {
    parameters: {
      path: {
        objectType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PropertyCreate']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Property']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Read all property groups
   * @description Read all existing property groups for the specified object type and HubSpot account.
   */
  'get-/crm/v3/properties/{objectType}/groups_getAll': {
    parameters: {
      path: {
        objectType: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponsePropertyGroupNoPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a property group
   * @description Create and return a copy of a new property group.
   */
  'post-/crm/v3/properties/{objectType}/groups_create': {
    parameters: {
      path: {
        objectType: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PropertyGroupCreate']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['PropertyGroup']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
