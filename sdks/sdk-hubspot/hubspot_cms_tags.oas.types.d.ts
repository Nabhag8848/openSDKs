/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/cms/v3/blogs/tags/batch/update': {
    /**
     * Update a batch of Blog Tags
     * @description Update the Blog Tag objects identified in the request body.
     */
    post: operations['post-/cms/v3/blogs/tags/batch/update_updateBatch']
  }
  '/cms/v3/blogs/tags/multi-language/update-languages': {
    /**
     * Update languages of multi-language group
     * @description Explicitly set new languages for each Blog Tag in a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/tags/multi-language/update-languages_updateLangs']
  }
  '/cms/v3/blogs/tags/multi-language/detach-from-lang-group': {
    /**
     * Detach a Blog Tag from a multi-language group
     * @description Detach a Blog Tag from a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/tags/multi-language/detach-from-lang-group_detachFromLangGroup']
  }
  '/cms/v3/blogs/tags/batch/create': {
    /**
     * Create a batch of Blog Tags
     * @description Create the Blog Tag objects detailed in the request body.
     */
    post: operations['post-/cms/v3/blogs/tags/batch/create_createBatch']
  }
  '/cms/v3/blogs/tags/batch/archive': {
    /**
     * Delete a batch of Blog Tags
     * @description Delete the Blog Tag objects identified in the request body.
     */
    post: operations['post-/cms/v3/blogs/tags/batch/archive_archiveBatch']
  }
  '/cms/v3/blogs/tags/multi-language/set-new-lang-primary': {
    /**
     * Set a new primary language
     * @description Set a Blog Tag as the primary language of a multi-language group.
     */
    put: operations['put-/cms/v3/blogs/tags/multi-language/set-new-lang-primary_setLangPrimary']
  }
  '/cms/v3/blogs/tags/batch/read': {
    /**
     * Retrieve a batch of Blog Tags
     * @description Retrieve the Blog Tag objects identified in the request body.
     */
    post: operations['post-/cms/v3/blogs/tags/batch/read_readBatch']
  }
  '/cms/v3/blogs/tags': {
    /**
     * Get all Blog Tags
     * @description Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
     */
    get: operations['get-/cms/v3/blogs/tags_getPage']
    /**
     * Create a new Blog Tag
     * @description Create a new Blog Tag.
     */
    post: operations['post-/cms/v3/blogs/tags_create']
  }
  '/cms/v3/blogs/tags/multi-language/attach-to-lang-group': {
    /**
     * Attach a Blog Tag to a multi-language group
     * @description Attach a Blog Tag to a multi-language group.
     */
    post: operations['post-/cms/v3/blogs/tags/multi-language/attach-to-lang-group_attachToLangGroup']
  }
  '/cms/v3/blogs/tags/{objectId}': {
    /**
     * Retrieve a Blog Tag
     * @description Retrieve the Blog Tag object identified by the id in the path.
     */
    get: operations['get-/cms/v3/blogs/tags/{objectId}_getById']
    /**
     * Delete a Blog Tag
     * @description Delete the Blog Tag object identified by the id in the path.
     */
    delete: operations['delete-/cms/v3/blogs/tags/{objectId}_archive']
    /**
     * Update a Blog Tag
     * @description Sparse updates a single Blog Tag object identified by the id in the path.
     * All the column values need not be specified. Only the that need to be modified can be specified.
     */
    patch: operations['patch-/cms/v3/blogs/tags/{objectId}_update']
  }
  '/cms/v3/blogs/tags/multi-language/create-language-variation': {
    /**
     * Create a new language variation
     * @description Create a new language variation from an existing Blog Tag
     */
    post: operations['post-/cms/v3/blogs/tags/multi-language/create-language-variation_createLangVariation']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Wrapper for providing an array of strings as inputs. */
    BatchInputString: {
      /** @description Strings to input. */
      inputs: string[]
    }
    /** @description Model definition for a standard error. */
    StandardError: {
      /** @description Error subcategory. */
      subCategory?: Record<string, never>
      /** @description Error context. */
      context: {
        [key: string]: string[]
      }
      /** @description Error links. */
      links: {
        [key: string]: string
      }
      /** @description Error ID. */
      id?: string
      /** @description Error category. */
      category: string
      /** @description Error message. */
      message: string
      /** @description List of error details. */
      errors: components['schemas']['ErrorDetail'][]
      /** @description Error status. */
      status: string
    }
    /** @description Response object for batch operations on blog tags. */
    BatchResponseTag: {
      /**
       * Format: date-time
       * @description Time of batch operation completion.
       */
      completedAt: string
      /**
       * Format: date-time
       * @description Time of batch operation request.
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description Time of batch operation start.
       */
      startedAt: string
      /** @description Links associated with batch operation. */
      links?: {
        [key: string]: string
      }
      /** @description Results of batch operation. */
      results: components['schemas']['Tag'][]
      /**
       * @description Status of batch operation.
       * @enum {string}
       */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /** @description Wrapper for providing an array of JSON nodes as inputs. */
    BatchInputJsonNode: {
      /** @description JSON nodes to input. */
      inputs: Record<string, never>[]
    }
    /** @description Request object for updating languages within a multi-language group. */
    UpdateLanguagesRequestVNext: {
      /** @description Map of object IDs to associated languages of object in the multi-language group. */
      languages: {
        [key: string]: string
      }
      /** @description ID of the primary object in the multi-language group. */
      primaryId: string
    }
    /** @description Request body object for setting a new primary language. */
    SetNewLanguagePrimaryRequestVNext: {
      /** @description ID of object to set as primary in multi-language group. */
      id: string
    }
    /** @description Request body object for detaching objects from multi-language groups. */
    DetachFromLangGroupRequestVNext: {
      /** @description ID of the object to remove from a multi-language group. */
      id: string
    }
    /** @description Response object for collections of blog tags with pagination information. */
    CollectionResponseWithTotalTagForwardPaging: {
      /**
       * Format: int32
       * @description Total number of blog tags.
       */
      total: number
      paging?: components['schemas']['ForwardPaging']
      /** @description Collection of blog tags. */
      results: components['schemas']['Tag'][]
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    /** @description Request body object for attaching objects to multi-language groups. */
    AttachToLangPrimaryRequestVNext: {
      /** @description Designated language of the object to add to a multi-language group. */
      language: string
      /** @description ID of the object to add to a multi-language group. */
      id: string
      /** @description ID of primary language object in multi-language group. */
      primaryId: string
      /** @description Primary language of the multi-language group. */
      primaryLanguage?: string
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    /** @description Model definition for forward paging. */
    ForwardPaging: {
      next?: components['schemas']['NextPage']
    }
    /** @description Response object for batch operations on blog tags with errors. */
    BatchResponseTagWithErrors: {
      /**
       * Format: date-time
       * @description Time of batch operation completion.
       */
      completedAt: string
      /**
       * Format: int32
       * @description Number of errors.
       */
      numErrors?: number
      /**
       * Format: date-time
       * @description Time of batch operation request.
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description Time of batch operation start.
       */
      startedAt: string
      /** @description Links associated with batch operation. */
      links?: {
        [key: string]: string
      }
      /** @description Results of batch operation. */
      results: components['schemas']['Tag'][]
      /** @description Errors in batch operation. */
      errors?: components['schemas']['StandardError'][]
      /**
       * @description Status of batch operation.
       * @enum {string}
       */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /** @description Request body object for cloning blog tags. */
    TagCloneRequestVNext: {
      /** @description Name of newly cloned blog tag. */
      name: string
      /** @description Target language of new variant. */
      language?: string
      /** @description ID of the object to be cloned. */
      id: string
      /** @description Language of primary blog tag to clone. */
      primaryLanguage?: string
    }
    /** @description Model definition for a Tag. */
    Tag: {
      /**
       * Format: date-time
       * @description The timestamp (ISO8601 format) when this Blog Tag was deleted.
       */
      deletedAt: string
      /** Format: date-time */
      created: string
      /** @description The name of the tag. */
      name: string
      /**
       * @description The explicitly defined ISO 639 language code of the tag.
       * @enum {string}
       */
      language:
        | 'af'
        | 'af-na'
        | 'af-za'
        | 'agq'
        | 'agq-cm'
        | 'ak'
        | 'ak-gh'
        | 'am'
        | 'am-et'
        | 'ar'
        | 'ar-001'
        | 'ar-ae'
        | 'ar-bh'
        | 'ar-dj'
        | 'ar-dz'
        | 'ar-eg'
        | 'ar-eh'
        | 'ar-er'
        | 'ar-il'
        | 'ar-iq'
        | 'ar-jo'
        | 'ar-km'
        | 'ar-kw'
        | 'ar-lb'
        | 'ar-ly'
        | 'ar-ma'
        | 'ar-mr'
        | 'ar-om'
        | 'ar-ps'
        | 'ar-qa'
        | 'ar-sa'
        | 'ar-sd'
        | 'ar-so'
        | 'ar-ss'
        | 'ar-sy'
        | 'ar-td'
        | 'ar-tn'
        | 'ar-ye'
        | 'as'
        | 'as-in'
        | 'asa'
        | 'asa-tz'
        | 'ast'
        | 'ast-es'
        | 'az'
        | 'az-az'
        | 'bas'
        | 'bas-cm'
        | 'be'
        | 'be-by'
        | 'bem'
        | 'bem-zm'
        | 'bez'
        | 'bez-tz'
        | 'bg'
        | 'bg-bg'
        | 'bm'
        | 'bm-ml'
        | 'bn'
        | 'bn-bd'
        | 'bn-in'
        | 'bo'
        | 'bo-cn'
        | 'bo-in'
        | 'br'
        | 'br-fr'
        | 'brx'
        | 'brx-in'
        | 'bs'
        | 'bs-ba'
        | 'ca'
        | 'ca-ad'
        | 'ca-es'
        | 'ca-fr'
        | 'ca-it'
        | 'ccp'
        | 'ccp-bd'
        | 'ccp-in'
        | 'ce'
        | 'ce-ru'
        | 'ceb'
        | 'ceb-ph'
        | 'cgg'
        | 'cgg-ug'
        | 'chr'
        | 'chr-us'
        | 'ckb'
        | 'ckb-iq'
        | 'ckb-ir'
        | 'cs'
        | 'cs-cz'
        | 'cu'
        | 'cu-ru'
        | 'cy'
        | 'cy-gb'
        | 'da'
        | 'da-dk'
        | 'da-gl'
        | 'dav'
        | 'dav-ke'
        | 'de'
        | 'de-at'
        | 'de-be'
        | 'de-ch'
        | 'de-de'
        | 'de-gr'
        | 'de-it'
        | 'de-li'
        | 'de-lu'
        | 'dje'
        | 'dje-ne'
        | 'doi'
        | 'doi-in'
        | 'dsb'
        | 'dsb-de'
        | 'dua'
        | 'dua-cm'
        | 'dyo'
        | 'dyo-sn'
        | 'dz'
        | 'dz-bt'
        | 'ebu'
        | 'ebu-ke'
        | 'ee'
        | 'ee-gh'
        | 'ee-tg'
        | 'el'
        | 'el-cy'
        | 'el-gr'
        | 'en'
        | 'en-001'
        | 'en-150'
        | 'en-ae'
        | 'en-ag'
        | 'en-ai'
        | 'en-as'
        | 'en-at'
        | 'en-au'
        | 'en-bb'
        | 'en-be'
        | 'en-bi'
        | 'en-bm'
        | 'en-bs'
        | 'en-bw'
        | 'en-bz'
        | 'en-ca'
        | 'en-cc'
        | 'en-ch'
        | 'en-ck'
        | 'en-cm'
        | 'en-cn'
        | 'en-cx'
        | 'en-cy'
        | 'en-de'
        | 'en-dg'
        | 'en-dk'
        | 'en-dm'
        | 'en-er'
        | 'en-fi'
        | 'en-fj'
        | 'en-fk'
        | 'en-fm'
        | 'en-gb'
        | 'en-gd'
        | 'en-gg'
        | 'en-gh'
        | 'en-gi'
        | 'en-gm'
        | 'en-gu'
        | 'en-gy'
        | 'en-hk'
        | 'en-ie'
        | 'en-il'
        | 'en-im'
        | 'en-in'
        | 'en-io'
        | 'en-je'
        | 'en-jm'
        | 'en-ke'
        | 'en-ki'
        | 'en-kn'
        | 'en-ky'
        | 'en-lc'
        | 'en-lr'
        | 'en-ls'
        | 'en-lu'
        | 'en-mg'
        | 'en-mh'
        | 'en-mo'
        | 'en-mp'
        | 'en-ms'
        | 'en-mt'
        | 'en-mu'
        | 'en-mw'
        | 'en-mx'
        | 'en-my'
        | 'en-na'
        | 'en-nf'
        | 'en-ng'
        | 'en-nl'
        | 'en-nr'
        | 'en-nu'
        | 'en-nz'
        | 'en-pg'
        | 'en-ph'
        | 'en-pk'
        | 'en-pn'
        | 'en-pr'
        | 'en-pw'
        | 'en-rw'
        | 'en-sb'
        | 'en-sc'
        | 'en-sd'
        | 'en-se'
        | 'en-sg'
        | 'en-sh'
        | 'en-si'
        | 'en-sl'
        | 'en-ss'
        | 'en-sx'
        | 'en-sz'
        | 'en-tc'
        | 'en-tk'
        | 'en-to'
        | 'en-tt'
        | 'en-tv'
        | 'en-tz'
        | 'en-ug'
        | 'en-um'
        | 'en-us'
        | 'en-vc'
        | 'en-vg'
        | 'en-vi'
        | 'en-vu'
        | 'en-ws'
        | 'en-za'
        | 'en-zm'
        | 'en-zw'
        | 'eo'
        | 'eo-001'
        | 'es'
        | 'es-419'
        | 'es-ar'
        | 'es-bo'
        | 'es-br'
        | 'es-bz'
        | 'es-cl'
        | 'es-co'
        | 'es-cr'
        | 'es-cu'
        | 'es-do'
        | 'es-ea'
        | 'es-ec'
        | 'es-es'
        | 'es-gq'
        | 'es-gt'
        | 'es-hn'
        | 'es-ic'
        | 'es-mx'
        | 'es-ni'
        | 'es-pa'
        | 'es-pe'
        | 'es-ph'
        | 'es-pr'
        | 'es-py'
        | 'es-sv'
        | 'es-us'
        | 'es-uy'
        | 'es-ve'
        | 'et'
        | 'et-ee'
        | 'eu'
        | 'eu-es'
        | 'ewo'
        | 'ewo-cm'
        | 'fa'
        | 'fa-af'
        | 'fa-ir'
        | 'ff'
        | 'ff-bf'
        | 'ff-cm'
        | 'ff-gh'
        | 'ff-gm'
        | 'ff-gn'
        | 'ff-gw'
        | 'ff-lr'
        | 'ff-mr'
        | 'ff-ne'
        | 'ff-ng'
        | 'ff-sl'
        | 'ff-sn'
        | 'fi'
        | 'fi-fi'
        | 'fil'
        | 'fil-ph'
        | 'fo'
        | 'fo-dk'
        | 'fo-fo'
        | 'fr'
        | 'fr-be'
        | 'fr-bf'
        | 'fr-bi'
        | 'fr-bj'
        | 'fr-bl'
        | 'fr-ca'
        | 'fr-cd'
        | 'fr-cf'
        | 'fr-cg'
        | 'fr-ch'
        | 'fr-ci'
        | 'fr-cm'
        | 'fr-dj'
        | 'fr-dz'
        | 'fr-fr'
        | 'fr-ga'
        | 'fr-gf'
        | 'fr-gn'
        | 'fr-gp'
        | 'fr-gq'
        | 'fr-ht'
        | 'fr-km'
        | 'fr-lu'
        | 'fr-ma'
        | 'fr-mc'
        | 'fr-mf'
        | 'fr-mg'
        | 'fr-ml'
        | 'fr-mq'
        | 'fr-mr'
        | 'fr-mu'
        | 'fr-nc'
        | 'fr-ne'
        | 'fr-pf'
        | 'fr-pm'
        | 'fr-re'
        | 'fr-rw'
        | 'fr-sc'
        | 'fr-sn'
        | 'fr-sy'
        | 'fr-td'
        | 'fr-tg'
        | 'fr-tn'
        | 'fr-vu'
        | 'fr-wf'
        | 'fr-yt'
        | 'fur'
        | 'fur-it'
        | 'fy'
        | 'fy-nl'
        | 'ga'
        | 'ga-gb'
        | 'ga-ie'
        | 'gd'
        | 'gd-gb'
        | 'gl'
        | 'gl-es'
        | 'gsw'
        | 'gsw-ch'
        | 'gsw-fr'
        | 'gsw-li'
        | 'gu'
        | 'gu-in'
        | 'guz'
        | 'guz-ke'
        | 'gv'
        | 'gv-im'
        | 'ha'
        | 'ha-gh'
        | 'ha-ne'
        | 'ha-ng'
        | 'haw'
        | 'haw-us'
        | 'he'
        | 'hi'
        | 'hi-in'
        | 'hr'
        | 'hr-ba'
        | 'hr-hr'
        | 'hsb'
        | 'hsb-de'
        | 'hu'
        | 'hu-hu'
        | 'hy'
        | 'hy-am'
        | 'ia'
        | 'ia-001'
        | 'id'
        | 'ig'
        | 'ig-ng'
        | 'ii'
        | 'ii-cn'
        | 'id-id'
        | 'is'
        | 'is-is'
        | 'it'
        | 'it-ch'
        | 'it-it'
        | 'it-sm'
        | 'it-va'
        | 'he-il'
        | 'ja'
        | 'ja-jp'
        | 'jgo'
        | 'jgo-cm'
        | 'yi'
        | 'yi-001'
        | 'jmc'
        | 'jmc-tz'
        | 'jv'
        | 'jv-id'
        | 'ka'
        | 'ka-ge'
        | 'kab'
        | 'kab-dz'
        | 'kam'
        | 'kam-ke'
        | 'kde'
        | 'kde-tz'
        | 'kea'
        | 'kea-cv'
        | 'khq'
        | 'khq-ml'
        | 'ki'
        | 'ki-ke'
        | 'kk'
        | 'kk-kz'
        | 'kkj'
        | 'kkj-cm'
        | 'kl'
        | 'kl-gl'
        | 'kln'
        | 'kln-ke'
        | 'km'
        | 'km-kh'
        | 'kn'
        | 'kn-in'
        | 'ko'
        | 'ko-kp'
        | 'ko-kr'
        | 'kok'
        | 'kok-in'
        | 'ks'
        | 'ks-in'
        | 'ksb'
        | 'ksb-tz'
        | 'ksf'
        | 'ksf-cm'
        | 'ksh'
        | 'ksh-de'
        | 'kw'
        | 'kw-gb'
        | 'ku'
        | 'ku-tr'
        | 'ky'
        | 'ky-kg'
        | 'lag'
        | 'lag-tz'
        | 'lb'
        | 'lb-lu'
        | 'lg'
        | 'lg-ug'
        | 'lkt'
        | 'lkt-us'
        | 'ln'
        | 'ln-ao'
        | 'ln-cd'
        | 'ln-cf'
        | 'ln-cg'
        | 'lo'
        | 'lo-la'
        | 'lrc'
        | 'lrc-iq'
        | 'lrc-ir'
        | 'lt'
        | 'lt-lt'
        | 'lu'
        | 'lu-cd'
        | 'luo'
        | 'luo-ke'
        | 'luy'
        | 'luy-ke'
        | 'lv'
        | 'lv-lv'
        | 'mai'
        | 'mai-in'
        | 'mas'
        | 'mas-ke'
        | 'mas-tz'
        | 'mer'
        | 'mer-ke'
        | 'mfe'
        | 'mfe-mu'
        | 'mg'
        | 'mg-mg'
        | 'mgh'
        | 'mgh-mz'
        | 'mgo'
        | 'mgo-cm'
        | 'mi'
        | 'mi-nz'
        | 'mk'
        | 'mk-mk'
        | 'ml'
        | 'ml-in'
        | 'mn'
        | 'mn-mn'
        | 'mni'
        | 'mni-in'
        | 'mr'
        | 'mr-in'
        | 'ms'
        | 'ms-bn'
        | 'ms-id'
        | 'ms-my'
        | 'ms-sg'
        | 'mt'
        | 'mt-mt'
        | 'mua'
        | 'mua-cm'
        | 'my'
        | 'my-mm'
        | 'mzn'
        | 'mzn-ir'
        | 'naq'
        | 'naq-na'
        | 'nb'
        | 'nb-no'
        | 'nb-sj'
        | 'nd'
        | 'nd-zw'
        | 'nds'
        | 'nds-de'
        | 'nds-nl'
        | 'ne'
        | 'ne-in'
        | 'ne-np'
        | 'nl'
        | 'nl-aw'
        | 'nl-be'
        | 'nl-ch'
        | 'nl-bq'
        | 'nl-cw'
        | 'nl-lu'
        | 'nl-nl'
        | 'nl-sr'
        | 'nl-sx'
        | 'nmg'
        | 'nmg-cm'
        | 'nn'
        | 'nn-no'
        | 'nnh'
        | 'nnh-cm'
        | 'no'
        | 'no-no'
        | 'nus'
        | 'nus-ss'
        | 'nyn'
        | 'nyn-ug'
        | 'om'
        | 'om-et'
        | 'om-ke'
        | 'or'
        | 'or-in'
        | 'os'
        | 'os-ge'
        | 'os-ru'
        | 'pa'
        | 'pa-in'
        | 'pa-pk'
        | 'pcm'
        | 'pcm-ng'
        | 'pl'
        | 'pl-pl'
        | 'prg'
        | 'prg-001'
        | 'ps'
        | 'ps-af'
        | 'ps-pk'
        | 'pt'
        | 'pt-ao'
        | 'pt-br'
        | 'pt-ch'
        | 'pt-cv'
        | 'pt-gq'
        | 'pt-gw'
        | 'pt-lu'
        | 'pt-mo'
        | 'pt-mz'
        | 'pt-pt'
        | 'pt-st'
        | 'pt-tl'
        | 'qu'
        | 'qu-bo'
        | 'qu-ec'
        | 'qu-pe'
        | 'rm'
        | 'rm-ch'
        | 'rn'
        | 'rn-bi'
        | 'ro'
        | 'ro-md'
        | 'ro-ro'
        | 'rof'
        | 'rof-tz'
        | 'ru'
        | 'ru-by'
        | 'ru-kg'
        | 'ru-kz'
        | 'ru-md'
        | 'ru-ru'
        | 'ru-ua'
        | 'rw'
        | 'rw-rw'
        | 'rwk'
        | 'rwk-tz'
        | 'sa'
        | 'sa-in'
        | 'sah'
        | 'sah-ru'
        | 'saq'
        | 'saq-ke'
        | 'sat'
        | 'sat-in'
        | 'sbp'
        | 'sbp-tz'
        | 'sd'
        | 'sd-in'
        | 'sd-pk'
        | 'se'
        | 'se-fi'
        | 'se-no'
        | 'se-se'
        | 'seh'
        | 'seh-mz'
        | 'ses'
        | 'ses-ml'
        | 'sg'
        | 'sg-cf'
        | 'shi'
        | 'shi-ma'
        | 'si'
        | 'si-lk'
        | 'sk'
        | 'sk-sk'
        | 'sl'
        | 'sl-si'
        | 'smn'
        | 'smn-fi'
        | 'sn'
        | 'sn-zw'
        | 'so'
        | 'so-dj'
        | 'so-et'
        | 'so-ke'
        | 'so-so'
        | 'sq'
        | 'sq-al'
        | 'sq-mk'
        | 'sq-xk'
        | 'sr'
        | 'sr-ba'
        | 'sr-cs'
        | 'sr-me'
        | 'sr-rs'
        | 'sr-xk'
        | 'su'
        | 'su-id'
        | 'sv'
        | 'sv-ax'
        | 'sv-fi'
        | 'sv-se'
        | 'sw'
        | 'sw-cd'
        | 'sw-ke'
        | 'sw-tz'
        | 'sw-ug'
        | 'sy'
        | 'ta'
        | 'ta-in'
        | 'ta-lk'
        | 'ta-my'
        | 'ta-sg'
        | 'te'
        | 'te-in'
        | 'teo'
        | 'teo-ke'
        | 'teo-ug'
        | 'tg'
        | 'tg-tj'
        | 'th'
        | 'th-th'
        | 'ti'
        | 'ti-er'
        | 'ti-et'
        | 'tk'
        | 'tk-tm'
        | 'tl'
        | 'to'
        | 'to-to'
        | 'tr'
        | 'tr-cy'
        | 'tr-tr'
        | 'tt'
        | 'tt-ru'
        | 'twq'
        | 'twq-ne'
        | 'tzm'
        | 'tzm-ma'
        | 'ug'
        | 'ug-cn'
        | 'uk'
        | 'uk-ua'
        | 'ur'
        | 'ur-in'
        | 'ur-pk'
        | 'uz'
        | 'uz-af'
        | 'uz-uz'
        | 'vai'
        | 'vai-lr'
        | 'vi'
        | 'vi-vn'
        | 'vo'
        | 'vo-001'
        | 'vun'
        | 'vun-tz'
        | 'wae'
        | 'wae-ch'
        | 'wo'
        | 'wo-sn'
        | 'xh'
        | 'xh-za'
        | 'xog'
        | 'xog-ug'
        | 'yav'
        | 'yav-cm'
        | 'yo'
        | 'yo-bj'
        | 'yo-ng'
        | 'yue'
        | 'yue-cn'
        | 'yue-hk'
        | 'zgh'
        | 'zgh-ma'
        | 'zh'
        | 'zh-cn'
        | 'zh-hk'
        | 'zh-mo'
        | 'zh-sg'
        | 'zh-tw'
        | 'zh-hans'
        | 'zh-hant'
        | 'zu'
        | 'zu-za'
      /** @description The unique ID of the Blog Tag. */
      id: string
      /**
       * Format: int64
       * @description ID of the primary tag this object was translated from.
       */
      translatedFromId: number
      /** Format: date-time */
      updated: string
    }
    /** @description Model definition for a next page. */
    NextPage: {
      link?: string
      after: string
    }
    /** @description Wrapper for providing an array of blog tags as inputs. */
    BatchInputTag: {
      /** @description Blog tags to input. */
      inputs: components['schemas']['Tag'][]
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Update a batch of Blog Tags
   * @description Update the Blog Tag objects identified in the request body.
   */
  'post-/cms/v3/blogs/tags/batch/update_updateBatch': {
    parameters: {
      query?: {
        /** @description Specifies whether to update deleted Blog Tags. Defaults to `false`. */
        archived?: boolean
      }
    }
    /** @description A JSON array of the JSON representations of the updated Blog Tags. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputJsonNode']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseTag']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseTagWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update languages of multi-language group
   * @description Explicitly set new languages for each Blog Tag in a multi-language group.
   */
  'post-/cms/v3/blogs/tags/multi-language/update-languages_updateLangs': {
    /** @description The JSON representation of the UpdateLanguagesRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLanguagesRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Detach a Blog Tag from a multi-language group
   * @description Detach a Blog Tag from a multi-language group.
   */
  'post-/cms/v3/blogs/tags/multi-language/detach-from-lang-group_detachFromLangGroup': {
    /** @description The JSON representation of the DetachFromLangGroupRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['DetachFromLangGroupRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a batch of Blog Tags
   * @description Create the Blog Tag objects detailed in the request body.
   */
  'post-/cms/v3/blogs/tags/batch/create_createBatch': {
    /** @description The JSON array of new Blog Tags to create. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputTag']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BatchResponseTag']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseTagWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Delete a batch of Blog Tags
   * @description Delete the Blog Tag objects identified in the request body.
   */
  'post-/cms/v3/blogs/tags/batch/archive_archiveBatch': {
    /** @description The JSON array of Blog Tag ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Set a new primary language
   * @description Set a Blog Tag as the primary language of a multi-language group.
   */
  'put-/cms/v3/blogs/tags/multi-language/set-new-lang-primary_setLangPrimary': {
    /** @description The JSON representation of the SetNewLanguagePrimaryRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['SetNewLanguagePrimaryRequestVNext']
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieve a batch of Blog Tags
   * @description Retrieve the Blog Tag objects identified in the request body.
   */
  'post-/cms/v3/blogs/tags/batch/read_readBatch': {
    parameters: {
      query?: {
        /** @description Specifies whether to return deleted Blog Tags. Defaults to `false`. */
        archived?: boolean
      }
    }
    /** @description The JSON array of Blog Tag ids. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputString']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['BatchResponseTag']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseTagWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Get all Blog Tags
   * @description Get the list of blog tags. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.
   */
  'get-/cms/v3/blogs/tags_getPage': {
    parameters: {
      query?: {
        /** @description Only return Blog Tags created at exactly the specified time. */
        createdAt?: string
        /** @description Only return Blog Tags created after the specified time. */
        createdAfter?: string
        /** @description Only return Blog Tags created before the specified time. */
        createdBefore?: string
        /** @description Only return Blog Tags last updated at exactly the specified time. */
        updatedAt?: string
        /** @description Only return Blog Tags last updated after the specified time. */
        updatedAfter?: string
        /** @description Only return Blog Tags last updated before the specified time. */
        updatedBefore?: string
        /** @description Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default. */
        sort?: string[]
        /** @description The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results. */
        after?: string
        /** @description The maximum number of results to return. Default is 100. */
        limit?: number
        /** @description Specifies whether to return deleted Blog Tags. Defaults to `false`. */
        archived?: boolean
        property?: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseWithTotalTagForwardPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new Blog Tag
   * @description Create a new Blog Tag.
   */
  'post-/cms/v3/blogs/tags_create': {
    /** @description The JSON representation of a new Blog Tag. */
    requestBody: {
      content: {
        'application/json': components['schemas']['Tag']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Attach a Blog Tag to a multi-language group
   * @description Attach a Blog Tag to a multi-language group.
   */
  'post-/cms/v3/blogs/tags/multi-language/attach-to-lang-group_attachToLangGroup': {
    /** @description The JSON representation of the AttachToLangPrimaryRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['AttachToLangPrimaryRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Retrieve a Blog Tag
   * @description Retrieve the Blog Tag object identified by the id in the path.
   */
  'get-/cms/v3/blogs/tags/{objectId}_getById': {
    parameters: {
      query?: {
        /** @description Specifies whether to return deleted Blog Tags. Defaults to `false`. */
        archived?: boolean
        property?: string
      }
      path: {
        /** @description The Blog Tag id. */
        objectId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Delete a Blog Tag
   * @description Delete the Blog Tag object identified by the id in the path.
   */
  'delete-/cms/v3/blogs/tags/{objectId}_archive': {
    parameters: {
      query?: {
        /** @description Whether to return only results that have been archived. */
        archived?: boolean
      }
      path: {
        /** @description The Blog Tag id. */
        objectId: string
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update a Blog Tag
   * @description Sparse updates a single Blog Tag object identified by the id in the path.
   * All the column values need not be specified. Only the that need to be modified can be specified.
   */
  'patch-/cms/v3/blogs/tags/{objectId}_update': {
    parameters: {
      query?: {
        /** @description Specifies whether to update deleted Blog Tags. Defaults to `false`. */
        archived?: boolean
      }
      path: {
        /** @description The Blog Tag id. */
        objectId: string
      }
    }
    /** @description The JSON representation of the updated Blog Tag. */
    requestBody: {
      content: {
        'application/json': components['schemas']['Tag']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a new language variation
   * @description Create a new language variation from an existing Blog Tag
   */
  'post-/cms/v3/blogs/tags/multi-language/create-language-variation_createLangVariation': {
    /** @description The JSON representation of the ContentLanguageCloneRequest object. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TagCloneRequestVNext']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['Tag']
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
