/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/crm/v3/timeline/events/batch/create': {
    /**
     * Creates multiple events
     * @description Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.
     */
    post: operations['post-/crm/v3/timeline/events/batch/create_createBatch']
  }
  '/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}': {
    /**
     * Gets a specific event template for your app
     * @description View the current state of a specific template and its tokens.
     */
    get: operations['get-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_getById']
    /**
     * Update an existing event template
     * @description Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.
     *
     * You can also update or replace all the tokens in the template here instead of doing individual API calls on the `/tokens` endpoint.
     */
    put: operations['put-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_update']
    /**
     * Deletes an event template for the app
     * @description This will delete the event template. All associated events will be removed from search results and the timeline UI.
     *
     * This action can't be undone, so it's highly recommended that you stop using any associated events before deleting a template.
     */
    delete: operations['delete-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_archive']
  }
  '/crm/v3/timeline/events': {
    /**
     * Create a single event
     * @description Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.
     */
    post: operations['post-/crm/v3/timeline/events_create']
  }
  '/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens': {
    /**
     * Adds a token to an existing event template
     * @description Once you've defined an event template, it's likely that you'll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.
     *
     * Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.
     *
     * You can also use `objectPropertyName` to associate any CRM object properties. This will allow you to fully build out CRM objects.
     *
     * Token names should be unique across the template.
     */
    post: operations['post-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens_create']
  }
  '/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}': {
    /**
     * Updates an existing token on an event template
     * @description This will update the existing token on an event template. Name and type can't be changed on existing tokens.
     */
    put: operations['put-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_update']
    /**
     * Removes a token from the event template
     * @description This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.
     *
     * The timeline will still display this property for older CRM objects if it's still referenced in the template `Markdown`. New events will not.
     *
     * Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
     */
    delete: operations['delete-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_archive']
  }
  '/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail': {
    /**
     * Gets the detailTemplate as rendered
     * @description This will take the `detailTemplate` from the event template and return an object rendering the specified event. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.
     */
    get: operations['get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail_getDetailById']
  }
  '/crm/v3/timeline/events/{eventTemplateId}/{eventId}': {
    /**
     * Gets the event
     * @description This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
     */
    get: operations['get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}_getById']
  }
  '/crm/v3/timeline/{appId}/event-templates': {
    /**
     * List all event templates for your app
     * @description Use this to list all event templates owned by your app.
     */
    get: operations['get-/crm/v3/timeline/{appId}/event-templates_getAll']
    /**
     * Create an event template for your app
     * @description Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.
     *
     * Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.
     *
     * Each event template contains its own set of tokens and `Markdown` templates. These tokens can be associated with any CRM object properties via the `objectPropertyName` field to fully build out CRM objects.
     *
     * You must create an event template before you can create events.
     */
    post: operations['post-/crm/v3/timeline/{appId}/event-templates_create']
  }
  '/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render': {
    /**
     * Renders the header or detail as HTML
     * @description This will take either the `headerTemplate` or `detailTemplate` from the event template and render for the specified event as HTML. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.
     */
    get: operations['get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render_getRenderById']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /**
     * @example {
     *   "linkLabel": "View Art3mis",
     *   "headerLabel": "Art3mis dog",
     *   "url": "https://my.petspot.com/pets/Art3mis",
     *   "width": 600,
     *   "height": 400
     * }
     */
    TimelineEventIFrame: {
      /**
       * @description The text displaying the link that will display the iframe.
       * @example View Art3mis
       */
      linkLabel: string
      /**
       * @description The label of the modal window that displays the iframe contents.
       * @example Art3mis dog
       */
      headerLabel: string
      /**
       * Format: int32
       * @description The width of the modal window in pixels.
       * @example 600
       */
      width: number
      /**
       * @description The URI of the iframe contents.
       * @example https://my.petspot.com/pets/Art3mis
       */
      url: string
      /**
       * Format: int32
       * @description The height of the modal window in pixels.
       * @example 400
       */
      height: number
    }
    /**
     * @description The state of the timeline event.
     * @example {
     *   "eventTemplateId": "1001298",
     *   "email": "art3mis-pup@petspot.com",
     *   "tokens": {
     *     "petName": "Art3mis",
     *     "petAge": 3,
     *     "petColor": "black"
     *   },
     *   "extraData": {
     *     "questions": [
     *       {
     *         "question": "Who's a good girl?",
     *         "answer": "Bark!"
     *       },
     *       {
     *         "question": "Do you wanna go on a walk?",
     *         "answer": "Woof!"
     *       }
     *     ]
     *   },
     *   "timelineIFrame": {
     *     "linkLabel": "View Art3mis",
     *     "headerLabel": "Art3mis dog",
     *     "url": "https://my.petspot.com/pets/Art3mis",
     *     "width": 600,
     *     "height": 400
     *   }
     * }
     */
    TimelineEvent: {
      /**
       * @description The event template ID.
       * @example 1001298
       */
      eventTemplateId: string
      /**
       * @description Additional event-specific data that can be interpreted by the template's markdown.
       * @example {
       *   "questions": [
       *     {
       *       "answer": "Bark!",
       *       "question": "Who's a good girl?"
       *     },
       *     {
       *       "answer": "Woof!",
       *       "question": "Do you wanna go on a walk?"
       *     }
       *   ]
       * }
       */
      extraData?: Record<string, never>
      timelineIFrame?: components['schemas']['TimelineEventIFrame']
      /** @description The event domain (often paired with utk). */
      domain?: string
      /**
       * @description A collection of token keys and values associated with the template tokens.
       * @example {
       *   "petAge": 3,
       *   "petName": "Art3mis",
       *   "petColor": "black"
       * }
       */
      tokens: {
        [key: string]: string
      }
      /** @description Identifier for the event. This is optional, and we recommend you do not pass this in. We will create one for you if you omit this. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness. */
      id?: string
      /** @description Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie. */
      utk?: string
      /**
       * @description The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`).
       * @example art3mis-pup@petspot.com
       */
      email?: string
      /** @description The CRM object identifier. This is required for every event other than contacts (where utk or email can be used). */
      objectId?: string
      /**
       * Format: date-time
       * @description The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.
       */
      timestamp?: string
    }
    StandardError: {
      subCategory?: Record<string, never>
      context: {
        [key: string]: string[]
      }
      links: {
        [key: string]: string
      }
      id?: string
      category: string
      message: string
      errors: components['schemas']['ErrorDetail'][]
      status: string
    }
    /**
     * @example {
     *   "message": "Invalid input (details will vary based on the error)",
     *   "correlationId": "aeb5f871-7f07-4993-9211-075dc63e7cbf",
     *   "category": "VALIDATION_ERROR",
     *   "links": {
     *     "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
     *   }
     * }
     */
    Error: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ],
       *   "invalidPropertyName": [
       *     "propertyValue"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /**
       * Format: uuid
       * @description A unique identifier for the request. Include this value with any error reports or support tickets
       * @example aeb5f871-7f07-4993-9211-075dc63e7cbf
       */
      correlationId: string
      /**
       * @description A map of link names to associated URIs containing documentation about the error or recommended remediation steps
       * @example {
       *   "knowledge-base": "https://www.hubspot.com/products/service/knowledge-base"
       * }
       */
      links?: {
        [key: string]: string
      }
      /**
       * @description A human readable message describing the error along with remediation steps where appropriate
       * @example Invalid input (details will vary based on the error)
       */
      message: string
      /**
       * @description The error category
       * @example VALIDATION_ERROR
       */
      category: string
      /** @description further information about the error */
      errors?: components['schemas']['ErrorDetail'][]
    }
    /**
     * @description State of the template definition being updated.
     * @example {
     *   "id": "1001298",
     *   "name": "PetSpot Registration",
     *   "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
     *   "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}\n\nEDIT",
     *   "tokens": [
     *     {
     *       "name": "petName",
     *       "label": "Pet Name",
     *       "type": "string",
     *       "objectPropertyName": "firstname"
     *     },
     *     {
     *       "name": "petAge",
     *       "label": "Pet Age",
     *       "type": "number"
     *     },
     *     {
     *       "name": "petColor",
     *       "label": "Pet Color",
     *       "type": "enumeration",
     *       "options": [
     *         {
     *           "value": "white",
     *           "label": "White"
     *         },
     *         {
     *           "value": "black",
     *           "label": "Black"
     *         },
     *         {
     *           "value": "brown",
     *           "label": "Brown"
     *         },
     *         {
     *           "value": "yellow",
     *           "label": "Yellow"
     *         },
     *         {
     *           "value": "other",
     *           "label": "Other"
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    TimelineEventTemplateUpdateRequest: {
      /**
       * @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
       * @example Registration occurred at {{#formatDate timestamp}}{{/formatDate}}
       *
       * #### Questions
       * {{#each extraData.questions}}
       *   **{{question}}**: {{answer}}
       * {{/each}}
       *
       * EDIT
       */
      detailTemplate?: string
      /**
       * @description The template name.
       * @example PetSpot Registration
       */
      name: string
      /**
       * @description A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
       * @example [
       *   {
       *     "name": "petName",
       *     "type": "string",
       *     "label": "Pet Name",
       *     "objectPropertyName": "firstname"
       *   },
       *   {
       *     "name": "petAge",
       *     "type": "number",
       *     "label": "Pet Age"
       *   },
       *   {
       *     "name": "petColor",
       *     "type": "enumeration",
       *     "label": "Pet Color",
       *     "options": [
       *       {
       *         "label": "White",
       *         "value": "white"
       *       },
       *       {
       *         "label": "Black",
       *         "value": "black"
       *       },
       *       {
       *         "label": "Brown",
       *         "value": "brown"
       *       },
       *       {
       *         "label": "Yellow",
       *         "value": "yellow"
       *       },
       *       {
       *         "label": "Other",
       *         "value": "other"
       *       }
       *     ]
       *   }
       * ]
       */
      tokens: components['schemas']['TimelineEventTemplateToken'][]
      /**
       * @description The template ID.
       * @example 1001298
       */
      id: string
      /**
       * @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
       * @example Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})
       */
      headerTemplate?: string
    }
    /**
     * @description State of the template definition being created.
     * @example {
     *   "name": "PetSpot Registration",
     *   "objectType": "contacts",
     *   "headerTemplate": "Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})",
     *   "detailTemplate": "Registration occurred at {{#formatDate timestamp}}{{/formatDate}}\n\n#### Questions\n{{#each extraData.questions}}\n  **{{question}}**: {{answer}}\n{{/each}}",
     *   "tokens": [
     *     {
     *       "name": "petName",
     *       "label": "Pet Name",
     *       "type": "string"
     *     },
     *     {
     *       "name": "petAge",
     *       "label": "Pet Age",
     *       "type": "number"
     *     },
     *     {
     *       "name": "petColor",
     *       "label": "Pet Color",
     *       "type": "enumeration",
     *       "options": [
     *         {
     *           "value": "white",
     *           "label": "White"
     *         },
     *         {
     *           "value": "black",
     *           "label": "Black"
     *         },
     *         {
     *           "value": "brown",
     *           "label": "Brown"
     *         },
     *         {
     *           "value": "other",
     *           "label": "Other"
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    TimelineEventTemplateCreateRequest: {
      /**
       * @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details.
       * @example Registration occurred at {{#formatDate timestamp}}{{/formatDate}}
       *
       * #### Questions
       * {{#each extraData.questions}}
       *   **{{question}}**: {{answer}}
       * {{/each}}
       */
      detailTemplate?: string
      /**
       * @description The template name.
       * @example PetSpot Registration
       */
      name: string
      /**
       * @description A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects.
       * @example [
       *   {
       *     "name": "petName",
       *     "type": "string",
       *     "label": "Pet Name"
       *   },
       *   {
       *     "name": "petAge",
       *     "type": "number",
       *     "label": "Pet Age"
       *   },
       *   {
       *     "name": "petColor",
       *     "type": "enumeration",
       *     "label": "Pet Color",
       *     "options": [
       *       {
       *         "label": "White",
       *         "value": "white"
       *       },
       *       {
       *         "label": "Black",
       *         "value": "black"
       *       },
       *       {
       *         "label": "Brown",
       *         "value": "brown"
       *       },
       *       {
       *         "label": "Other",
       *         "value": "other"
       *       }
       *     ]
       *   }
       * ]
       */
      tokens: components['schemas']['TimelineEventTemplateToken'][]
      /**
       * @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header.
       * @example Registered for [{{petName}}](https://my.petspot.com/pets/{{petName}})
       */
      headerTemplate?: string
      /**
       * @description The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported.
       * @example contacts
       */
      objectType: string
    }
    /**
     * @description The details Markdown rendered as HTML.
     * @example {
     *   "details": "<p>Registration occurred at Jan 30, 2020, 1:13:25 PM</p><h4>Questions</h4><p><strong>Who&#x27;s a good kitty?</strong>: Purr...</p><p><strong>Will you stop playing with that?</strong>: Meow!</p><p>EDIT</p>"
     * }
     */
    EventDetail: {
      /**
       * @description The details Markdown rendered as HTML.
       * @example <p>Registration occurred at Jan 30, 2020, 1:13:25 PM</p><h4>Questions</h4><p><strong>Who&#x27;s a good kitty?</strong>: Purr...</p><p><strong>Will you stop playing with that?</strong>: Meow!</p><p>EDIT</p>
       */
      details: string
    }
    CollectionResponseTimelineEventTemplateNoPaging: {
      results: components['schemas']['TimelineEventTemplate'][]
    }
    ErrorDetail: {
      /** @description A specific category that contains more specific detail about the error */
      subCategory?: string
      /** @description The status code associated with the error detail */
      code?: string
      /** @description The name of the field or parameter in which the error was found. */
      in?: string
      /**
       * @description Context about the error condition
       * @example {
       *   "missingScopes": [
       *     "scope1",
       *     "scope2"
       *   ]
       * }
       */
      context?: {
        [key: string]: string[]
      }
      /** @description A human readable message describing the error along with remediation steps where appropriate */
      message: string
    }
    /**
     * @description The state of the batch event request.
     * @example {
     *   "results": [
     *     {
     *       "objectType": "contacts",
     *       "id": "petspot:1001298:art3mis-pup@petspot.com-6edaa73d-d734-404d-908f-74774d58ac2b",
     *       "eventTemplateId": "1001298",
     *       "email": "art3mis-pup@petspot.com",
     *       "objectId": "28001",
     *       "timestamp": "2020-01-30T18:13:25.665Z",
     *       "tokens": {
     *         "petName": "Art3mis",
     *         "petColor": "black",
     *         "petAge": "3"
     *       },
     *       "extraData": {
     *         "questions": [
     *           {
     *             "question": "Who's a good girl?",
     *             "answer": "Bark!"
     *           },
     *           {
     *             "question": "Do you wanna go on a walk?",
     *             "answer": "Woof!"
     *           }
     *         ]
     *       },
     *       "timelineIFrame": {
     *         "linkLabel": "View Art3mis",
     *         "headerLabel": "Art3mis dog",
     *         "url": "https://my.petspot.com/pets/Art3mis",
     *         "width": 600,
     *         "height": 400
     *       }
     *     },
     *     {
     *       "objectType": "contacts",
     *       "id": "petspot:1001298:pocket-tiger@petspot.com-0df6277b-6eba-4d1f-8c19-1994cbfaa4ca",
     *       "eventTemplateId": "1001298",
     *       "email": "pocket-tiger@petspot.com",
     *       "objectId": "28651",
     *       "timestamp": "2020-01-30T18:13:25.665Z",
     *       "tokens": {
     *         "petName": "Pocket",
     *         "petColor": "yellow",
     *         "petAge": "3"
     *       },
     *       "extraData": {
     *         "questions": [
     *           {
     *             "question": "Who's a good kitty?",
     *             "answer": "Purr..."
     *           },
     *           {
     *             "question": "Will you stop playing with that?",
     *             "answer": "Meow!"
     *           }
     *         ]
     *       },
     *       "timelineIFrame": {
     *         "linkLabel": "View Pocket",
     *         "headerLabel": "Pocket Tiger",
     *         "url": "https://my.petspot.com/pets/Pocket",
     *         "width": 600,
     *         "height": 400
     *       }
     *     }
     *   ],
     *   "status": "COMPLETE",
     *   "startedAt": "2020-01-30T18:13:24.974023Z",
     *   "completedAt": "2020-01-30T18:13:26.227559Z"
     * }
     */
    BatchResponseTimelineEventResponse: {
      /**
       * Format: date-time
       * @description The time the request was completed.
       */
      completedAt: string
      /**
       * Format: date-time
       * @description The time the request occurred.
       */
      requestedAt?: string
      /**
       * Format: date-time
       * @description The time the request began processing.
       */
      startedAt: string
      links?: {
        [key: string]: string
      }
      /**
       * @description Successfully created events.
       * @example [
       *   {
       *     "id": "petspot:1001298:art3mis-pup@petspot.com-6edaa73d-d734-404d-908f-74774d58ac2b",
       *     "email": "art3mis-pup@petspot.com",
       *     "tokens": {
       *       "petAge": "3",
       *       "petName": "Art3mis",
       *       "petColor": "black"
       *     },
       *     "objectId": "28001",
       *     "extraData": {
       *       "questions": [
       *         {
       *           "answer": "Bark!",
       *           "question": "Who's a good girl?"
       *         },
       *         {
       *           "answer": "Woof!",
       *           "question": "Do you wanna go on a walk?"
       *         }
       *       ]
       *     },
       *     "timestamp": "2020-01-30T18:13:25.665Z",
       *     "objectType": "contacts",
       *     "timelineIFrame": {
       *       "url": "https://my.petspot.com/pets/Art3mis",
       *       "width": 600,
       *       "height": 400,
       *       "linkLabel": "View Art3mis",
       *       "headerLabel": "Art3mis dog"
       *     },
       *     "eventTemplateId": "1001298"
       *   },
       *   {
       *     "id": "petspot:1001298:pocket-tiger@petspot.com-0df6277b-6eba-4d1f-8c19-1994cbfaa4ca",
       *     "email": "pocket-tiger@petspot.com",
       *     "tokens": {
       *       "petAge": "3",
       *       "petName": "Pocket",
       *       "petColor": "yellow"
       *     },
       *     "objectId": "28651",
       *     "extraData": {
       *       "questions": [
       *         {
       *           "answer": "Purr...",
       *           "question": "Who's a good kitty?"
       *         },
       *         {
       *           "answer": "Meow!",
       *           "question": "Will you stop playing with that?"
       *         }
       *       ]
       *     },
       *     "timestamp": "2020-01-30T18:13:25.665Z",
       *     "objectType": "contacts",
       *     "timelineIFrame": {
       *       "url": "https://my.petspot.com/pets/Pocket",
       *       "width": 600,
       *       "height": 400,
       *       "linkLabel": "View Pocket",
       *       "headerLabel": "Pocket Tiger"
       *     },
       *     "eventTemplateId": "1001298"
       *   }
       * ]
       */
      results: components['schemas']['TimelineEventResponse'][]
      /**
       * @description The status of the batch response. Should always be COMPLETED if processed.
       * @example COMPLETE
       * @enum {string}
       */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
    /**
     * @description Used to create timeline events in batches.
     * @example {
     *   "inputs": [
     *     {
     *       "eventTemplateId": "1001298",
     *       "email": "art3mis-pup@petspot.com",
     *       "tokens": {
     *         "petName": "Art3mis",
     *         "petAge": 3,
     *         "petColor": "black"
     *       },
     *       "extraData": {
     *         "questions": [
     *           {
     *             "question": "Who's a good girl?",
     *             "answer": "Bark!"
     *           },
     *           {
     *             "question": "Do you wanna go on a walk?",
     *             "answer": "Woof!"
     *           }
     *         ]
     *       },
     *       "timelineIFrame": {
     *         "linkLabel": "View Art3mis",
     *         "headerLabel": "Art3mis dog",
     *         "url": "https://my.petspot.com/pets/Art3mis",
     *         "width": 600,
     *         "height": 400
     *       }
     *     },
     *     {
     *       "eventTemplateId": "1001298",
     *       "email": "pocket-tiger@petspot.com",
     *       "tokens": {
     *         "petName": "Pocket",
     *         "petAge": 3,
     *         "petColor": "yellow"
     *       },
     *       "extraData": {
     *         "questions": [
     *           {
     *             "question": "Who's a good kitty?",
     *             "answer": "Purr..."
     *           },
     *           {
     *             "question": "Will you stop playing with that?",
     *             "answer": "Meow!"
     *           }
     *         ]
     *       },
     *       "timelineIFrame": {
     *         "linkLabel": "View Pocket",
     *         "headerLabel": "Pocket Tiger",
     *         "url": "https://my.petspot.com/pets/Pocket",
     *         "width": 600,
     *         "height": 400
     *       }
     *     }
     *   ]
     * }
     */
    BatchInputTimelineEvent: {
      /**
       * @description A collection of timeline events we want to create.
       * @example [
       *   {
       *     "email": "art3mis-pup@petspot.com",
       *     "tokens": {
       *       "petAge": 3,
       *       "petName": "Art3mis",
       *       "petColor": "black"
       *     },
       *     "extraData": {
       *       "questions": [
       *         {
       *           "answer": "Bark!",
       *           "question": "Who's a good girl?"
       *         },
       *         {
       *           "answer": "Woof!",
       *           "question": "Do you wanna go on a walk?"
       *         }
       *       ]
       *     },
       *     "timelineIFrame": {
       *       "url": "https://my.petspot.com/pets/Art3mis",
       *       "width": 600,
       *       "height": 400,
       *       "linkLabel": "View Art3mis",
       *       "headerLabel": "Art3mis dog"
       *     },
       *     "eventTemplateId": "1001298"
       *   },
       *   {
       *     "email": "pocket-tiger@petspot.com",
       *     "tokens": {
       *       "petAge": 3,
       *       "petName": "Pocket",
       *       "petColor": "yellow"
       *     },
       *     "extraData": {
       *       "questions": [
       *         {
       *           "answer": "Purr...",
       *           "question": "Who's a good kitty?"
       *         },
       *         {
       *           "answer": "Meow!",
       *           "question": "Will you stop playing with that?"
       *         }
       *       ]
       *     },
       *     "timelineIFrame": {
       *       "url": "https://my.petspot.com/pets/Pocket",
       *       "width": 600,
       *       "height": 400,
       *       "linkLabel": "View Pocket",
       *       "headerLabel": "Pocket Tiger"
       *     },
       *     "eventTemplateId": "1001298"
       *   }
       * ]
       */
      inputs: components['schemas']['TimelineEvent'][]
    }
    TimelineEventTemplateTokenOption: {
      label: string
      value: string
    }
    /** @description The current state of the template definition. */
    TimelineEventTemplate: {
      /**
       * Format: date-time
       * @description The date and time that the Event Template was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
       */
      createdAt?: string
      /** @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline when you expand the details. */
      detailTemplate?: string
      /** @description The template name. */
      name: string
      /** @description A collection of tokens that can be used as custom properties on the event and to create fully fledged CRM objects. */
      tokens: components['schemas']['TimelineEventTemplateToken'][]
      /** @description The template ID. */
      id: string
      /** @description This uses Markdown syntax with Handlebars and event-specific data to render HTML on a timeline as a header. */
      headerTemplate?: string
      /** @description The type of CRM object this template is for. [Contacts, companies, tickets, and deals] are supported. */
      objectType: string
      /**
       * Format: date-time
       * @description The date and time that the Event Template was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
       */
      updatedAt?: string
    }
    /**
     * @description State of the token definition.
     * @example {
     *   "name": "petType",
     *   "label": "Pet Type",
     *   "type": "enumeration",
     *   "createdAt": "2020-02-12T20:58:26Z",
     *   "updatedAt": "2020-02-12T20:58:26Z",
     *   "objectPropertyName": "customPropertyPetType",
     *   "options": [
     *     {
     *       "value": "dog",
     *       "label": "Dog"
     *     },
     *     {
     *       "value": "cat",
     *       "label": "Cat"
     *     }
     *   ]
     * }
     */
    TimelineEventTemplateToken: {
      /**
       * Format: date-time
       * @description The date and time that the Event Template Token was created, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
       */
      createdAt?: string
      /**
       * @description If type is `enumeration`, we should have a list of options to choose from.
       * @example [
       *   {
       *     "label": "Dog",
       *     "value": "dog"
       *   },
       *   {
       *     "label": "Cat",
       *     "value": "cat"
       *   }
       * ]
       */
      options?: components['schemas']['TimelineEventTemplateTokenOption'][]
      /**
       * @description The name of the token referenced in the templates. This must be unique for the specific template. It may only contain alphanumeric characters, periods, dashes, or underscores (. - _).
       * @example petType
       */
      name: string
      /**
       * @description Used for list segmentation and reporting.
       * @example Pet Type
       */
      label: string
      /**
       * @description The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API.
       * @example customPropertyPetType
       */
      objectPropertyName?: string
      /**
       * @description The data type of the token. You can currently choose from [string, number, date, enumeration].
       * @example enumeration
       * @enum {string}
       */
      type: 'date' | 'enumeration' | 'number' | 'string'
      /**
       * Format: date-time
       * @description The date and time that the Event Template Token was last updated, as an ISO 8601 timestamp. Will be null if the template was created before Feb 18th, 2020.
       */
      updatedAt?: string
    }
    /**
     * @description State of the token definition for update requests.
     * @example {
     *   "label": "petType edit",
     *   "options": [
     *     {
     *       "value": "dog",
     *       "label": "Dog"
     *     },
     *     {
     *       "value": "cat",
     *       "label": "Cat"
     *     },
     *     {
     *       "value": "bird",
     *       "label": "Bird"
     *     }
     *   ]
     * }
     */
    TimelineEventTemplateTokenUpdateRequest: {
      /**
       * @description If type is `enumeration`, we should have a list of options to choose from.
       * @example [
       *   {
       *     "label": "Dog",
       *     "value": "dog"
       *   },
       *   {
       *     "label": "Cat",
       *     "value": "cat"
       *   },
       *   {
       *     "label": "Bird",
       *     "value": "bird"
       *   }
       * ]
       */
      options?: components['schemas']['TimelineEventTemplateTokenOption'][]
      /**
       * @description Used for list segmentation and reporting.
       * @example petType edit
       */
      label: string
      /** @description The name of the CRM object property. This will populate the CRM object property associated with the event. With enough of these, you can fully build CRM objects via the Timeline API. */
      objectPropertyName?: string
    }
    /**
     * @description The current state of the timeline event.
     * @example {
     *   "objectType": "contacts",
     *   "id": "petspot:1001298:art3mis-pup@petspot.com-004-invalid",
     *   "eventTemplateId": "1001298",
     *   "email": "art3mis-pup@petspot.com",
     *   "objectId": "28001",
     *   "timestamp": "2020-01-30T18:37:15.569Z",
     *   "tokens": {
     *     "petName": "Art3mis",
     *     "petColor": "black",
     *     "petAge": "3"
     *   },
     *   "extraData": {
     *     "questions": [
     *       {
     *         "question": "Who's a good girl?",
     *         "answer": "Bark!"
     *       },
     *       {
     *         "question": "Do you wanna go on a walk?",
     *         "answer": "Woof!"
     *       }
     *     ]
     *   },
     *   "timelineIFrame": {
     *     "linkLabel": "View Art3mis",
     *     "headerLabel": "Art3mis dog",
     *     "url": "https://my.petspot.com/pets/Art3mis",
     *     "width": 600,
     *     "height": 400
     *   }
     * }
     */
    TimelineEventResponse: {
      /**
       * @description The event template ID.
       * @example 1001298
       */
      eventTemplateId: string
      /** Format: date-time */
      createdAt?: string
      /**
       * @description Additional event-specific data that can be interpreted by the template's markdown.
       * @example {
       *   "questions": [
       *     {
       *       "answer": "Bark!",
       *       "question": "Who's a good girl?"
       *     },
       *     {
       *       "answer": "Woof!",
       *       "question": "Do you wanna go on a walk?"
       *     }
       *   ]
       * }
       */
      extraData?: Record<string, never>
      timelineIFrame?: components['schemas']['TimelineEventIFrame']
      /** @description The event domain (often paired with utk). */
      domain?: string
      /**
       * @description A collection of token keys and values associated with the template tokens.
       * @example {
       *   "petAge": "3",
       *   "petName": "Art3mis",
       *   "petColor": "black"
       * }
       */
      tokens: {
        [key: string]: string
      }
      /**
       * @description Identifier for the event. This should be unique to the app and event template. If you use the same ID for different CRM objects, the last to be processed will win and the first will not have a record. You can also use `{{uuid}}` anywhere in the ID to generate a unique string, guaranteeing uniqueness.
       * @example petspot:1001298:art3mis-pup@petspot.com-004-invalid
       */
      id: string
      /** @description Use the `utk` parameter to associate an event with a contact by `usertoken`. This is recommended if you don't know a user's email, but have an identifying user token in your cookie. */
      utk?: string
      /**
       * @description The email address used for contact-specific events. This can be used to identify existing contacts, create new ones, or change the email for an existing contact (if paired with the `objectId`).
       * @example art3mis-pup@petspot.com
       */
      email?: string
      /**
       * @description The CRM object identifier. This is required for every event other than contacts (where utk or email can be used).
       * @example 28001
       */
      objectId?: string
      /**
       * Format: date-time
       * @description The time the event occurred. If not passed in, the curren time will be assumed. This is used to determine where an event is shown on a CRM object's timeline.
       */
      timestamp?: string
      /**
       * @description The ObjectType associated with the EventTemplate.
       * @example contacts
       */
      objectType: string
    }
    BatchResponseTimelineEventResponseWithErrors: {
      /** Format: date-time */
      completedAt: string
      /** Format: int32 */
      numErrors?: number
      /** Format: date-time */
      requestedAt?: string
      /** Format: date-time */
      startedAt: string
      links?: {
        [key: string]: string
      }
      results: components['schemas']['TimelineEventResponse'][]
      errors?: components['schemas']['StandardError'][]
      /** @enum {string} */
      status: 'PENDING' | 'PROCESSING' | 'CANCELED' | 'COMPLETE'
    }
  }
  responses: {
    /** @description An error occurred. */
    Error: {
      content: {
        '*/*': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Creates multiple events
   * @description Creates multiple instances of timeline events based on an event template. Once created, these event are immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.
   */
  'post-/crm/v3/timeline/events/batch/create_createBatch': {
    /** @description The timeline event definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BatchInputTimelineEvent']
      }
    }
    responses: {
      200: {
        content: {
          'application/json': unknown
        }
      }
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['BatchResponseTimelineEventResponse']
        }
      }
      /** @description multiple statuses */
      207: {
        content: {
          'application/json': components['schemas']['BatchResponseTimelineEventResponseWithErrors']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Gets a specific event template for your app
   * @description View the current state of a specific template and its tokens.
   */
  'get-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_getById': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TimelineEventTemplate']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Update an existing event template
   * @description Updates an existing template and its tokens. This is primarily used to update the headerTemplate/detailTemplate, and those changes will take effect for existing events.
   *
   * You can also update or replace all the tokens in the template here instead of doing individual API calls on the `/tokens` endpoint.
   */
  'put-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_update': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    /** @description The updated event template definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TimelineEventTemplateUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TimelineEventTemplate']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Deletes an event template for the app
   * @description This will delete the event template. All associated events will be removed from search results and the timeline UI.
   *
   * This action can't be undone, so it's highly recommended that you stop using any associated events before deleting a template.
   */
  'delete-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}_archive': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create a single event
   * @description Creates an instance of a timeline event based on an event template. Once created, this event is immutable on the object timeline and cannot be modified. If the event template was configured to update object properties via `objectPropertyName`, this call will also attempt to updates those properties, or add them if they don't exist.
   */
  'post-/crm/v3/timeline/events_create': {
    /** @description The timeline event definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TimelineEvent']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['TimelineEventResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Adds a token to an existing event template
   * @description Once you've defined an event template, it's likely that you'll want to define tokens for it as well. You can do this on the event template itself or update individual tokens here.
   *
   * Event type tokens allow you to attach custom data to events displayed in a timeline or used for list segmentation.
   *
   * You can also use `objectPropertyName` to associate any CRM object properties. This will allow you to fully build out CRM objects.
   *
   * Token names should be unique across the template.
   */
  'post-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens_create': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    /** @description The new token definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TimelineEventTemplateToken']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TimelineEventTemplateToken']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Updates an existing token on an event template
   * @description This will update the existing token on an event template. Name and type can't be changed on existing tokens.
   */
  'put-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_update': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The token name. */
        tokenName: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    /** @description The updated token definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TimelineEventTemplateTokenUpdateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TimelineEventTemplateToken']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Removes a token from the event template
   * @description This will remove the token from an existing template. Existing events and CRM objects will still retain the token and its mapped object properties, but new ones will not.
   *
   * The timeline will still display this property for older CRM objects if it's still referenced in the template `Markdown`. New events will not.
   *
   * Any lists or reports referencing deleted tokens will no longer return new contacts, but old ones will still exist in the lists.
   */
  'delete-/crm/v3/timeline/{appId}/event-templates/{eventTemplateId}/tokens/{tokenName}_archive': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The token name. */
        tokenName: string
        /** @description The ID of the target app. */
        appId: number
      }
    }
    responses: {
      /** @description No content */
      204: {
        content: {}
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Gets the detailTemplate as rendered
   * @description This will take the `detailTemplate` from the event template and return an object rendering the specified event. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.
   */
  'get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}/detail_getDetailById': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The event ID. */
        eventId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['EventDetail']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Gets the event
   * @description This returns the previously created event. It contains all existing info for the event, but not necessarily the CRM object.
   */
  'get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}_getById': {
    parameters: {
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The event ID. */
        eventId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['TimelineEventResponse']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * List all event templates for your app
   * @description Use this to list all event templates owned by your app.
   */
  'get-/crm/v3/timeline/{appId}/event-templates_getAll': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'application/json': components['schemas']['CollectionResponseTimelineEventTemplateNoPaging']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Create an event template for your app
   * @description Event templates define the general structure for a custom timeline event. This includes formatted copy for its heading and details, as well as any custom property definitions. The event could be something like viewing a video, registering for a webinar, or filling out a survey. A single app can define multiple event templates.
   *
   * Event templates will be created for contacts by default, but they can be created for companies, tickets, and deals as well.
   *
   * Each event template contains its own set of tokens and `Markdown` templates. These tokens can be associated with any CRM object properties via the `objectPropertyName` field to fully build out CRM objects.
   *
   * You must create an event template before you can create events.
   */
  'post-/crm/v3/timeline/{appId}/event-templates_create': {
    parameters: {
      path: {
        /** @description The ID of the target app. */
        appId: number
      }
    }
    /** @description The new event template definition. */
    requestBody: {
      content: {
        'application/json': components['schemas']['TimelineEventTemplateCreateRequest']
      }
    }
    responses: {
      /** @description successful operation */
      201: {
        content: {
          'application/json': components['schemas']['TimelineEventTemplate']
        }
      }
      default: components['responses']['Error']
    }
  }
  /**
   * Renders the header or detail as HTML
   * @description This will take either the `headerTemplate` or `detailTemplate` from the event template and render for the specified event as HTML. If the template references `extraData` that isn't found in the event, it will be ignored and we'll render without it.
   */
  'get-/crm/v3/timeline/events/{eventTemplateId}/{eventId}/render_getRenderById': {
    parameters: {
      query?: {
        /** @description Set to 'true', we want to render the `detailTemplate` instead of the `headerTemplate`. */
        detail?: boolean
      }
      path: {
        /** @description The event template ID. */
        eventTemplateId: string
        /** @description The event ID. */
        eventId: string
      }
    }
    responses: {
      /** @description successful operation */
      200: {
        content: {
          'text/html': string
        }
      }
      default: components['responses']['Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
