/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v2/calls': {
    /**
     * Retrieve call data by date range (/v2/calls)
     * @description List calls that took place during a specified date range.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
     */
    get: operations['listCalls']
    /**
     * Add new call (/v2/calls)
     * @description When using this endpoint, either provide a downloadMediaUrl or use the returned callId in a follow-up request to /v2/calls/{id}/media to upload the media file.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
     */
    post: operations['addCall']
  }
  '/v2/calls/{id}/media': {
    /**
     * Add call media (/v2/calls/{id}/media)
     * @description Adds a call media, recorded by a telephony system (PBX) or other media recording facility. Gong accepts call recordings in various audio and video file formats, including WAV, MP3, MP4, MKV and FLAC. If uploading a dual-channel (stereo) file separated by speaker, make sure to specify which channel correspondsto the company team member (rep) in the parties/mediaChannelId parameter of the Add New Call operation.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
     */
    put: operations['addCallRecording']
  }
  '/v2/calls/{id}': {
    /**
     * Retrieve data for a specific call (/v2/calls/{id})
     * @description Retrieve data for a specific call.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
     */
    get: operations['getCall']
  }
  '/v2/calls/extensive': {
    /**
     * Retrieve detailed call data by various filters (/v2/calls/extensive)
     * @description Lists detailed call data for calls that took place during a specified date range, have specified call IDs or hosted by specified users.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:extensive'.
     * Moreover, clients requesting media download URLs by the contentSelector.exposedFields.media field should also have the scope 'api:calls:read:media-url'.
     */
    post: operations['listCallsExtensive']
  }
  '/v2/permission-profile': {
    /**
     * Permission profile for a given profile Id (/v2/permission-profile)
     * @description Returns a permission profile.
     */
    get: operations['getPermissionProfile']
    /**
     * Update permission profile (/v2/permission-profile)
     * @description Update a permission profile.
     */
    put: operations['updatePermissionProfile']
    /**
     * Create permission profile (/v2/permission-profile)
     * @description Create a permission profile in a given workspace.
     */
    post: operations['createPermissionProfile']
  }
  '/v2/meetings/{meetingId}': {
    /**
     * Update a Gong Meeting (/v2/meetings/{meetingId})
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:update'.
     */
    put: operations['updateMeeting']
    /**
     * Delete a Gong Meeting (/v2/meetings)
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:delete'.
     */
    delete: operations['deleteMeeting']
  }
  '/v2/customer-engagement/content/viewed': {
    /**
     * Report event of a content view (/v2/customer-engagement/content/viewed)
     * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is viewed by an external participant (for example, a contract was “viewed” by the prospect)
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
     */
    put: operations['contentViewed']
  }
  '/v2/customer-engagement/content/shared': {
    /**
     * Report event of a content share (/v2/customer-engagement/content/shared)
     * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a Gong user shares content with external participants (for example, a contract was “shared” by the account executive with his prospects)
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
     */
    put: operations['contentShared']
  }
  '/v2/customer-engagement/action': {
    /**
     * Report event of a custom action (/v2/customer-engagement/action)
     * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is engaged by an external participant (for example, a contract was “signed” by the prospect)
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
     */
    put: operations['customAction']
  }
  '/v2/crm/integrations': {
    /**
     * Get Generic CRM integration details (/v2/crm/integrations)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the CRM integration you set up using the <code>PUT /v2/crm/integrations</code> endpoint. You can only have one integration at a time. </p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integrations:read' scope.</p>
     */
    get: operations['listGenericCrmIntegration']
    /**
     * Register a Generic CRM integration (/v2/crm/integrations)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Creates your CRM integration with Gong. Returns an integrationId, which should be used in requests to the CRM API to enable correct association of CRM data.</p><p>Multiple CRM integrations are not supported. To create a new integration, delete the old one first (<code>DELETE /v2/crm/integrations</code>).</p><p>This includes if you have integrated with Gong using one of the native CRM integrations such as HubSpot or Salesforce.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integration:register' scope.</p>
     */
    put: operations['registerGenericCrmIntegration']
    /**
     * Delete a Generic CRM integration (/v2/crm/integrations)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Asynchronously deletes a CRM integration and all its associated CRM objects (Accounts, Contacts, Deals, Leads, and Users).</p><p>This endpoint gets the clientRequestId generated by you as the request identifier. Use this to check the status of the delete request by calling the <code>/request-status</code> endpoint,with the clientRequestId. </p><p>A status of DONE indicates that the integration and all its associated crm objects have been successfully deleted. This may take up to 24 hours to be deleted.</p><br>When accessed using a bearer token, this endpoint requires the '"+OAuthGongScope.DELETE_CRM_INTEGRATION+"' scope.<h2>Example</h2><code>DELETE https://api.gong.io/v2/crm/integrations?clientRequestId=1234&integrationId=6286478263646</code>
     */
    delete: operations['deleteGenericCrmIntegration']
  }
  '/v2/crm/integration/new': {
    put: operations['registerGenericCrmIntegrationDeprecated']
  }
  '/v2/calls/users-access': {
    /**
     * Give individual users access to calls (/v2/calls/users-access)
     * @description Give individual users access to calls.
     *
     * If a user already has access (perhaps the call was shared with them, or they have access through their permission profiles) the request will have no effect.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
     */
    put: operations['addUsersAccessToCalls']
    /**
     * Retrieve users that have specific individual access to calls (/v2/calls/users-access)
     * @description Returns a list of users who have received individual access to calls through the API.
     *
     * This endpoint doesn't cover user that have access for other reasons (such as sharing recipients, or access through permission profiles).
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:read'.
     */
    post: operations['getUsersAccessToCalls']
    /**
     * Remove specific individual users access from calls (/v2/calls/users-access)
     * @description Remove individual user access from calls. The request can only remove access previously given by the /v2/calls/users-access API.
     *
     * If a given user does not have access to the call, they will be unaffected.
     *
     * If a given user does have access to the call, but not through the pubic API (for example if the call was shared with the user), the user's access will remain unchanged.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
     */
    delete: operations['deleteUsersAccessToCalls']
  }
  '/v2/users/extensive': {
    /**
     * List users by filter (/v2/users/extensive)
     * @description List multiple Users.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
     */
    post: operations['listMultipleUsers']
  }
  '/v2/stats/interaction': {
    /**
     * Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
     * @description Returns interaction stats for users based on calls that have Whisper turned on.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:interaction'.
     */
    post: operations['listInteractionStats']
  }
  '/v2/stats/activity/scorecards': {
    /**
     * Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
     * @description Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:scorecards'.
     */
    post: operations['listAnsweredScorecards']
  }
  '/v2/stats/activity/day-by-day': {
    /**
     * Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
     * @description Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user's activity, on the daily level. Records are returned only for users with activity in the range.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions:detailed'.
     */
    post: operations['listMultipleUsersDayByDayActivity']
  }
  '/v2/stats/activity/aggregate': {
    /**
     * Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
     * @description Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user's activity.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.
     */
    post: operations['listMultipleUsersAggregateActivity']
  }
  '/v2/stats/activity/aggregate-by-period': {
    /**
     * Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
     * @description Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user's activity. Records are returned only for users with activity in the range.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.
     */
    post: operations['listMultipleUsersAggregateByPeriod']
  }
  '/v2/meetings': {
    /**
     * Create a New Gong Meeting (/v2/meetings)
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:create'.
     */
    post: operations['addMeeting']
  }
  '/v2/meetings/integration/status': {
    /**
     * Validate Gong meeting Integration (/v2/meetings/integration/status)
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:integration:status'.
     */
    post: operations['integrationStatus']
  }
  '/v2/integration-settings': {
    /**
     * Integration Settings (/v2/integration-settings)
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:integration-settings:write'.
     */
    post: operations['integrationSettings']
  }
  '/v2/flows/prospects': {
    /**
     * List assigned flows for the given prospects (/v2/flows/prospects)
     * @description Get the Gong Engage flows assigned to the given prospects.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:read'.
     */
    post: operations['getFlowsForProspects']
  }
  '/v2/flows/prospects/assign': {
    /**
     * Assign a Gong Engage flow to prospects  (/v2/flows/prospects/assign)
     * @description Assign a Gong Engage flow to a batch of prospects.
     *
     * Gong Engage requires 'prospectsCrmIds' to fetch the prospects from the CRM, the chosen 'gongFlowId' to assign to the prospect, and an 'assignToEmail' which is the email address of the Gong user for whom the flow tasks will be created.
     *
     * The maximum allowed prospects to be assigned in a single request is 200
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:write'.
     */
    post: operations['assignProspects']
  }
  '/v2/digital-interaction': {
    /**
     * Post a Digital Interaction (/v2/digital-interaction)
     * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:digital-interactions:write'.
     */
    post: operations['addDigitalInteraction']
  }
  '/v2/data-privacy/erase-data-for-phone-number': {
    /**
     * Delete the phone number, and all associated elements (/v2/data-privacy/erase-data-for-phone-number)
     * @description Given a phone number, this endpoint deletes from the Gong system any leads or contacts with a matching phone number or mobile phone number. Email messages sent to or from these leads/contacts are deleted. Calls where the leads/contacts appear are deleted. The deletion is not immediate, and may take several hours to complete.
     *
     * This endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io
     *
     * Delete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.
     */
    post: operations['purgePhoneNumber']
  }
  '/v2/data-privacy/erase-data-for-email-address': {
    /**
     * Delete the email address, and all associated elements (/v2/data-privacy/erase-data-for-email-address)
     * @description Given an email address, this endpoint deletes from the Gong system any calls or email messages that reference this address. Email messages sent to or from the address are deleted. Calls where the email address appears (as a lead, contact, attendee or speaker) are deleted. Leads or Contacts with the email address are deleted. The deletion is not immediate, and may take several hours to complete.
     *
     * This endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io
     *
     * Delete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.
     */
    post: operations['purgeEmailAddress']
  }
  '/v2/crm/stages': {
    post: operations['uploadStages']
  }
  '/v2/crm/object/schema': {
    post: operations['uploadCrmSchemaFieldDeprecated']
  }
  '/v2/crm/object/entities': {
    post: operations['uploadCrmDataDeprecated']
  }
  '/v2/crm/map/users': {
    post: operations['mapCrmUsers']
  }
  '/v2/crm/entity-schema': {
    /**
     * List Schema Fields (/v2/crm/entity-schema)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Retrieves a list of the object schema fields.</p><p>When accessed using a bearer token, this endpoint requires the scope 'api:crm:schema'.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code><h4>Response</h4><code>{    "requestId": "afjkzqkqglog7ueki5",    "objectTypeToSelectedFields": {        "ACCOUNT": [            {                "name": "accountTypePicklist",                "label": "Account Type",                "type": "PICKLIST",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            },            {                "name": "accountTypePicklist2",                "label": "Account Type2",                "type": "PICKLIST",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            },            {                "name": "fooBar",                "label": "Foo Bar",                "type": "STRING",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            }        ]    }}</code>
     */
    get: operations['listCrmSchemaFields']
    /**
     * Upload Object Schema (/v2/crm/entity-schema)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Enables you to add, edit or remove fields to Gong CRM entities, so that you can display additional CRM data in Gong. Fields that are not included in the Gong CRM objects, and are uploaded without updating your schema, are not displayed in Gong.</p><p>Update your schema when:</p><ul>  <li>You create a new integration</li>  <li>There are changes to the schema of any object type. You can also send a schema update request before any request to the <code>/v2/crm/entities</code> API.</li></ul><p>When updating your schema:</p><ul>  <li>Add or change field: include all fields you want in the schema, including those sent previously. Example:     <table>      <tr>        <th>Date</th>        <th>Action</th>        <th>Result</th>      </tr>      <tr>        <td>3/4/2023</td>        <td>Send account schema with fieldA</td>        <td>fieldA added to the account</td>      </tr>      <tr>        <td>6/4/23</td>        <td>Send account schema with fieldA and fieldB</td>        <td>fieldA still included in account schema. fieldB added to the account</td>      </tr>      <tr>        <td>8/4/23</td>        <td>Send account schema with fieldC but without fieldA and fieldB</td>        <td>Receive an error that you must include all fields in the schema</td>      </tr>      <tr>        <td>15/4/23</td>        <td>Send account schema with fieldB, fieldC, and isDeleted for fieldA</td>        <td>fieldA and all it's data are deleted. fieldB and fieldC remain in the schema</td>      </tr>    </table>  </li>  <li>Changing a field: if you change the field type, a new field is created and the data associated with the original field is deleted. Other changes, such as the label do not result in data being deleted.</li>  <li>Deleting a field: to delete a field and it's associated data, send the field with isDeleted = true</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:schema' scope.</p><h2>Supported field types</h2><p>This table describes the field types that can be added to your schema</p><table>  <tr><th>Field type</th><th>Format in JSON</th><th>Possible values</th></tr>  <tr><td>BOOLEAN</td><td>boolean</td><td>true, false</td></tr>  <tr><td>DATE</td><td>string (ISO-8601 date without time)</td><td>"2020-05-31"</td></tr>  <tr><td>DATETIME</td><td>string (ISO-8601 datetime without milliseconds)</td><td>"2020-12-17T07:37:21+02:00"<p>"2020-12-17T05:37:21Z"</p></td></tr>  <tr><td>PICKLIST</td><td>string - one of the values in an orderedValueList</td><td>"Analyst"</td></tr>  <tr><td>NUMBER</td><td>number</td><td>45.66, 8453</td></tr>  <tr><td>PERCENT</td><td>number (between 0 to 100)</td><td>67.3</td></tr>  <tr><td>CURRENCY*</td><td>number</td><td>34.68</td></tr>  <tr><td>PHONENUMBER</td><td>string</td><td>"+14055766687"</td></tr>  <tr><td>EMAILADDRESS</td><td>string</td><td>"john.doe@anywhere.com"</td></tr>  <tr><td>REFERENCE</td><td>string - the id of another object</td><td>"48b009drax"</td></tr>  <tr><td>ID</td><td>string - the id of the object</td><td>"843hf8484jr84htg"</td></tr>  <tr><td>STRING</td><td>string</td><td>"whatever you want"</td></tr>  <tr><td>URL</td><td>string</td><td>"https://crm.com/account/6d4r578f"</td></tr></table><p>* In the integration send a number value, and specify the correct currency symbol in the Gong UI. Currently Gong does not support multiple currencies per company.</p><h3>Example</h3><h4>Request</h4><p><code>POST https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code></p><p><code>[{"uniqueName": "orderId", "label": "ID", "type": "ID", "lastModified": "2020-11-11T08:11:34+01:00"},</code></p><p><code>{"uniqueName": "parentAccount", "label": "Main Account", "type": "REFERENCE", "referenceTo": "ACCOUNT", "lastModified": "2020-11-11T08:11:34+01:00"},</code></p><p><code>{"uniqueName": "category", "label": "Category", "type": "PICKLIST", "orderedValueList": ["Analyst", "Competitor", "Customer", "Integrator", "Investor", "Partner", "Other"], "lastModified": "2020-11-11T08:11:34+01:00"}, </code></p><p>// remove custom field</p><p><code>{"uniqueName": "industry", "isDeleted": true, "label": "Industry", "type": "PICKLIST", "lastModified": "2020-11-21T08:11:34+01:00"}] </code></p>
     */
    post: operations['uploadCrmSchemaField']
  }
  '/v2/crm/entities': {
    /**
     * Get CRM objects (/v2/crm/entities)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><h2>This API is for use in the <strong>development phase only</strong>, to manually verify that objects are uploaded and processed correctly in Gong.</h2><p>Returns a JSON object where each key is the object’s crm id and the corresponding value is a nested JSON object representing the CRM object fields. Each key in the nested JSON is the field name and the corresponding value is the field value.</p><p>The objects are fetched from the Gong main DB. If the object is not found, the JSON’s value is null.</p><p>The request body contains an array of objects ids.</p><p>The request is limited to 100 objects. If more than 100 objects are requested only the first 100 are returned.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:get-objects' scope.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entities?integrationId=6286478263646&objectType=DEAL</code><br><br><code>["1234","8765"] //request body</code>
     */
    get: operations['getCrmObjects']
    /**
     * Upload CRM objects (/v2/crm/entities)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Inserts, updates, or deletes a CRM entity in Gong.</p><p>Gong searches for existing entities with the same ID, to determine whether the entity should be added or updated.</p><p>Ensure you have an authentication key and that you have registered your integration before uploading your CRM data.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:upload' scope.</p><h2>Request parameters</h2> <h3>Query String parameters</h3><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>integrationId <font color="red">*</font></td>    <td>Integration ID generated when creating the integration</td>    <td>long</td>  </tr>  <tr>    <td>objectType <font color="red">*</font></td>    <td>The object being uploaded. Options are (case-sensitive): <br><ul><li>ACCOUNT</li><li>CONTACT</li><li>DEAL</li><li>LEAD</li><li>BUSINESS_USER</li><li>STAGE</li></ul> </td>    <td>string</td>  </tr>  <tr>    <td>clientRequestId	<font color="red">*</font></td>    <td>A unique identifier sent by you to allow troubleshooting and to prevent repeated attempts to upload the same list of objects.<br>Valid characters: letters, numbers, dashes and underscores.</td>    <td>string</td>  </tr></table><h2>Request Body</h2><ul>  <li>Content-Type should be multipart/form-data</li>  <li>Maximum payload size: 200 megabytes</li></ul><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>dataFile <font color="red">*</font></td>    <td>The LDJSON file with the entity data to upload. A file should only contain objects of one entity type. Records that have multiple updates should be sent in separate files. Each JSON object should be on a separate line. </td>    <td>file</td>  </tr></table><h2>CRM Entities</h2><p>This section details the entities that can be uploaded to Gong </p><h3>Business User</h3><p>The CRM business user represents the Gong user in the CRM and is responsible for the relationship with the account and for creating opportunities and closing deals. Uploading business users enables Gong to associate CRM entities such as accounts and contacts with the relevant user in Gong and with their Gong activity, such as conversations. </p><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your business users to Gong, generate a JSON file with the following fields:</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>objectId <font color="red">*</font></td>    <td>The CRM unique ID for the object. <br>Note: objectId can have a maximum of 64 characters and can have the following characters:       <ul>        <li>alpha numeric characters and a "-" </li>        <li>a valid email address</li>      </ul>No other special characters can be used    </td>    <td>string</td>  </tr>  <tr>    <td>modifiedDate <font color="red">*</font></td>    <td>The date and time the object was last modified in the CRM</td>    <td>ISO-8601 datetime format, without milliseconds</td>  </tr>  <tr>    <td>isDeleted</td>    <td>(Default: false) When true, the object is deleted from the database.</td>    <td>boolean</td>  </tr>  <tr>    <td>url</td>    <td>The full URL path to view this object in the CRM</td>    <td>string (Qualified URI)</td>  </tr>  <tr>    <td>emailAddress <font color="red">*</font></td>    <td>The business user's email address. Used to associate the Gong user with the CRM user. Not mandatory when isDeleted = true.</td>    <td>string</td>  </tr></table><h4>Associating the Gong user with the CRM user</h4><p>The CRM user is associated with the Gong user according to the email address. Each CRM deal contains an ownerId field, which is the CRM user ID.</p><p>To update an existing user:</p><ol>  <li>Delete the existing user by uploading the business user entity with isDeleted=true.</li>  <li>In a new request, send the new user details with isDeleted=false, or send a different user with the same email address.</li></ol><h3>Account</h3><p>The account object is an active customer in the CRM. Emails and calls in Gong are associated with this account object.</p><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your CRM accounts to Gong, generate a JSON file with the following fields:</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>objectId <font color="red">*</font></td>    <td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters:       <ul>        <li>alpha numeric characters and a "-" </li>        <li>a valid email address</li>      </ul>No other special characters can be used    </td>    <td>string</td>  </tr>  <tr>    <td>modifiedDate <font color="red">*</font></td>    <td>The date and time the object was last modified in the CRM</td>    <td>ISO-8601 datetime format, without milliseconds</td>  </tr>  <tr>    <td>isDeleted</td>    <td>(Default: false) When true, the object is deleted from the database</td>    <td>boolean</td>  </tr>  <tr>    <td>url</td>    <td>A full http URL to browse this object in the CRM</td>    <td>string (Qualified URI)</td>  </tr>  <tr>    <td>name</td>    <td>The account name. <br>Default value: "Account_#"+objectId</td>    <td>string</td>  </tr>  <tr>    <td>domains</td>    <td>The account's domain/s. When an activity can’t be associated with a contact, the participants domain is used to associate the activity to an account via the account domain in this field.</td>    <td>string array</td>  </tr></table><h3>Contact</h3><p>A contact in Gong is the contact associated with the account. Gong uses a contact to match an activity to the correct account.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your CRM contacts to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to browse this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>accountId</td><td>The ID of the account associated with the contact in the CRM. Used to associate an activity to an account once the activity has been associated with a contact.</td><td>string</td></tr><tr><td>emailAddress</td><td>The contact's email address. Used to associate activities to a contact, based on the participants email. </td><td>string</td></tr><tr><td>firstName</td><td>The contact's first name</td><td>string</td></tr><tr><td>lastName</td><td>The contact's last name</td><td>string</td></tr><tr><td>title</td><td>The contact's title</td><td>string</td></tr><tr><td>phoneNumber</td><td>The contact's phone number. Used to associate telephony system calls to a contact based on the call participant's phone number.</td><td>string</td></tr></table><h3>Deal</h3><p>A deal in Gong is a qualified opportunity or contract in a specific account.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your deals to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to access this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>accountId</td><td>The ID of the account the deal is associated with in the CRM. <br><b>Note</b>: Deals without an accountId will not appear in Gong</td><td>string</td></tr><tr><td>ownerId</td><td>The ID of the deal owner in the CRM. This ID should be the same as the business user objectId so the deal can be associated with the correct Gong user. <br><b>Note</b>: Deals without an ownerId will not appear in the deal board in Gong. </td><td>string</td></tr><tr><td>name</td><td>The deal name<br>Default value: Deal_# + objectId</td><td>string</td></tr><tr><td>createdDate</td><td>The date and time the deal was created in the CRM.</td><td>ISO-8601 datetime without milliseconds</td></tr><tr><td>closeDate</td><td>The date the deal closed or is expected to close. <br><b>Note</b>: Deals without a closeDate will not appear in the deal board in Gong.</td><td>string</td></tr><tr><td>status</td><td>The deal status. Possible values are: <ul><li>WON</li><li>LOST</li><li>OPEN</li></ul><br>Default value: OPEN</td><td>string</td></tr><tr><td>stage</td><td>The stage the deal is in. If empty, it will not always be possible to associate activities with deals. <br>Must be the same as one of the values in the objectId field in the stages object</td><td>string</td></tr><tr><td>amount</td><td>The deal amount in the currency unit. Companies set their default currency in the Company Settings page. All amounts should be sent in this currency. If your deal is in a different currency, convert the deal amount to the currency defined in the Company Settings page.<br>Default value: 0</td><td>currency</td></tr></table><h3>Lead</h3><p>A Lead is a potential customer, who may not yet be associated with an account. If conversations can't be associated with a contact, Gong then checks to see whether there is a relevant lead to associate with the conversation.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your leads to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to browse this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>emailAddress </td><td>The lead's email address. Used to associate activities to a lead, based on the participants email. </td><td>string</td></tr><tr><td>firstName </td><td>The lead's first name</td><td>string</td></tr><tr><td>lastName </td><td>The lead's last name</td><td>string</td></tr><tr><td>title</td><td>The lead's title</td><td>string</td></tr><tr><td>phoneNumber</td><td><p>The lead's phone number. Used to associated telephony system calls to a lead based on the call participant's phone number. </p><p></td><td>string</td></tr><tr><td>convertedToDealId</td><td>The deal ID in the CRM. Relevant if the lead is converted to a deal</td><td>string</td></tr><tr><td>convertedToContactId</td><td>The contact ID in the CRM the lead was converted to. Relevant if the lead is converted to a contact</td><td>string</td></tr><tr><td>convertedToAccountId</td><td>The account ID in the CRM the lead was converted to. Relevant if the lead is converted to an account</td><td>string</td></tr></table><h3>Stage</h3><p>The list of stages the deal can be in, in the CRM.  Stages are set to be active or inactive so that if you want to delete them, the stage is still associated with existing deals in that stage but will not be available for new deals. </p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your stages to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object. <br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>name <font color="red">*</font></td><td>The display name for the stage</td><td>string</td></tr><tr><td>isActive</td><td>When true, sets the stage to active in Gong. When false, sets the stage to inactive in Gong.<br>Default value: true</td><td>boolean</td></tr><tr><td>sortOrder</td><td>The order of the stage in the sales process (starting from 1). The stages are displayed according to this order. If two stages have the same sort order they will be displayed one after another. <br>Default value: 1</td><td>integer</td></tr></table><h2>Example</h2><h3>Upload Business User account</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=BUSINESS_USER<br>{"objectId": "user1_Id_In_The_CRM", "emailAddress": "john.doe@acme.com", "modifiedDate": "2019-01-03T23:45:57+01:00"}<br> // remove user mapping for user user2_Id_In_The_CRM<br>{"objectId": "user2_Id_In_The_CRM", "isDeleted": true, "emailAddress": "john.taylor@acme.com", "modifiedDate": "2019-01-03T23:45:57+01:00"}</code><h3>Upload Stage example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=STAGE<br>{"objectId": "discovery", "name": "Discovery", "isActive": true, "sortOrder": 1}<br>{"objectId": "won", "modifiedDate": "2019-01-03T23:45:57+01:00", "name": "Closed Won", "isActive": true, "sortOrder": 5}</code><h3>Upload Account example</h3><p><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=ACCOUNT<br>// account with additional field<br>{"objectId": "5ybyh6n6n65", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/accounts/5ybyh6n6n65", "name": "PBR", "domains": ["pbr.com", "pbr.gov"], "type": "Investor"}<br>// remove account gfjhty756th from Gong <br>{"objectId": "gfjhty756th", "modifiedDate": "2019-01-03T22:45:57Z", "name": "PBR", "domains": ["pbr.com", "pbr.gov"], "isDeleted": true} </code><h3>Upload Contact example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=CONTACT<br>{"objectId": "5zbwd7n5n65", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/contacts/5zbwd7n5n65", "accountId": "5ybyh6n6n65", "emailAddress": "john.smith@acme.com", "firstName": "john", "lastName": "smith", "phoneNumber": "(912) 507-4395"}</code><h3>Upload Lead example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=LEAD<br>{"objectId": "4v5bt54t553", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/leads/45k4j5j5k44", "emailAddress": "jane.doe@acme.com", "firstName": "Jane", "lastName": "Doe", "title": "VP Special Effects", "phoneNumber": "(912) 507-4395"}<br>// remove lead gf4543gf6th<br>{"objectId": "gf4543gf6th", "modifiedDate": "2019-01-03T22:45:57Z", "emailAddress": "john.smith@acme.com", "firstName": "John", "lastName": "Smith", "isDeleted": true} <br>// lead 63473hjg53h converted to account 6sjk47jf78d, contact 87grhn74hg6 and deal dkfj8dfgf87<br>{"objectId": "63473hjg53h", "modifiedDate": "2019-01-03T23:45:57+01:00", "emailAddress": "bob.smith@acme.com", "firstName": "Bob", "lastName": "Smith", "convertedToDealId": "dkfj8dfgf87", "convertedToContactId": "87grhn74hg6", "convertedToAccountId": "6sjk47jf78d"} </code><h3>Upload Deal example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=DEAL<br>{"objectId": "8608553", "modifiedDate": "2022-02-04T18:24:59Z", "url": "http://crm.com/deals/8608553", "accountId": "5ybyh6n6n65", "ownerId": "5486951", "name": "Deal name", "createdDate": "2022-02-04T17:57:23Z", "closeDate": "2022-09-04", "status": OPEN, "stage": "discovery", "amount": 7000, "custom_field_1": "2022-02-04T17:57:23.000Z", "custom_field_2": null}</code><h3>Uploading additional fields</h3><p>If you defined additional fields using the <code>/v2/crm/entity-schema</code> API, include those fields in the JSON file.</p>
     */
    post: operations['uploadCrmData']
  }
  '/v2/calls/transcript': {
    /**
     * Retrieve transcripts of calls (/v2/calls/transcript)
     * @description Returns transcripts for calls that took place during the specified date period. If call IDs are specified, only transcripts for calls with those IDs that took place during the time period are returned.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:transcript'.
     */
    post: operations['getCallTranscripts']
  }
  '/v2/workspaces': {
    /**
     * List all company workspaces (/v2/workspaces)
     * @description Returns a list of all workspaces including their details.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:workspaces:read'.
     */
    get: operations['listWorkspaces']
  }
  '/v2/users': {
    /**
     * List all users (/v2/users)
     * @description List all of the company's users.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
     */
    get: operations['listUsers']
  }
  '/v2/users/{id}': {
    /**
     * Retrieve user (/v2/users/{id})
     * @description Retrieve a specific user.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
     */
    get: operations['getUser']
  }
  '/v2/users/{id}/settings-history': {
    /**
     * Retrieve user settings history (/v2/users/{id}/settings-history)
     * @description Retrieve a specific user's settings history.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
     */
    get: operations['getUserHistory']
  }
  '/v2/settings/trackers': {
    /**
     * Retrieve tracker details (/v2/settings/trackers)
     * @description Retrieves details of all keyword trackers in the system or in a given workspace.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the  'api:settings:trackers:read' scope.
     */
    get: operations['listTrackers']
  }
  '/v2/settings/scorecards': {
    /**
     * Retrieve scorecards details (/v2/settings/scorecards)
     * @description Retrieve all the scorecards within the Gong system.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:settings:scorecards:read'.
     */
    get: operations['listScorecards']
  }
  '/v2/permission-profile/users': {
    /**
     * List all users attached to a given permission profile (/v2/permission-profile/users)
     * @description Returns a list of all users whose access is controlled by the given permission profile.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
     */
    get: operations['listPermissionProfileUsers']
  }
  '/v2/logs': {
    /**
     * Retrieve logs data by type and time range (/v2/logs)
     * @description List log entries that took place during a specified time range.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:logs:read'.
     */
    get: operations['listLogs']
  }
  '/v2/library/folders': {
    /**
     * Retrieve Library folders (/v2/library/folders)
     * @description Use this endpoint to retrieve a list of public library folders. We do not allow retrieval of either private or archived folders.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
     */
    get: operations['getLibraryStructure']
  }
  '/v2/library/folder-content': {
    /**
     * List of calls in a specific folder (/v2/library/folder-content)
     * @description Given a folder id, this endpoint retrieves a list of calls in it.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
     */
    get: operations['getCallsInSpecificFolder']
  }
  '/v2/flows': {
    /**
     * List Gong Engage flows (/v2/flows)
     * @description Lists all 'COMPANY' flows and optionally 'Personal' flows available for the user to choose from.
     *
     * Gong Engage sorts flows by 2 visibility types: 'Personal' and 'Company'
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:read'.
     */
    get: operations['listFlows']
  }
  '/v2/data-privacy/data-for-phone-number': {
    /**
     * Retrieve all references to a phone number. (/v2/data-privacy/data-for-phone-number)
     * @description Shows the elements in the Gong system that reference the given phone number. Given a phone number, this endpoint returns details of any leads or contacts with this phone number and their associated calls and email messages.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.
     */
    get: operations['findAllReferencesToPhoneNumber']
  }
  '/v2/data-privacy/data-for-email-address': {
    /**
     * Retrieve all references to an email address. (/v2/data-privacy/data-for-email-address)
     * @description Shows the elements in the Gong system that reference the given email address. Given an emails address, this endpoint returns details of all calls and email messages that reference this address, and any leads or contacts with this email address.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.
     */
    get: operations['findAllReferencesToEmailAddress']
  }
  '/v2/crm/request-status': {
    /**
     * Get Request Status (/v2/crm/request-status)
     * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the current status of the request for endpoints run asynchronously: </p><ul>  <li>POST /v2/crm/entities</li>  <li>DELETE /v2/crm/integrations</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:upload' scope.</p><h3>Status Codes</h3><ul>  <li>PENDING: file is pending being processed</li>  <li>IN_PROGRESS: file is being processed</li>  <li>DONE: all objects in the file were successfully processed</li>  <li>FAILED: failed to parse some objects, or a general error occurred when the file was being processed</li></ul><h3>Correcting a file that failed to be processed:</h3><p>When the status in the response is FAILED do one of the following: </p><ul>  <li>If the response includes a list of errors, correct the errors in the file as follows:     <ol>      <li>Using the <code>errors.line</code> attribute, locate and correct the data in the JSON file.</li>      <li>You can resend the entire LDJSON file, or only the corrected records via the relevant API. <br>Note: The response returns a maximum of 20 errors. To make sure you have corrected all errors, upload the entire file repeatedly until you receive a DONE status.</li>    </ol>  </li>  <li>A single error in the form of: <br>{"line":0,"description":"....."} indicates a general processing error:     <ol>      <li>Fix the LDJSON file according to the error message.</li>      <li>Upload the entire LDJSON file again.</li>    </ol>  </li></ul>
     */
    get: operations['getRequestStatus']
  }
  '/v2/crm/object/schema/list': {
    get: operations['listCrmSchemaFieldsDeprecated']
  }
  '/v2/crm/object/list': {
    get: operations['getCrmObjectsDeprecated']
  }
  '/v2/crm/integration/list': {
    get: operations['listGenericCrmIntegrationDeprecated']
  }
  '/v2/calls/manual-crm-associations': {
    /**
     * List all calls that were manually associated with CRM objects (/v2/calls/manual-crm-associations) in Beta Phase
     * @description Returns a list of all calls that were manually associated or re-associated with CRM account and deal/opportunity since a given time.
     *
     * Actions will be listed in the ascending order of their timing.
     *
     * Notice if a call was associated and later re-associated the API will return both events.
     *
     * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:crm-calls:manual-association:read'.
     */
    get: operations['listCRMCallsManualAssociation']
  }
  '/v2/all-permission-profiles': {
    /**
     * List all company permission profiles for a given workspace (/v2/all-permission-profiles)
     * @description Returns a list of all permission profiles.
     *
     * The listing is in the alphabetical order of the profile names.
     */
    get: operations['listPermissionProfile']
  }
  '/v2/crm/integration/delete': {
    delete: operations['deleteGenericCrmIntegrationDeprecated']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description Calls access permission. */
    CallAccessWithPermissionLevel: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description Coaching access permission. */
    CoachingAccessWithPermissionLevel: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description Deals access permission. */
    DealsAccessWithPermissionLevel: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description Emails access permission. */
    EmailsAccessWithPermissionLevel: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description User can view forecast submissions. */
    ForecastAccess: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description User can edit forecasts submissions. */
    ForecastEditSubmissions: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description User can edit forecast Targets. */
    ForecastEditTargets: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description All forecast permissions. */
    ForecastPermissions: {
      forecastAccess?: components['schemas']['ForecastAccess']
      forecastEditSubmissions?: components['schemas']['ForecastEditSubmissions']
      forecastEditTargets?: components['schemas']['ForecastEditTargets']
    }
    /** @description Insights access permission. */
    InsightsAccessWithPermissionLevel: {
      /**
       * @description Permission access scope.
       * @enum {string}
       */
      permissionLevel?:
        | 'all'
        | 'managers-team'
        | 'report-to-them'
        | 'own'
        | 'none'
        | 'all / managers-team / report-to-them / own / none'
      /**
       * @description List of user IDs to populate the managers-team permission level
       *
       * You can retrieve the user ids by using the “Users” API.
       * @example [
       *   "295738305212375930"
       * ]
       */
      teamLeadIds?: string[]
    }
    /** @description Library folder access permission. */
    LibraryFolderAccess: {
      /**
       * @description Library folder permission level - mandatory value.
       * @enum {string}
       */
      permissionLevel?:
        | 'none'
        | 'all'
        | 'specific-folders'
        | 'none, all, specific-folders'
      /**
       * @description List of library folder Ids, if set, "permissionLevel" must not be "none".
       * @example [
       *   "3843152912968920037"
       * ]
       */
      libraryFolderIds?: string[]
      /**
       * @description A user with this profile can manage public folder, if set, "permissionLevel" must not be "none".
       * @example true
       */
      managePublicFolder?: boolean
      /**
       * @description A user with this profile can manage streams, if set, "permissionLevel" must not be "none".
       * @example true
       */
      manageStreams?: boolean
      /**
       * @description A user with this profile can add calls to folders, archive calls, if set, "permissionLevel" must not be "none".
       * @example true
       */
      manageFolderCalls?: boolean
      /**
       * @description A user with this profile can share folders and streams from Your Library with other team members, if set, "permissionLevel" must not be "none".
       * @example true
       */
      shareFoldersAndStreams?: boolean
    }
    /** @description Permission profile */
    PermissionProfileDTO: {
      /**
       * @description Unique numeric identifier of the permission profile (up to 20 digits).
       * @example 3843152912968920037
       */
      id?: string
      /**
       * @description Permission profile name.
       * @example Profile
       */
      name?: string
      /**
       * @description Permission profile description.
       * @example Description
       */
      description?: string
      callsAccess?: components['schemas']['CallAccessWithPermissionLevel']
      libraryFolderAccess?: components['schemas']['LibraryFolderAccess']
      dealsAccess?: components['schemas']['DealsAccessWithPermissionLevel']
      forecastPermissions?: components['schemas']['ForecastPermissions']
      coachingAccess?: components['schemas']['CoachingAccessWithPermissionLevel']
      insightsAccess?: components['schemas']['InsightsAccessWithPermissionLevel']
      emailsAccess?: components['schemas']['EmailsAccessWithPermissionLevel']
      /**
       * @description User can score calls.
       * @example true
       */
      scoreCalls?: boolean
      /**
       * @description User can download call media.
       * @example true
       */
      downloadCallMedia?: boolean
      /**
       * @description User can share calls with customers.
       * @example true
       */
      shareCallsWithCustomers?: boolean
      /**
       * @description User can manually schedule and upload calls.
       * @example true
       */
      manuallyScheduleAndUploadCalls?: boolean
      /**
       * @description User can set their own calls as private.
       * @example true
       */
      privateCalls?: boolean
      /**
       * @description User can delete calls.
       * @example true
       */
      deleteCalls?: boolean
      /**
       * @description User can trim calls.
       * @example true
       */
      trimCalls?: boolean
      /**
       * @description User can delete emails.
       * @example true
       */
      deleteEmails?: boolean
      /**
       * @description User can view and search calls.
       * @example true
       */
      callsAndSearch?: boolean
      /**
       * @description User can view library pages.
       * @example true
       */
      library?: boolean
      /**
       * @description User can view deals pages.
       * @example true
       */
      deals?: boolean
      /**
       * @description User can create/edit/delete deals boards.
       * @example true
       */
      createEditAndDeleteDealsBoards?: boolean
      /**
       * @description User can perform inline editing of deals.
       * @example true
       */
      dealsInlineEditing?: boolean
      /**
       * @description User can view account pages.
       * @example true
       */
      account?: boolean
      /**
       * @description User can view coaching pages.
       * @example true
       */
      coaching?: boolean
      /**
       * @description User can view team stats page.
       * @example true
       */
      teamStats?: boolean
      /**
       * @description User can view initiatives page.
       * @example true
       */
      initiatives?: boolean
      /**
       * @description User can view market page.
       * @example true
       */
      market?: boolean
      /**
       * @description User can view activity pages.
       * @example true
       */
      activity?: boolean
      /**
       * @description User can view forecast pages.
       * @example true
       */
      forecast?: boolean
      /**
       * @description User can manage forecast boards and upload targets.
       * @example true
       */
      forecastManage?: boolean
      /**
       * @description User can manage company email templates.
       * @example true
       */
      engageManageCompanyTemplates?: boolean
      /**
       * @description User can manage company sequences.
       * @example true
       */
      engageManageCompanySequences?: boolean
      /**
       * @description User can manage general business settings.
       * @example true
       */
      manageGeneralBusinessSettings?: boolean
      /**
       * @description User can manage scorecards.
       * @example true
       */
      manageScorecards?: boolean
      /**
       * @description User can export calls and coaching metrics data to CSV.
       * @example true
       */
      exportCallsAndCoachingDataToCSV?: boolean
      /**
       * @description User can perform inline editing of crm data.
       * @example true
       */
      crmDataInlineEditing?: boolean
      /**
       * @description User can perform import of crm data.
       * @example true
       */
      crmDataImport?: boolean
    }
    PermissionProfileResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      profile?: components['schemas']['PermissionProfileDTO']
    }
    ErrorResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description Error messages.
       * @example [
       *   "An error has occurred"
       * ]
       */
      errors?: string[]
    }
    UpdateMeetingResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description The unique meeting identifier of the meeting.
       * @example 7782342274025937895
       */
      meetingId?: string
    }
    /**
     * @description Attendees the requesting party should add to the invitation, this should support adding email addresses such as coordinator@gong.io for Gong to schedule the recording of the meeting.
     * @example [
     *   {
     *     "displayName": "Gong Assistant",
     *     "email": "assistant@gong.io"
     *   }
     * ]
     */
    MeetingInvitee: {
      /**
       * @description The unique meeting to identify the meeting.
       * @example test@test.com
       */
      email?: string
      /**
       * @description The name of the person.
       * @example Test User
       */
      displayName?: string
      /**
       * @description The first name of the person, if available.
       * @example Jon
       */
      firstName?: string
      /**
       * @description The last name of the person, if available.
       * @example Snow
       */
      lastName?: string
    }
    /** @description Meeting update metadata */
    UpdateMeetingRequest: {
      /**
       * @description The meeting start time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-17T02:30:00-08:00
       */
      startTime: string
      /**
       * @description The meeting end time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-19T02:30:00-08:00
       */
      endTime: string
      /**
       * @description Title of the event.
       * @example Example call
       */
      title?: string
      /**
       * @description A list of email addresses of invitees to the event (not including the organizer).
       * @example [
       *   {
       *     "displayName": "Cookie Monster",
       *     "email": "cookie.monster@cookies.com"
       *   }
       * ]
       */
      invitees: components['schemas']['MeetingInvitee'][]
      /**
       * @description The ID as it is formed on the external system.
       * @example 7JEHFRGXDDZFEW2FC4U
       */
      externalId?: string
      /**
       * @description The email address of the user who created the meeting.
       * @example test@test.com
       */
      organizerEmail: string
    }
    RegisterGenericCrmResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * Format: int64
       * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style>Your integration ID to be used in requests to the API. This ensures you are accessing the correct integration.<br><b>Note:</b> Parse the integrationId as Long or BigInt. Parsing the integrationId as an Integer will truncate the integrationId to trailing zeros and will return an incorrect ID.
       * @example 5517027188234206000
       */
      integrationId?: number
    }
    Actor: {
      /**
       * @description The email address of the person, if available.
       * @example test@test.com
       */
      email?: string
      /**
       * @description The name of the person, if available.
       * @example Test User
       */
      name?: string
      /**
       * @description The title of the person, if available.
       * @example Enterprise Account Executive
       */
      title?: string
      /** @description A list of links to external systems such as CRM, Telephony System, Case Management, etc. */
      context?: components['schemas']['PartyUploadContext'][]
    }
    /** @description Links to external systems such as CRM, Telephony System, Case Management etc. Currently only Salesforce and Generic are supported. */
    CallUploadContext: {
      /**
       * @description External system name. Currently only Salesforce and Generic are supported.
       * @example Salesforce
       * @enum {string}
       */
      system: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description List of objects within the external system. Note: Multiple opportunities/deals belonging to the same account are not supported. */
      objects?: components['schemas']['ExternalCrmCallObject'][]
    }
    /** @description Content Viewed event */
    ContentViewedEvent: {
      /**
       * @description The unique identifier of the reporting system. It is the same value in all events originating from the same system.
       * @example abc123
       */
      reportingSystem: string
      /**
       * @description The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);
       * @example 2021-02-17T02:30:00-08:00
       */
      eventTimestamp: string
      /**
       * @description The original id of the event as designated in the reporting system.
       * @example abc123
       */
      eventId?: string
      /**
       * @description The id of the content that was viewed in the reporting system.
       * @example doc_123456789
       */
      contentId: string
      /**
       * @description The url of the content that was viewed in the reporting system. This is the url that is was accessed by the viewer.
       * @example https://example.com/doc_123456789
       */
      contentUrl: string
      /**
       * @description Human readable title of the content.
       * @example Features & Spec V.1
       */
      contentTitle: string
      /**
       * @description The name of the action like "Document Viewed" or "Presentation Opened".
       * @example My Title
       */
      viewActionTitle?: string
      /**
       * @description The id of the share action that corresponds to this view event, in case there can be more than one share per content.
       * @example abc123
       */
      shareId?: string
      /**
       * @description The link to a page that presents additional information about this event.
       * @example https://example.com/path/to/a/page
       */
      viewInfoUrl?: string
      viewer?: components['schemas']['Actor']
      /** @description A list of references to external systems such as CRM, Telephony System, Case Management, etc. */
      crmContext?: components['schemas']['CallUploadContext'][]
      /** @description A list of additional properties for the content */
      contentProperties?: components['schemas']['Generic Property'][]
      /** @description A list of additional properties for the event */
      eventProperties?: components['schemas']['Generic Property'][]
      /** @description "User-Agent" header value for browser based interaction */
      userAgent?: string
      /** @description The application identification string in case of interaction via mobile application (bundle identifier or package name). */
      mobileAppId?: string
      /**
       * @description Platform on which the interaction was made
       * @enum {string}
       */
      agentPlatform?: 'Windows, Linux, MacOS, iOS, Android'
      /**
       * @description Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
       * @example 623457276584334
       */
      workspaceId?: string
      nonCompanyParticipants?: components['schemas']['Actor'][]
      moreInfoUrl?: string
      actionName?: string
      sharingMessageSubject?: string
      sharingMessageBody?: string
      sharer?: components['schemas']['Sharer']
    }
    /** @description External object data */
    ContextField: {
      /**
       * @description Field name. For Account supported fields are: Name, Website, Industry and all the custom fields. For Opportunity supported fields are Name, LeadSource, Type, StageName, Probability, Amount, CloseDate and all the custom fields.
       * @example name
       */
      name?: string
      /**
       * @description Field value
       * @example Gong Inc.
       */
      value?: Record<string, never>
    }
    /** @description External object data */
    CrmPartyContextField: {
      /**
       * @description Field name
       * @example name
       */
      name?: string
      /**
       * @description Object value
       * @example Gong Inc.
       */
      value?: Record<string, never>
    }
    /** @description External object associated with the call */
    ExternalCrmCallObject: {
      /**
       * @description Object Type. e.g. Account.
       * @example Account
       * @enum {string}
       */
      objectType:
        | 'Opportunity'
        | 'Account'
        | 'Lead'
        | 'Contact'
        | 'User'
        | 'Opportunity,Account'
      /**
       * @description Object ID. For Salesforce both case-sensitive and case-insensitive formats are supported.
       * @example 0013601230sV7grAAC
       */
      objectId: string
      /** @description Object fields. Intended for future use only. */
      fields?: components['schemas']['ContextField'][]
    }
    /** @description External object associated with the party */
    ExternalCrmPartyObject: {
      /**
       * @description Object Type. Valid only for non-company parties. e.g. Lead.
       * @example Contact
       * @enum {string}
       */
      objectType:
        | 'Lead'
        | 'Contact'
        | 'Account'
        | 'Opportunity'
        | 'User'
        | 'Lead,Contact'
      /**
       * @description Object ID. For Salesforce both case-sensitive and case-insensitive formats are supported.
       * @example 0013601230sV7grAAC
       */
      objectId: string
      /** @description Object fields. Intended for future use only. */
      fields?: components['schemas']['CrmPartyContextField'][]
    }
    /** @description A list of additional properties for the event */
    'Generic Property': {
      /** @description Property name. */
      name: string
      /**
       * @description Property value. Value format should match dataType. If dataType is "number", value should be passed in JSON number format, e.g. 3.14. If dataType is "date", the value should be passed in JSON date format, e.g. 2021-02-17T02:30:00-08:00. If the dataType is "url", the value should be valid URL, e.g. "https://example.com/example?q=v"
       * @example string
       */
      value: string
      /**
       * @description Property data type.
       * @example string
       * @enum {string}
       */
      dataType: 'number, string, url, date'
    }
    /** @description Links to external systems such as CRM, Telephony System, Case Management etc. Currently only Salesforce and Generic are supported. */
    PartyUploadContext: {
      /**
       * @description External system name. Currently only Salesforce and Generic are supported.
       * @example Salesforce
       * @enum {string}
       */
      system: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description List of objects within the external system */
      objects?: components['schemas']['ExternalCrmPartyObject'][]
    }
    Sharer: {
      /**
       * @description The user id in Gong, if available.
       * @example 234599484848423
       */
      id?: string
      /**
       * @description The email address of the person, if available.
       * @example test@test.com
       */
      email?: string
      /**
       * @description The name of the person, if available.
       * @example Test User
       */
      name?: string
    }
    /** @description Content Shared Event */
    ContentSharedEvent: {
      /**
       * @description The unique identifier of the reporting system. It is the same value in all events originating from the same system.
       * @example abc123
       */
      reportingSystem: string
      /**
       * @description The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);
       * @example 2021-02-17T02:30:00-08:00
       */
      eventTimestamp: string
      /**
       * @description The original id of the event as designated in the reporting system.
       * @example abc123
       */
      eventId?: string
      /**
       * @description The id of the content that was shared in the reporting system.
       * @example doc_123456789
       */
      contentId: string
      /**
       * @description The url of the content that was shared in the reporting system. This is the url that is was accessed by the viewer.
       * @example https://example.com/doc_123456789
       */
      contentUrl: string
      /**
       * @description Human readable title of the content.
       * @example Features & Spec V.1
       */
      contentTitle: string
      /**
       * @description The id of the share action, in case there can be more than one share per content.
       * @example abc123
       */
      shareId?: string
      /**
       * @description The link to a page that presents additional information about this event.
       * @example https://example.com/path/to/a/page
       */
      shareInfoUrl?: string
      /**
       * @description The subject of share email / message.
       * @example Sample Subject
       */
      sharingMessageSubject?: string
      /**
       * @description The share message body. Can contain HTML and will be cleaned when it is presented.
       * @example <b>Hi</b>
       */
      sharingMessageBody?: string
      sharer?: components['schemas']['Sharer']
      /** @description array of objects with  name + email of recipients. Email is required. */
      recipients?: components['schemas']['Actor'][]
      /** @description A list of references to external systems such as CRM, Telephony System, Case Management, etc. */
      crmContext?: components['schemas']['CallUploadContext'][]
      /** @description A list of additional properties for the content */
      contentProperties?: components['schemas']['Generic Property'][]
      /** @description A list of additional properties for the event */
      eventProperties?: components['schemas']['Generic Property'][]
      /**
       * @description Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
       * @example 623457276584334
       */
      workspaceId?: string
      /**
       * @description The name of the action like "Document Sent" or "Presentation Shared".
       * @example My Title
       */
      actionName?: string
      nonCompanyParticipants?: components['schemas']['Actor'][]
      moreInfoUrl?: string
      mobileAppId?: string
      agentPlatform?: string
      userAgent?: string
    }
    /** @description Custom Action Event */
    CustomActionEvent: {
      /**
       * @description The unique identifier of the reporting system. It is the same value in all events originating from the same system.
       * @example abc123
       */
      reportingSystem: string
      /**
       * @description The date and time when the event happened in the ISO-8601 format (e.g., '2021-08-01T02:30:00+05:00' or '2021-08-01T08:00:00Z', where Z stands for UTC);
       * @example 2021-02-17T02:30:00-08:00
       */
      eventTimestamp: string
      /**
       * @description The original id of the event as designated in the reporting system.
       * @example abc123
       */
      eventId?: string
      /**
       * @description The id of the content that was viewed in the reporting system.
       * @example doc_123456789
       */
      contentId?: string
      /**
       * @description The url of the content that was viewed in the reporting system. This is the url that is was accessed by the viewer.
       * @example https://example.com/doc_123456789
       */
      contentUrl?: string
      /**
       * @description Human readable title of the content.
       * @example Features & Spec V.1
       */
      contentTitle?: string
      /**
       * @description The name of the action like "Document Viewed" or "Presentation Opened".
       * @example My Title
       */
      actionName?: string
      /**
       * @description The link to a page that presents additional information about this event.
       * @example https://example.com/path/to/a/page
       */
      eventInfoUrl?: string
      actor?: components['schemas']['Actor']
      /** @description A list of references to external systems such as CRM, Telephony System, Case Management, etc. */
      crmContext?: components['schemas']['CallUploadContext'][]
      /** @description A list of additional properties for the content */
      contentProperties?: components['schemas']['Generic Property'][]
      /** @description A list of additional properties for the event */
      eventProperties?: components['schemas']['Generic Property'][]
      /** @description "User-Agent" header value for browser based interaction */
      userAgent?: string
      /** @description The application identification string in case of interaction via mobile application (bundle identifier or package name). */
      mobileAppId?: string
      /**
       * @description Platform on which the interaction was made
       * @enum {string}
       */
      agentPlatform?: 'Windows, Linux, MacOS, iOS, Android'
      /**
       * @description Optional workspace identifier. If specified, the event will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
       * @example 623457276584334
       */
      workspaceId?: string
      nonCompanyParticipants?: components['schemas']['Actor'][]
      moreInfoUrl?: string
      shareId?: string
      sharingMessageSubject?: string
      sharingMessageBody?: string
      sharer?: components['schemas']['Sharer']
    }
    GenericCrmRegistrationRequest: {
      /**
       * @description Email address of the person responsible for the integration
       * @example joe.doe@acme.com
       */
      ownerEmail: string
      /**
       * @description The name of the integration
       * @example ACME Sandbox
       */
      name: string
    }
    BaseResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
    }
    NewCallRecordingResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description New call ID
       * @example 7782342274025937895
       */
      callId?: string
      /**
       * @description The URL to the page in the Gong web application where the call is available.
       * @example https://app.gong.io/call?id=7782342274025937895
       */
      url?: string
    }
    /** @description Call users access */
    CallUsersAccessDto: {
      /**
       * @description Gong's unique numeric call ID.
       * @example 7782342274025937895
       */
      callId: string
      /**
       * @description Array of Gong's unique numeric user IDs.
       * @example [
       *   "234599484848423"
       * ]
       */
      userIds: string[]
    }
    CallsUsersAccessAddDto: {
      /** @description A list, in which each item specifies a call and a list of users to be given access to this call. */
      callAccessList?: components['schemas']['CallUsersAccessDto'][]
    }
    /** @description Information about the number of records that match the requested filter. */
    Records: {
      /**
       * Format: int32
       * @description Total number of records.
       * @example 263
       */
      totalRecords?: number
      /**
       * Format: int32
       * @description Number of records in the current page.
       * @example 100
       */
      currentPageSize?: number
      /**
       * Format: int32
       * @description Current page number.
       * @example 0
       */
      currentPageNumber?: number
      /**
       * @description Returned only when there are more records to be retrieved. Repeat the API call and pass this cursor value in the request to retrieve the next page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
    }
    /** @description The user's settings in the Gong system. */
    Settings: {
      /**
       * @description True if the team member is set to be recorded by Gong, false if not.
       * @example true
       */
      webConferencesRecorded?: boolean
      /** @description If true, invitation of this user to a web conference will prevent its recording (even if other users invited are set to record). */
      preventWebConferenceRecording?: boolean
      /** @description True if the team member is set to import telephony calls from by Gong, false if not. */
      telephonyCallsImported?: boolean
      /**
       * @description True if the team member is set to import emails by Gong, false if not.
       * @example true
       */
      emailsImported?: boolean
      /** @description True if the team member is set to prevent import of emails by Gong, false if not. */
      preventEmailImport?: boolean
      /**
       * @description True if the team member is set to import non recorded meetings by Gong, false if not.
       * @example true
       */
      nonRecordedMeetingsImported?: boolean
      /**
       * @description True if the team member has Gong Connect enabled, false if not.
       * @example true
       */
      gongConnectEnabled?: boolean
    }
    /** @description User's metadata. */
    UserMetadata: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits).
       * @example 234599484848423
       */
      id?: string
      /**
       * @description The email address of the Gong user.
       * @example test@test.com
       */
      emailAddress?: string
      /**
       * @description Creation time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);of the Gong user.
       * @example 2018-02-17T02:30:00-08:00
       */
      created?: string
      /**
       * @description True if the user is active, false if not.
       * @example true
       */
      active?: boolean
      /**
       * @description List of email address aliases of the Gong user.
       * @example [
       *   "testAlias@test.com"
       * ]
       */
      emailAliases?: string[]
      /**
       * @description The trusted authentication email assigned to the Gong user
       * @example test@test.com
       */
      trustedEmailAddress?: string
      /**
       * @description The first name of the Gong user.
       * @example Jon
       */
      firstName?: string
      /**
       * @description The last name of the Gong user.
       * @example Snow
       */
      lastName?: string
      /**
       * @description The job title of the Gong user.
       * @example Enterprise Account Executive
       */
      title?: string
      /**
       * @description The phone number of the Gong user.
       * @example +1 123-567-8989
       */
      phoneNumber?: string
      /**
       * @description The extension number of the Gong user.
       * @example 123
       */
      extension?: string
      /**
       * @description The list of personal meeting URLs of the Gong user.
       * @example [
       *   "https://zoom.us/j/123"
       * ]
       */
      personalMeetingUrls?: string[]
      settings?: components['schemas']['Settings']
      /**
       * @description The manager ID of the Gong user.
       * @example 563515258458745
       */
      managerId?: string
      /**
       * @description The Gong recording consent meeting link
       * @example https://join.gong.io/my-company/jon.snow?tkn=MoNpS9tMNt8BK7EZxQpSJl
       */
      meetingConsentPageUrl?: string
      spokenLanguages?: components['schemas']['spokenLanguage'][]
    }
    UsersMetadata: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one user's metadata. */
      users?: components['schemas']['UserMetadata'][]
    }
    /** @description Languages spoken during calls by the Gong user */
    spokenLanguage: {
      /**
       * @description Language spoken by the user encoded according to the BCP-47 standard.
       * @example es-ES
       */
      language?: string
      /**
       * @description Indicates the primary language (one per user). The language will be assumed when the system cannot identify the language of a call, e.g., due to poor quality or the call being too short.
       * @example true
       */
      primary?: boolean
    }
    /** @description Filter parameters. */
    MultipleUsersRequestWithCreationDates: {
      /**
       * @description An optional user creation time lower limit, if supplied the API will return only the users created at or after this time. The filed is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-17T02:30:00-08:00
       */
      createdFromDateTime?: string
      /**
       * @description An optional user creation time upper limit, if supplied the API will return only the users created before this time. The filed is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-19T02:30:00-08:00
       */
      createdToDateTime?: string
      /**
       * @description Avatars are synthetic users representing Gong employees (CSMs and support providers) when they access your instance. References to avatars' IDs may be found in the outputs of other API endpoints. This parameter is optional, if not provided avatars will not be included in the results.
       * @example false
       */
      includeAvatars?: boolean
      /**
       * @description Set of Gong's unique numeric identifiers for the users (up to 20 digits).
       * @example [
       *   "234599484848423"
       * ]
       */
      userIds?: string[]
    }
    PublicApiBaseRequestV2MultipleUsersRequestWithCreationDates: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['MultipleUsersRequestWithCreationDates']
    }
    CompanyUsersIntercationStatsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list of interaction statistics. Applicable values: 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience', 'Question Rate'. */
      peopleInteractionStats?: components['schemas']['InteractionStats'][]
      /**
       * @description The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results starts.
       * @example 2019-01-20T00:00:00-08:00
       */
      fromDateTime?: string
      /**
       * @description The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results ends.
       * @example 2019-01-21T000:00:00-08:00
       */
      toDateTime?: string
      /**
       * @description The company's defined timezone in Gong.
       * @example US/Pacific
       */
      timeZone?: string
    }
    InteractionStat: {
      /**
       * @description Stat name
       * @example Interactivity
       */
      name?: string
      /**
       * Format: double
       * @description Stat measurement (Can be either a double or integer)
       * @example 9.23
       */
      value?: number
    }
    /** @description A list of interaction statistics. Applicable values: 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience', 'Question Rate'. */
    InteractionStats: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits).
       * @example 234599484848423
       */
      userId?: string
      /**
       * @description The email address of the Gong user.
       * @example test@test.com
       */
      userEmailAddress?: string
      personInteractionStats?: components['schemas']['InteractionStat'][]
    }
    /** @description Filter parameters. */
    MultipleUsersWithDates: {
      /**
       * @description The date (in the company's time zone) from which to list a user's activity. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD.
       * @example 2019-01-20
       */
      fromDate: string
      /**
       * @description The date (in the company's time zone) until which to list a user's activity. This value is exclusive. This value should not exceed the current day. The date should be specified in the following format: YYYY-MM-DD.
       * @example 2019-01-21
       */
      toDate: string
      /** Format: date-time */
      createdFromDateTime?: string
      /** Format: date-time */
      createdToDateTime?: string
      /**
       * @description Set of Gong's unique numeric identifiers for the users (up to 20 digits).
       * @example [
       *   "234599484848423"
       * ]
       */
      userIds?: string[]
    }
    PublicApiBaseRequestV2MultipleUsersWithDates: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['MultipleUsersWithDates']
    }
    /** @description The answers in the answered scorecard. */
    Answer: {
      /**
       * Format: int64
       * @description The identifier of the question.
       */
      questionId?: number
      /**
       * Format: int64
       * @description The identifier of the revision version of the question.
       * @example 43955224753211110
       */
      questionRevisionId?: number
      /**
       * @description If the question is the main overall question or not.
       * @example true
       */
      isOverall?: boolean
      /**
       * Format: int32
       * @description Score between 1 to 5, if answered. Null otherwise.
       * @example 4
       */
      score?: number
      /**
       * @description The answer's text, if answered. Null otherwise.
       * @example Done a great job. Scheduled a follow-up demo.
       */
      answerText?: string
      /**
       * @description If the question is irrelevant for the call.
       * @example false
       */
      notApplicable?: boolean
    }
    /** @description A list, in which each item contains one answered scorecard. */
    AnsweredScorecard: {
      /**
       * Format: int64
       * @description The identifier of the answer of the scorecard.
       * @example 563515258458745
       */
      answeredScorecardId?: number
      /**
       * Format: int64
       * @description The identifier of the scorecard.
       * @example 6843152929075440000
       */
      scorecardId?: number
      /**
       * @description Scorecard name.
       * @example SDR Call Scorecard
       */
      scorecardName?: string
      /**
       * Format: int64
       * @description Gong's unique numeric identifier for the call (up to 20 digits).
       * @example 7782342274025938000
       */
      callId?: number
      /**
       * Format: date-time
       * @description The date and time when the call was recorded in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1518863400
       */
      callStartTime?: string
      /**
       * Format: int64
       * @description The user Id of the team member being reviewed, who hosted the call.
       * @example 234599484848423
       */
      reviewedUserId?: number
      /**
       * Format: int64
       * @description The user Id of the team member who answered the scorecard for the call.
       * @example 563515258458745
       */
      reviewerUserId?: number
      /**
       * Format: date-time
       * @description The date and time when the review was completed and published in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1518863400
       */
      reviewTime?: string
      /** @enum {string} */
      visibilityType?: 'PUBLIC' | 'PRIVATE' | 'OPT_IN_USERS'
      /** @description The answers in the answered scorecard. */
      answers?: components['schemas']['Answer'][]
    }
    AnsweredScorecards: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item contains one answered scorecard. */
      answeredScorecards?: components['schemas']['AnsweredScorecard'][]
    }
    /** @description Filter parameters. */
    AnsweredScorecardsFilter: {
      /**
       * @description The date (in the company's time zone) of the call from when to list calls. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it starts with the earliest recorded call.
       * @example 2019-01-20
       */
      callFromDate?: string
      /**
       * @description The date (in the company's time zone) of the call until when to list calls. This value is exclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it ends with the latest recorded call.
       * @example 2019-01-25
       */
      callToDate?: string
      /**
       * @description The review date (in the company's time zone) from when to list calls. This value is inclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it starts with the earliest reviewed call.
       * @example 2019-01-20
       */
      reviewFromDate?: string
      /**
       * @description The review date (in the company's time zone) until when to list calls. This value is exclusive. The date should be specified in the following format: YYYY-MM-DD; if not specified, it ends with the latest reviewed call.
       * @example 2019-01-25
       */
      reviewToDate?: string
      /**
       * @description List of user Ids of the team members being reviewed. If not specified, it returns all answered scorecards in the corresponding filter.
       * @example [
       *   "234599484848423"
       * ]
       */
      reviewedUserIds?: string[]
      /**
       * @description List of scorecards Ids. If not specified, it returns all answered scorecards in the corresponding filter.
       * @example [
       *   "6843152929075440037"
       * ]
       */
      scorecardIds?: string[]
    }
    PublicApiBaseRequestV2AnsweredScorecardsFilter: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['AnsweredScorecardsFilter']
    }
    /** @description User daily activity */
    DailyActivityWithDates: {
      /**
       * @description List of IDs of calls in which this user is the host.
       * @example [
       *   348056639626337000
       * ]
       */
      callsAsHost?: string[]
      /**
       * @description List of IDs of calls where the user gave feedback.
       * @example [
       *   5580564522626337000
       * ]
       */
      callsGaveFeedback?: string[]
      /**
       * @description  List of IDs of calls where the user requested feedback.
       * @example [
       *   342556337006
       * ]
       */
      callsRequestedFeedback?: string[]
      /**
       * @description  List of IDs of calls where the user received feedback.
       * @example [
       *   342556337006
       * ]
       */
      callsReceivedFeedback?: string[]
      /**
       * @description List of IDs of the user's own calls, that the user listened to.
       * @example [
       *   4553256639626337000
       * ]
       */
      ownCallsListenedTo?: string[]
      /**
       * @description List of IDs of calls, not belonging to this user, that the user listened to.
       * @example [
       *   56305663962633750
       * ]
       */
      othersCallsListenedTo?: string[]
      /**
       * @description List of IDs of calls the user shared with other users inside the company.
       * @example [
       *   37555663966526330000
       * ]
       */
      callsSharedInternally?: string[]
      /**
       * @description List of IDs of calls the user shared with people outside the company.
       * @example [
       *   4563962633756
       * ]
       */
      callsSharedExternally?: string[]
      /**
       * @description List of IDs of calls in which this user is participant (not host)
       * @example [
       *   45783962636582
       * ]
       */
      callsAttended?: string[]
      /**
       * @description List of IDs of calls in which a user gave at least one comment.
       * @example [
       *   45663345636581
       * ]
       */
      callsCommentsGiven?: string[]
      /**
       * @description List of IDs of calls in which a user received at least one comment on the users calls.
       * @example [
       *   45663962636582
       * ]
       */
      callsCommentsReceived?: string[]
      /**
       * @description  List of IDs of calls in which someone pressed the "Mark as reviewed".
       * @example [
       *   45663962636581
       * ]
       */
      callsMarkedAsFeedbackGiven?: string[]
      /**
       * @description List of IDs of calls in which someone pressed the "Mark as reviewed" on the users calls.
       * @example [
       *   45663388836581
       * ]
       */
      callsMarkedAsFeedbackReceived?: string[]
      /**
       * @description List of IDs of calls in which the user filled scorecards.
       * @example [
       *   45663962636582
       * ]
       */
      callsScorecardsFilled?: string[]
      /**
       * @description List of IDs of calls in which someone filled a scorecard on the users calls.
       * @example [
       *   45663962636581
       * ]
       */
      callsScorecardsReceived?: string[]
      /**
       * @description The start of the day in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-20T00:00:00-08:00
       */
      fromDate?: string
      /**
       * @description The end of the day in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-21T000:00:00-08:00
       */
      toDate?: string
    }
    /** @description A list, in which each item contains one user's activity. */
    UserDayByDayActivity: {
      /** @description Gong's unique numeric identifier for the user (up to 20 digits). */
      userId?: string
      /** @description The email address of the Gong user. */
      userEmailAddress?: string
      /** @description Array of daily activity records, one for every day in the date range. */
      userDailyActivityStats?: components['schemas']['DailyActivityWithDates'][]
    }
    UsersDayByDayActivity: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item contains one user's activity. */
      usersDetailedActivities?: components['schemas']['UserDayByDayActivity'][]
    }
    /** @description Aggregated activity for a user within a time period */
    AggregateActivity: {
      /**
       * Format: int32
       * @description The number of recorded calls this user hosted.
       * @example 20
       */
      callsAsHost?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user gave feedback on.
       * @example 35
       */
      callsGaveFeedback?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user requested feedback on.
       * @example 77
       */
      callsRequestedFeedback?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user received feedback on.
       * @example 67
       */
      callsReceivedFeedback?: number
      /**
       * Format: int32
       * @description The number of the user's own calls the user listened to.
       * @example 668
       */
      ownCallsListenedTo?: number
      /**
       * Format: int32
       * @description The number of other users' calls the user listened to.
       * @example 96
       */
      othersCallsListenedTo?: number
      /**
       * Format: int32
       * @description The number of calls the user shared with others inside the company.
       * @example 478
       */
      callsSharedInternally?: number
      /**
       * Format: int32
       * @description The number of calls the user shared with others outside the company.
       * @example 75
       */
      callsSharedExternally?: number
      /**
       * Format: int32
       * @description The number of scorecards the user completed.
       * @example 876
       */
      callsScorecardsFilled?: number
      /**
       * Format: int32
       * @description The number of calls in which someone filled a scorecard on the user's calls.
       * @example 876
       */
      callsScorecardsReceived?: number
      /**
       * Format: int32
       * @description The number of calls in which this user is participant (not host).
       * @example 46
       */
      callsAttended?: number
      /**
       * Format: int32
       * @description The number of calls in which a user gave at least one comment.
       * @example 21
       */
      callsCommentsGiven?: number
      /**
       * Format: int32
       * @description The number of calls in which a user received at least one comment on the users calls.
       * @example 13
       */
      callsCommentsReceived?: number
      /**
       * Format: int32
       * @description The number of calls in which someone pressed the "Mark as reviewed".
       * @example 24
       */
      callsMarkedAsFeedbackGiven?: number
      /**
       * Format: int32
       * @description The number of calls in which someone pressed the “Mark as reviewed” on the users calls.
       * @example 35
       */
      callsMarkedAsFeedbackReceived?: number
    }
    CompanyUsersAggregateActivityResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one user's activities. */
      usersAggregateActivityStats?: components['schemas']['UserActivity'][]
      /**
       * @description The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results starts.
       * @example 2019-01-20T00:00:00-08:00
       */
      fromDateTime?: string
      /**
       * @description The date and time in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC, when the list of results ends.
       * @example 2019-01-21T000:00:00-08:00
       */
      toDateTime?: string
      /**
       * @description The company's defined timezone in Gong.
       * @example US/Pacific
       */
      timeZone?: string
    }
    /** @description A list, in which each item specifies one user's activities. */
    UserActivity: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits).
       * @example 234599484848423
       */
      userId?: string
      /**
       * @description The email address of the Gong user.
       * @example test@test.com
       */
      userEmailAddress?: string
      userAggregateActivityStats?: components['schemas']['AggregateActivity']
    }
    /** @description Aggregated activity for a user within a time period */
    AggregateActivityWithDates: {
      /**
       * Format: int32
       * @description The number of recorded calls this user hosted.
       * @example 20
       */
      callsAsHost?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user gave feedback on.
       * @example 35
       */
      callsGaveFeedback?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user requested feedback on.
       * @example 77
       */
      callsRequestedFeedback?: number
      /**
       * Format: int32
       * @description The number of recorded calls the user received feedback on.
       * @example 67
       */
      callsReceivedFeedback?: number
      /**
       * Format: int32
       * @description The number of the user's own calls the user listened to.
       * @example 668
       */
      ownCallsListenedTo?: number
      /**
       * Format: int32
       * @description The number of other users' calls the user listened to.
       * @example 96
       */
      othersCallsListenedTo?: number
      /**
       * Format: int32
       * @description The number of calls the user shared with others inside the company.
       * @example 478
       */
      callsSharedInternally?: number
      /**
       * Format: int32
       * @description The number of calls the user shared with others outside the company.
       * @example 75
       */
      callsSharedExternally?: number
      /**
       * Format: int32
       * @description The number of scorecards the user completed.
       * @example 876
       */
      callsScorecardsFilled?: number
      /**
       * Format: int32
       * @description The number of calls in which someone filled a scorecard on the user's calls.
       * @example 876
       */
      callsScorecardsReceived?: number
      /**
       * Format: int32
       * @description The number of calls in which this user is participant (not host).
       * @example 46
       */
      callsAttended?: number
      /**
       * Format: int32
       * @description The number of calls in which a user gave at least one comment.
       * @example 21
       */
      callsCommentsGiven?: number
      /**
       * Format: int32
       * @description The number of calls in which a user received at least one comment on the users calls.
       * @example 13
       */
      callsCommentsReceived?: number
      /**
       * Format: int32
       * @description The number of calls in which someone pressed the "Mark as reviewed".
       * @example 24
       */
      callsMarkedAsFeedbackGiven?: number
      /**
       * Format: int32
       * @description The number of calls in which someone pressed the “Mark as reviewed” on the users calls.
       * @example 35
       */
      callsMarkedAsFeedbackReceived?: number
      /**
       * @description The start of the period, or the request filter's fromDate for the first period in the range, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-20T00:00:00-08:00
       */
      fromDate?: string
      /**
       * @description The end of the period, or the request filter's toDate for the last period in the range,  in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-21T000:00:00-08:00
       */
      toDate?: string
    }
    /** @description A list, in which each item contains details of one user's activities. */
    UserAggregateByPeriodActivities: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits).
       * @example 234599484848423
       */
      userId?: string
      /**
       * @description The email address of the Gong user.
       * @example test@test.com
       */
      userEmailAddress?: string
      /** @description A list, in which each item contains aggregate user activity for consecutive time periods in the date range. */
      userAggregateActivity?: components['schemas']['AggregateActivityWithDates'][]
    }
    UsersAggregateByPeriodActivity: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item contains details of one user's activities. */
      usersAggregateActivity?: components['schemas']['UserAggregateByPeriodActivities'][]
    }
    RequestWithTimePeriod: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['MultipleUsersWithDates']
      /**
       * @description Calendar time period for aggregating data. Note: First day of the week is Monday.
       * @example DAY
       * @enum {string}
       */
      aggregationPeriod: 'DAY' | 'WEEK' | 'MONTH' | 'QUARTER' | 'YEAR'
    }
    NewMeetingResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description Gong's unique identifier for the meeting (up to 20 digits).
       * @example 7782342274025937895
       */
      meetingId?: string
      /**
       * @description The Gong URL of the meeting, should be used to enter the meeting.
       * @example https://join.gong.io/my-company/jon.snow?tkn=MoNpS9tMNt8BK7EZxQpSJl
       */
      meetingUrl?: string
      /**
       * @description Attendees the requesting party should add to the invitation, this should support adding email addresses such as coordinator@gong.io for Gong to schedule the recording of the meeting.
       * @example [
       *   {
       *     "displayName": "Gong Assistant",
       *     "email": "assistant@gong.io"
       *   }
       * ]
       */
      additionalInvitees?: components['schemas']['MeetingInvitee'][]
    }
    /** @description New meeting metadata */
    NewMeetingRequest: {
      /**
       * @description The meeting start time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-17T02:30:00-08:00
       */
      startTime: string
      /**
       * @description The meeting end time in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-19T02:30:00-08:00
       */
      endTime: string
      /**
       * @description Title of the event.
       * @example Example call
       */
      title?: string
      /**
       * @description A list of email addresses of invitees to the event (not including the organizer).
       * @example [
       *   {
       *     "displayName": "Cookie Monster",
       *     "email": "cookie.monster@cookies.com"
       *   }
       * ]
       */
      invitees: components['schemas']['MeetingInvitee'][]
      /**
       * @description The ID as it is formed on the external system.
       * @example 7JEHFRGXDDZFEW2FC4U
       */
      externalId?: string
      /**
       * @description The email address of the user creating the meeting, the Gong consent page link will be used according to the settings of this user.
       * @example test@test.com
       */
      organizerEmail: string
    }
    IntegrationStatusResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description The integration status for the request users */
      users?: components['schemas']['User Integration Status'][]
    }
    /** @description The integration status for the request users */
    'User Integration Status': {
      /**
       * @description The email address meeting organizer
       * @example test@test.com
       */
      email?: string
      /**
       * @description Whether the user exists in Gong
       * @example true
       */
      exists?: boolean
      /**
       * @description Whether the integration is connected for the user
       * @example false
       */
      valid?: boolean
      /**
       * @description The message explaining in case the integration is currently not connected
       * @example The Gong consent page is not enabled in your company. Contact your Gong Admin.
       */
      userFacingError?: string
      /**
       * @description A URL to place in the application to fix the problem
       * @example https://app.gong.io/company/recording-consent/consent-page
       */
      fixUrl?: string
      /**
       * @description A URL to the Gong help center where more information can be found about the error
       * @example https://help.gong.io/hc/en-us/articles/360056677792
       */
      helpUrl?: string
    }
    IntegrationStatusRequest: {
      /** @description String array of emails of users (max 100) */
      emails?: string[]
    }
    /** @description Integration settings metadata */
    IntegrationSettingsRequest: {
      /** @description Set a list of dynamic origins for a company */
      integrationTypeSettings: components['schemas']['IntegrationTypeSettings'][]
    }
    /** @description Set a list of dynamic origins for a company */
    IntegrationTypeSettings: {
      /**
       * @description The integration type in Gong
       * @enum {string}
       */
      integrationType: 'EMAIL_COMPOSER' | 'ACCOUNT_PAGES'
      /** @description A valid origin that can be used as the iFrame source. Use this to add tenant sub domains as valid for the integration. For example, if you create dynamic domains for your customers eg https://acme.partner.com */
      allowedOrigin: string
    }
    AssignedFlow: {
      /**
       * @description The Gong Engage Flow ID the prospect was assigned to.
       * @example 1695493301223590792
       */
      flowId?: string
      /**
       * @description The Gong Engage Flow name the prospect was assigned to.
       * @example SDR Flow
       */
      flowName?: string
      /**
       * @description The CRM ID of the prospect that was assigned to a Gong Engage flow.
       * @example a5V1Q00A120DP4CVAW
       */
      crmProspectId?: string
      /**
       * @description The newly created flow instance id.
       * @example 1234361284629356
       */
      flowInstanceId?: string
      /**
       * @description The email address of the Gong user who owns the flow instance tasks.
       * @example test@test.com
       */
      flowInstanceOwnerEmail?: string
      /**
       * @description The full name of the Gong user who owns the flow instance tasks.
       *
       * @example Test User
       */
      flowInstanceOwnerFullName?: string
      /**
       * @description The creation date of the flow instance in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-20T00:00:00-08:00
       */
      flowInstanceCreateDate?: string
      /**
       * @description The status of the flow instance.
       * @example Running
       * @enum {string}
       */
      flowInstanceStatus?: 'Running' | 'Pending' | 'Paused'
      /**
       * @description The workspace ID this flow belongs to.
       * @example 623457276584334
       */
      workspaceId?: string
    }
    ProspectsFlowsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description The flow instances assigned to the given prospects */
      prospectsAssigned?: components['schemas']['AssignedFlow'][]
    }
    /** @description Prospects assigned flows request */
    ProspectsAssignedFlowsRequestV2: {
      /**
       * @description The CRM IDs of the prospects to list assigned flows for
       * @example [
       *   "a5V1Q00A120DP4CVAW"
       * ]
       */
      crmProspectsIds: string[]
    }
    AssignFlowResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      prospectsAssigned?: components['schemas']['AssignedFlow'][]
      prospectsNotAssigned?: components['schemas']['AssignedFlowFailure'][]
    }
    AssignedFlowFailure: {
      /**
       * @description The flow ID to which the assignment failed
       * @example 1695493301223590792
       */
      flowId?: string
      /**
       * @description The CRM ID of the prospect that failed to get assigned to a Gong Engage flow.
       * @example a5V1Q00A120DP4CVAW
       */
      crmProspectId?: string
      /**
       * @description The code of the assignment error
       * @example InvalidArgument
       * @enum {string}
       */
      errorCode?: 'InvalidArgument' | 'InvalidState' | 'UnexpectedError'
      /**
       * @description A message describing the assignment error
       * @example Invalid crmId <not-a-crm-id>
       */
      errorMessage?: string
    }
    /** @description Flow assignment parameters. */
    AssignFlowRequestV2: {
      /**
       * @description The CRM IDs of the contact or lead that should be assigned to a Gong Engage flow
       * @example [
       *   "a5V1Q00A120DP4CVAW"
       * ]
       */
      crmProspectsIds: string[]
      /**
       * @description The Gong Engage Flow ID to assign the contact to.
       * @example 1695493301223590792
       */
      flowId: string
      /**
       * @description The email of the Gong user who will own the flow tasks.
       * @example test@test.com
       */
      flowInstanceOwnerEmail: string
    }
    EventAcceptedResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
    }
    /** @description The company the person works in. Should include at least one of the following: domain, crmAccountId, crmOpportunityId (via the companyBusinessContext object) */
    Company: {
      /** @description The company ID in the partner's source system */
      companyId?: string
      /** @description The name of the company */
      name?: string
      /** @description The domain of the person's company. Used to associate the person with the company ("acme.com"). Mandatory for anonymous person, when the name, email, phoneNumber and personBusinessContext are empty */
      domain?: string
      /** @description The company's details in an external system such as the CRM. If the domain is empty, to enable association, send the crmAccountId or crmOpportunityId */
      companyBusinessContexts?: components['schemas']['CompanyBusinessContext'][]
    }
    /** @description The company's details in an external system such as the CRM. If the domain is empty, to enable association, send the crmAccountId or crmOpportunityId */
    CompanyBusinessContext: {
      /**
       * @description The object type in the external system
       * @enum {string}
       */
      objectType: 'ACCOUNT' | 'OPPORTUNITY'
      /** @description The ID of the business context object */
      objectId: string
      /** @description The name of the external system */
      systemName?: string
    }
    /** @description The content the person looked at */
    Content: {
      /** @description A unique identifier for the content in the partner's system */
      contentId?: string
      /** @description The title of the content */
      contentTitle: string
      /** @description A list of tags defined for the content */
      contentLabel?: string[]
      /** @description The URL for the content the person looked at */
      contentUrl?: string
      /** @description The URL for additional details provided by the website or external app, such as analysis of the content viewed */
      contentAdditionalInfoUrl?: string
      numericContentDetails?: components['schemas']['NumericContentDetails']
      stepContentDetails?: components['schemas']['StepContentDetails']
      searchObjectDetails?: components['schemas']['SearchObjectDetails']
      /** @description Include additional custom data about the content */
      contentCustomFields?: components['schemas']['CustomField'][]
    }
    /** @description Include additional custom data about the event */
    CustomField: {
      /** @description The name of the custom field */
      name: string
      /** @description The value of the custom field */
      value: string
      /**
       * @description The data type of the custom field: NUMBER, STRING, DATE (ISO 8601), URL, DURATION (in Seconds). Default value: STRING
       * @enum {string}
       */
      dataType?: 'STRING' | 'NUMBER' | 'DATE' | 'URL' | 'BOOLEAN' | 'DURATION'
    }
    /** @description Digital interaction metadata */
    DigitalInteractionRequest: {
      /** @description The provider's unique identifier for the event used for deduplication */
      eventId: string
      /**
       * Format: date-time
       * @description The date and time of the event in ISO 8601 format
       */
      timestamp: string
      /** @description The type of the event, explaining the content and action performed. Values may be partner-aligned, for example, "link clicked", "page viewed" */
      eventType: string
      /** @description When integrating via IPaaS, the name of the technology partner the customer set up a Gong integration with via an IPaaS. When integrating directly with Gong: the name of the company setting up the integration with Gong */
      sourceSystemName?: string
      /** @description The identifier for the session, useful for tying related events together */
      sessionId?: string
      /**
       * @description The device used during the event
       * @enum {string}
       */
      device?: 'MOBILE' | 'PC'
      content: components['schemas']['Content']
      person: components['schemas']['Person']
      /** @description Include additional custom data about the event */
      customFields?: components['schemas']['CustomField'][]
    }
    /** @description The location of the person as identified in the partner's source system */
    Location: {
      /** @description The country of the person in ISO 3166. If not available in ISO 3166, then send as string */
      country?: string
      /** @description The state of the person in ISO 3166-2. If not available in ISO 3166-2, then send as string */
      state?: string
      /** @description The region of the person in ISO 3166-2. If not available in ISO 3166-2, then send as string */
      region?: string
      /** @description The city of the person */
      city?: string
    }
    /** @description For content where there is a numeric result, such as NPS score, or metrics such as the percentage of video watched */
    NumericContentDetails: {
      /**
       * Format: int32
       * @description The numeric value for the content
       */
      value?: number
      /**
       * Format: int32
       * @description The lowest value that can be given to the content
       */
      rangeFrom: number
      /**
       * Format: int32
       * @description The highest value that can be given to the content
       */
      rangeTo: number
      /**
       * @description The type of numeric value
       * @enum {string}
       */
      numericType?: 'PERCENTAGE' | 'NPS' | 'RATING' | 'OTHER'
    }
    /** @description The person who did the event */
    Person: {
      /** @description The name of the person */
      name?: string
      /** @description The email address of the person. Used for business context association */
      email?: string
      /** @description The phone number of the person. Used for business context association */
      phoneNumber?: string
      /** @description A unique person identifier in the partner system. Mandatory for anonymous person, when the name, email, phoneNumber and personBusinessContext are empty */
      personId?: string
      personBusinessContext?: components['schemas']['PersonBusinessContext']
      location?: components['schemas']['Location']
      company?: components['schemas']['Company']
      /** @description Include additional custom data about the person */
      personCustomFields?: components['schemas']['CustomField'][]
    }
    /** @description The person's details in an external system such as the CRM */
    PersonBusinessContext: {
      /**
       * @description The object type in the external system
       * @enum {string}
       */
      objectType: 'CONTACT' | 'LEAD'
      /** @description The ID of the object in the external system */
      objectId: string
      /** @description The name of the external system */
      systemName?: string
    }
    /** @description The objects returned when searching for different content. For example, the companies or products being compared with one another, or 2nd party intent */
    SearchObjectDetails: {
      /** @description The name of the entity the person searched for */
      name: string
      /**
       * @description The type of the entity the person searched for
       * @enum {string}
       */
      objectType: 'VENDOR' | 'PRODUCT' | 'CATEGORY'
      /** @description The domain of the entity */
      domain: string
      /** @description The ID of the entity in the partner system */
      objectId?: string
      /** @description The URL of the entity in the partner system */
      url?: string
    }
    /** @description For content where there are a number of steps to complete in the content, such as shipment tracking or course advancement */
    StepContentDetails: {
      /** @description The current step the person is in, in the process */
      value: string
      /** @description A list of all available steps in the process */
      availableSteps: string[]
    }
    GenericDealStageRequest: {
      /**
       * @description Unique name or unique identifier that identifies the stage in the CRM
       * @example discovery
       */
      internalName: string
      /**
       * @description Stage name (for display in Gong UI)
       * @example Discovery
       */
      name: string
      /**
       * @description Indicates if the stage is active in the CRM
       * @example true
       */
      isActive: boolean
      /**
       * Format: int32
       * @description The order of the stage in the sales process (starting from 1)
       * @example 1
       */
      sortOrder: number
    }
    GenericSchemaFieldRequestDeprecated: {
      /**
       * @description The unique name of the field in the CRM system
       * @example accountowner
       */
      uniqueName: string
      /**
       * @description The label to use in the UI for this field
       * @example Account Owner
       */
      label: string
      /**
       * @description The field type (case-sensitive). Must be one of the types listed above.
       * @example REFERENCE
       * @enum {string}
       */
      type:
        | 'DATE'
        | 'DATETIME'
        | 'NUMBER'
        | 'PERCENT'
        | 'CURRENCY'
        | 'ID'
        | 'URL'
        | 'STRING'
        | 'BOOLEAN'
        | 'PHONENUMBER'
        | 'EMAILADDRESS'
        | 'PICKLIST'
        | 'REFERENCE'
        | 'STRINGARRAY'
      /**
       * @description The date and time the schema was last modified. <br>Valid format: ISO-8601 format without milliseconds e.g., "2020-12-17T13:45:01Z"
       * @example 2020-12-17T13:45:01Z
       */
      lastModified?: string
      /**
       * @description When true, deletes the field from the schema and its value is removed from all objects. Use with caution
       * @example false
       */
      isDeleted?: boolean
      /**
       * @description The object type this field refers to. Required for field of type REFERENCE. Must be one of "ACCOUNT", "CONTACT", "DEAL", "LEAD" or "USER"
       * @example USER
       */
      referenceTo?: string
      /**
       * @description The list of values for the field. Required for PICKLIST fields
       * @example [
       *   "Analyst",
       *   "Competitor",
       *   "Customer",
       *   "Integrator",
       *   "Investor",
       *   "Partner",
       *   "Other"
       * ]
       */
      orderedValueList?: string[]
      /**
       * @description <b>Deprecated</b>. Please use uniqueName
       * @example accountowner
       */
      name?: string
    }
    SchemaUpdateResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
    }
    /** @description selectedFields */
    GenericSchemaFieldRequest: {
      /**
       * @description The unique name of the field in the CRM system
       * @example accountowner
       */
      uniqueName: string
      /**
       * @description The label to use in the UI for this field
       * @example Account Owner
       */
      label: string
      /**
       * @description The field type (case-sensitive). Must be one of the types listed above.
       * @example REFERENCE
       * @enum {string}
       */
      type:
        | 'DATE'
        | 'DATETIME'
        | 'NUMBER'
        | 'PERCENT'
        | 'CURRENCY'
        | 'ID'
        | 'URL'
        | 'STRING'
        | 'BOOLEAN'
        | 'PHONENUMBER'
        | 'EMAILADDRESS'
        | 'PICKLIST'
        | 'REFERENCE'
        | 'STRINGARRAY'
      /**
       * @description The date and time the schema was last modified. <br>Valid format: ISO-8601 format without milliseconds e.g., "2020-12-17T13:45:01Z"
       * @example 2020-12-17T13:45:01Z
       */
      lastModified?: string
      /**
       * @description When true, deletes the field from the schema and its value is removed from all objects. Use with caution
       * @example false
       */
      isDeleted?: boolean
      /**
       * @description The object type this field refers to. Required for field of type REFERENCE. Must be one of "ACCOUNT", "CONTACT", "DEAL", "LEAD" or "USER"
       * @example USER
       */
      referenceTo?: string
      /**
       * @description The list of values for the field. Required for PICKLIST fields
       * @example [
       *   "Analyst",
       *   "Competitor",
       *   "Customer",
       *   "Integrator",
       *   "Investor",
       *   "Partner",
       *   "Other"
       * ]
       */
      orderedValueList?: string[]
    }
    AsyncProcessingResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description The clientRequestId sent in the request - used to monitor the request process
       * @example clientRequest1
       */
      clientRequestId?: string
    }
    NewCallAddingResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description New call ID
       * @example 7782342274025937895
       */
      callId?: string
    }
    /** @description A list of the call's participants. A party must be provided for the primaryUser. */
    CallParticipant: {
      /**
       * @description The phone number of the party, if available.
       * @example +1 123-567-8989
       */
      phoneNumber?: string
      /**
       * @description The email address of the party, if available.
       * @example test@test.com
       */
      emailAddress?: string
      /**
       * @description The name of the party, if available.
       * @example Test User
       */
      name?: string
      /**
       * @description An identifier that is only required when speakersTimeline is provided.
       *  The partyId is used to recognize the speakers within the provided speakersTimeline.
       * @example 1
       */
      partyId?: string
      /**
       * Format: int32
       * @description The audio channel corresponding to the company team member (rep) used when the uploaded media file is multi-channel (stereo). The channel id is either 0 or 1 (representing left or right respectively)
       * @example 0
       */
      mediaChannelId?: number
      /** @description A list of links to external systems such as CRM, Telephony System, Case Management, etc. */
      context?: components['schemas']['PartyUploadContext'][]
      /**
       * @description The user ID of the participant within the Gong system, if the participant is a user.
       * @example 234599484848423
       */
      userId?: string
    }
    /** @description New call metadata */
    NewCallAddingRequest: {
      /**
       * @description A call's unique identifier in the PBX or the recording system. Gong uses this identifier to prevent repeated attempts to upload the same recording.
       * @example 123abc
       */
      clientUniqueId: string
      /**
       * @description The title of the call. This title is available in the Gong system for indexing and search.
       * @example Example call
       */
      title?: string
      /**
       * @description The purpose of the call. This optional field is a free text of up to 255 characters.
       * @example Demo Call
       */
      purpose?: string
      /**
       * @description The date and time the call was scheduled to begin in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
       * @example 2018-02-17T02:30:00-08:00
       */
      scheduledStart?: string
      /**
       * @description The date and time the call was scheduled to end in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
       * @example 2018-02-19T02:30:00-08:00
       */
      scheduledEnd?: string
      /**
       * @description The actual date and time when the call started in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC);
       * @example 2018-02-17T02:30:00-08:00
       */
      actualStart: string
      /**
       * Format: float
       * @description The actual call duration in seconds.
       * @example 125.8
       */
      duration?: number
      /** @description A list of the call's participants. A party must be provided for the primaryUser. */
      parties: components['schemas']['CallParticipant'][]
      /**
       * @description Whether the call is inbound (someone called the company), outbound (a rep dialed someone outside the company), or a conference call.
       * @enum {string}
       */
      direction: 'Inbound' | 'Outbound' | 'Conference' | 'Unknown'
      /**
       * @description The disposition of the call. The disposition is free text of up to 255 characters.
       * @example No Answer
       */
      disposition?: string
      /** @description A list of references to external systems such as CRM, Telephony System, Case Management, etc. */
      context?: components['schemas']['CallUploadContext'][]
      /**
       * @description Optional metadata associated with the call (represented as text). Gong stores this metadata and it can be used for troubleshooting.
       * @example Optional data
       */
      customData?: string
      speakersTimeline?: components['schemas']['SpeakersTimeline']
      /**
       * @description The URL of the conference call by which users join the meeting
       * @example https://www.conference.com/john.smith
       */
      meetingUrl?: string
      /**
       * @description The code identifies the provider conferencing or telephony system. For example: zoom, clearslide, gotomeeting, ringcentral, outreach, insidesales, etc. These values are predefined by Gong, please contact help@gong.io to find the proper value for your system.
       * @example clearslide
       */
      callProviderCode?: string
      /**
       * @description The URL from which Gong can download the media file.
       * The URL must be unique, the audio or video file must be a maximum of 1.5GB.
       * If you provide this URL, you should not perform the 'Add call media' step.
       * @example https://upload-server.com/sample-call.mp3
       */
      downloadMediaUrl?: string
      /**
       * @description Optional workspace identifier. If specified, the call will be placed into this workspace, otherwise, the default algorithm for workspace placement will be applied.
       * @example 623457276584334
       */
      workspaceId?: string
      /**
       * @description The language code the call should be transcribed to.
       * This field is optional as Gong automatically detects the language spoken in the call and transcribes it accordingly. Set this field only if you are sure of the language the call is in.
       * Valid values are: af-ZA, am-ET, ar-AE, ar-BH, ar-DZ, ar-EG, ar-IL, ar-IQ, ar-JO, ar-KW, ar-LB, ar-MA, ar-MR, ar-OM, ar-PS, ar-QA, ar-SA, ar-TN, ar-YE, az-AZ, bg-BG, bn-BD, bn-IN, bs-BA, ca-ES, cs-CZ, da-DK, de-AT, de-CH, de-DE, el-GR, en-AB, en-AU, en-CA, en-GB, en-IE, en-IN, en-NZ, en-PH, en-SG, en-US, en-WL, en-ZA, es-AR, es-BO, es-CL, es-CO, es-CR, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, et-EE, eu-ES, fa-IR, fi-FI, fil-PH, fr-BE, fr-CA, fr-CH, fr-FR, gl-ES, gu-IN, he-IL, hi-IN, hr-HR, hu-HU, hy-AM, id-ID, is-IS, it-CH, it-IT, ja-JP, jv-ID, ka-GE, kk-KZ, km-KH, kn-IN, ko-KR, lo-LA, lt-LT, lv-LV, mk-MK, ml-IN, mn-MN, mr-IN, ms-MY, my-MM, ne-NP, nl-BE, nl-NL, no-NO, pa-Guru-IN, pl-PL, pt-BR, pt-PT, ro-RO, ru-RU, si-LK, sk-SK, sl-SI, sq-AL, sr-RS, su-ID, sv-SE, sw-KE, sw-TZ, ta-IN, ta-LK, ta-MY, ta-SG, te-IN, th-TH, tr-TR, uk-UA, ur-IN, ur-PK, uz-UZ, vi-VN, yue-Hant-HK, zh-CN, zh-TW, zu-ZA
       */
      languageCode?: string
      /**
       * @description The Gong internal user ID of the team member who hosted the call.
       * @example 234599484848423
       */
      primaryUser: string
    }
    /** @description The audio recording speech segments (who spoke when). Note that speakersTimeline and mediaChannelId are mutually exclusive, when providing speakersTimeline - mediaChannelId will not be used. */
    SpeakersTimeline: {
      /**
       * @description Indicates whether the provided speech segments match the media precisely or need further refinement based on the media. "Precisely" here means that segments do not deviate from the actual speech in the media by more than 100ms.
       * @example true
       */
      precise?: boolean
      /** @description The audio recording speech segments (who spoke when). */
      speechSegments?: components['schemas']['SpeechSegment'][]
    }
    /** @description The audio recording speech segments (who spoke when). */
    SpeechSegment: {
      /**
       * Format: int32
       * @description The start time of the segment in milliseconds from the beginning of the call.
       * @example 5100
       */
      fromTime: number
      /**
       * Format: int32
       * @description The end time of the segment in milliseconds from the beginning of the call.
       * @example 24000
       */
      toTime: number
      /**
       * @description The speaking parties in the segment, each must have a correlating partyId within 'parties'. It is allowed to provide overlapping segments, i.e. you can either specify multiple speakers in a segment or send several overlapping segments each marked with one speaker.
       * @example [
       *   "1"
       * ]
       */
      partyIds: string[]
    }
    /** @description Call access details */
    CallAccessDetails: {
      /**
       * @description Gong's unique numeric call ID.
       * @example 7782342274025937895
       */
      callId?: string
      /** @description A list of users having access. */
      users?: components['schemas']['UserAccessDetails'][]
    }
    CallsAccessDetailsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item specifies a call & users with access to this call. */
      callAccessList?: components['schemas']['CallAccessDetails'][]
    }
    /** @description User access details */
    UserAccessDetails: {
      /**
       * @description Gong's unique numeric user ID.
       * @example 234599484848423
       */
      userId?: string
    }
    CallsAccessGetDto: {
      /**
       * @description Array of Gong's unique numeric call IDs.
       * @example [
       *   "7782342274025937895"
       * ]
       */
      callIds: string[]
    }
    FilterRequestCallsAccessGetDto: {
      filter: components['schemas']['CallsAccessGetDto']
    }
    /** @description A list with one entry per call. */
    CallTranscript: {
      /**
       * @description Gong's unique numeric identifier for the call (up to 20 digits).
       * @example 7782342274025937895
       */
      callId?: string
      /** @description List of monologues. */
      transcript?: components['schemas']['Monologue'][]
    }
    CallTranscripts: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list with one entry per call. */
      callTranscripts?: components['schemas']['CallTranscript'][]
    }
    /** @description List of monologues. */
    Monologue: {
      /**
       * @description Unique ID of the speaker. Cross-reference this with the 'speakerId' field of objects in the 'parties' array returned from endpoint '/v2/calls/extensive' to identify the participant.
       * @example 6432345678555530067
       */
      speakerId?: string
      /**
       * @description The name of the topic.
       * @example Objections
       */
      topic?: string
      /** @description A list of sentences spoken in the monologue. */
      sentences?: components['schemas']['Sentence'][]
    }
    /** @description A list of sentences spoken in the monologue. */
    Sentence: {
      /**
       * Format: int64
       * @description The starting time of the sentence, in milliseconds from the start of the call.
       * @example 460230
       */
      start?: number
      /**
       * Format: int64
       * @description The end time of the sentence, in milliseconds from the start of the call.
       * @example 462343
       */
      end?: number
      /**
       * @description The sentence.
       * @example No wait, I think we should check that out first.
       */
      text?: string
    }
    /** @description Filter parameters. */
    CallsFilter: {
      /**
       * @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. The date applies to call start time.
       * @example 2018-02-17T02:30:00-08:00
       */
      fromDateTime?: string
      /**
       * @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. The date applies to call start time.
       * @example 2018-02-19T02:30:00-08:00
       */
      toDateTime?: string
      /**
       * @description Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.
       * @example 623457276584334
       */
      workspaceId?: string
      /**
       * @description List of calls Ids to be filtered. If not supplied, returns all calls between fromDateTime and toDateTime.
       * @example [
       *   "7782342274025937895"
       * ]
       */
      callIds?: string[]
    }
    PublicApiBaseRequestV2CallsFilter: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['CallsFilter']
    }
    /** @description call's metadata. */
    CallBasicData: {
      /**
       * @description Gong's unique numeric identifier for the call (up to 20 digits).
       * @example 7782342274025937895
       */
      id?: string
      /**
       * @description The URL to the page in the Gong web application where the call is available.
       * @example https://app.gong.io/call?id=7782342274025937895
       */
      url?: string
      /**
       * @description The title of the call.
       * @example Example call
       */
      title?: string
      /**
       * Format: date-time
       * @description Scheduled date and time of the call in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 1518863400
       */
      scheduled?: string
      /**
       * Format: date-time
       * @description The date and time when the call was recorded in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 1518863400
       */
      started?: string
      /**
       * Format: int64
       * @description The duration of the call, in seconds.
       * @example 460
       */
      duration?: number
      /**
       * @description The primary user ID of the team member who hosted the call.
       * @example 234599484848423
       */
      primaryUserId?: string
      /**
       * @description Call direction.
       * @enum {string}
       */
      direction?: 'Inbound' | 'Outbound' | 'Conference' | 'Unknown'
      /**
       * @description The system with which the call was carried out (e.g., WebEx, ShoreTel, etc.).
       * @example Outreach
       */
      system?: string
      /**
       * @description The scope of the call: 'internal' if all the participants are from the company, 'external' if some participants are not from the company, or 'unknown' if the scope is unknown.
       * @example Internal
       * @enum {string}
       */
      scope?: 'Internal' | 'External' | 'Unknown'
      /**
       * @description Media type
       * @example Video
       * @enum {string}
       */
      media?: 'Video' | 'Audio'
      /**
       * @description The language codes (as defined by ISO-639-2B). E.g., eng, fre, spa, ger, and ita. Also used are und (unsupported language), and zxx (not enough speech content for identification).
       * @example eng
       */
      language?: string
      /**
       * @description Gong's unique numeric identifier for the call's workspace (up to 20 digits).
       * @example 623457276584334
       */
      workspaceId?: string
      /**
       * @description The SDR disposition of the call
       * @example Got the gatekeeper
       */
      sdrDisposition?: string
      /**
       * @description The call's unique identifier in the origin recording system (typically a telephony recording system). The identifier is provided to Gong during the call creation via the Public API or through telephony systems integrations.
       * @example 7JEHFRGXDDZFEW2FC4U
       */
      clientUniqueId?: string
      /**
       * @description Metadata as was provided to Gong during the call creation via the Public API.
       * @example Conference Call
       */
      customData?: string
      /**
       * @description The purpose of the call.
       * @example Demo Call
       */
      purpose?: string
      /**
       * @description The meeting provider URL on which the web conference was recorded.
       * @example https://zoom.us/j/123
       */
      meetingUrl?: string
      /**
       * @description If the call is private.
       * @example false
       */
      isPrivate?: boolean
      /**
       * @description The Id of the meeting in Google or Outlook Calendar.
       * @example abcde@google.com
       */
      calendarEventId?: string
    }
    /** @description Links to external systems such as CRM, Dialer, Case Management etc */
    CallContextDto: {
      /**
       * @description External system name. e.g. Salesforce
       * @example Salesforce
       * @enum {string}
       */
      system?: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description List of objects within the external system */
      objects?: components['schemas']['ExternalCallObject'][]
    }
    /** @description A list with one entry per call. */
    CallData: {
      metaData?: components['schemas']['CallBasicData']
      /** @description A list of the agenda of each part of the call. */
      context?: components['schemas']['CallContextDto'][]
      /** @description A list of the call's participants */
      parties?: components['schemas']['Party'][]
      content?: components['schemas']['ContentDto']
      interaction?: components['schemas']['InteractionMeasuresDto']
      collaboration?: components['schemas']['CollaborationDto']
      media?: components['schemas']['MediaDto']
    }
    CallHighlightsItem: {
      /** @description The text of the highlights section item. */
      text?: string
      /** @description List of starting times of the highlights section item, in seconds from the start of the call. */
      startTimes?: number[]
    }
    CallHighlightsSection: {
      /** @description The title of the highlights section. */
      title?: string
      /** @description List of highlight items of the call in this section. */
      items?: components['schemas']['CallHighlightsItem'][]
    }
    CallKeyPoint: {
      /** @description The text of the key point. */
      text?: string
    }
    /** @description The outcome of the call, as automatically set by Gong AI. Returned when it is available and contentSelector.exposedFields.content.callOutcome = true. */
    CallOutcome: {
      /**
       * @description The ID of the call outcome, as automatically set by Gong AI
       * @example MEETING_BOOKED
       */
      id?: string
      /**
       * @description The category of the call outcome, as automatically set by Gong AI
       * @example Answered
       */
      category?: string
      /**
       * @description The name of the call outcome, as automatically set by Gong AI
       * @example Meeting booked
       */
      name?: string
    }
    CallOutlineItem: {
      /** @description The text of this section item. */
      text?: string
      /**
       * Format: double
       * @description The starting time of this section item, in seconds from the start of the call.
       */
      startTime?: number
    }
    CallOutlineSection: {
      /** @description The name of this section of the call. */
      section?: string
      /**
       * Format: double
       * @description The starting time of this section, in seconds, from the start of the call.
       */
      startTime?: number
      /**
       * Format: double
       * @description The duration of this section, in seconds.
       */
      duration?: number
      /** @description List of items of this section. */
      items?: components['schemas']['CallOutlineItem'][]
    }
    Calls: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list with one entry per call. */
      calls?: components['schemas']['CallData'][]
    }
    /** @description Collaboration information added to the call */
    CollaborationDto: {
      /** @description A list of public comments. */
      publicComments?: components['schemas']['CommentDto'][]
    }
    CommentDto: {
      /**
       * @description Unique identifier of the comment within the Gong's system.
       * @example 6843152929075440037
       */
      id?: string
      /**
       * Format: float
       * @description The number of seconds from the beginning of the call that the comment start refers to.
       * @example 26
       */
      audioStartTime?: number
      /**
       * Format: float
       * @description The number of seconds from the beginning of the call that the comment ends refers to.
       * @example 26
       */
      audioEndTime?: number
      /**
       * @description Unique identifier of the user who wrote the comment.
       * @example 234599484848423
       */
      commenterUserId?: string
      /**
       * @description The comment itself. The comment may contains person tagging in this format @[user name](user Id)
       * @example new comment
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); in which the comment was posted.
       * @example 1518863400
       */
      posted?: string
      /**
       * @description The unique identifier of the original comment in case the current comment is a reply to the original one.
       * @example 792390015966656336
       */
      inReplyTo?: string
      /** @description True if the comment was written during the call, false if it was posted after the call. */
      duringCall?: boolean
    }
    /** @description Analysis of the interaction content. */
    ContentDto: {
      /** @description A list of the agenda of each part of the call. */
      structure?: components['schemas']['StructureDto'][]
      trackers?: components['schemas']['TrackerDto'][]
      topics?: components['schemas']['TopicDto'][]
      pointsOfInterest?: components['schemas']['PointsOfInterest']
      /** @description The brief of the call. Returned when it is available and contentSelector.exposedFields.content.brief = true. */
      brief?: string
      /** @description Outline of the call, divided into sections. Returned when it is available and contentSelector.exposedFields.content.outline = true. */
      outline?: components['schemas']['CallOutlineSection'][]
      /** @description List of highlights of the call. Returned when it is available and contentSelector.exposedFields.content.highlights = true. */
      highlights?: components['schemas']['CallHighlightsSection'][]
      callOutcome?: components['schemas']['CallOutcome']
      /** @description List of key points of the call. Returned when it is available and contentSelector.exposedFields.content.keyPoints = true. */
      keyPoints?: components['schemas']['CallKeyPoint'][]
    }
    /** @description External Object */
    ExternalCallObject: {
      /**
       * @description Object Type. e.g Opportunity.
       * @example Opportunity
       * @enum {string}
       */
      objectType?: 'Opportunity' | 'Account'
      /**
       * @description Object ID
       * @example 0013601230sV7grAAC
       */
      objectId?: string
      fields?: components['schemas']['ContextField'][]
      /**
       * @description Timing of object
       * @enum {string}
       */
      timing?: 'Now' | 'TimeOfCall'
    }
    /** @description External Object */
    ExternalPartyObject: {
      /**
       * @description Object Type. e.g. Lead
       * @example Contact
       * @enum {string}
       */
      objectType?: 'Contact' | 'User' | 'Lead'
      /**
       * @description Object ID
       * @example 0013601230sV7grAAC
       */
      objectId?: string
      /** @description Object fields */
      fields?: components['schemas']['PartyContextField'][]
      /**
       * @description Timing of object
       * @enum {string}
       */
      timing?: 'Now' | 'TimeOfCall'
    }
    /** @description Metrics collected around the interaction during the call. */
    InteractionMeasuresDto: {
      /** @description A list of the talk duration per speaker. */
      speakers?: components['schemas']['UserSpeaker'][]
      /** @description A list of interaction statistics. Applicable values: 'Talk Ratio', 'Longest Monologue', 'Longest Customer Story', 'Interactivity', 'Patience'. */
      interactionStats?: components['schemas']['InteractionStatsDto'][]
      /** @description A list of video statistics about what's presented and for how long. */
      video?: components['schemas']['VideoInteractionDto'][]
      questions?: components['schemas']['Questions']
    }
    /** @description Interaction statistics */
    InteractionStatsDto: {
      /**
       * @description Stat name
       * @example Interactivity
       */
      name?: string
      /**
       * @description Stat measurement
       * @example 56
       */
      value?: number
    }
    /** @description The media urls of the call. */
    MediaDto: {
      /**
       * Format: url
       * @description If true and exist, add audio url of the call. The url will be available for 8 hours.
       */
      audioUrl?: string
      /**
       * Format: url
       * @description If true and exist, add video url of the call. The url will be available for 8 hours.
       */
      videoUrl?: string
    }
    Party: {
      /**
       * @description Unique ID of the participant in the call.
       * @example 56825452554556
       */
      id?: string
      /**
       * @description Email address.
       * @example test@test.com
       */
      emailAddress?: string
      /**
       * @description The name of the participant.
       * @example Test User
       */
      name?: string
      /**
       * @description The job title of the participant
       * @example Enterprise Account Executive
       */
      title?: string
      /**
       * @description The user ID of the participant within the Gong system, if the participant exists in the system.
       * @example 234599484848423
       */
      userId?: string
      /**
       * @description Unique ID of a participant that spoke in the call. References to this id will appear in the '/v2/calls/transcript' endpoint response.
       * @example 6432345678555530067
       */
      speakerId?: string
      /** @description A list of links to external systems such as CRM, Dialer, Case Management, etc. */
      context?: components['schemas']['PartyContextDto'][]
      /**
       * @description Whether the participant is from the company or not.
       * @enum {string}
       */
      affiliation?: 'Internal' | 'External' | 'Unknown'
      /**
       * @description The phone number of the participant.
       * @example +1 123-567-8989
       */
      phoneNumber?: string
      /** @description Whether the participant was invited to the meeting or only attended the call. */
      methods?: ('Invitee' | 'Attendee')[]
    }
    /** @description Links to external systems such as CRM, Dialer, Case Management etc */
    PartyContextDto: {
      /**
       * @description External system name. e.g. Salesforce
       * @example Salesforce
       * @enum {string}
       */
      system?: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description  List of objects within the external system */
      objects?: components['schemas']['ExternalPartyObject'][]
    }
    /** @description External object data */
    PartyContextField: {
      /**
       * @description Field name. All custom fields are supported.
       * @example name
       */
      name?: string
      /**
       * @description Object value
       * @example Gong Inc.
       */
      value?: Record<string, never>
    }
    PointOfInterest: {
      /**
       * Format: double
       * @description The number of seconds from the beginning of the call that the snippet start refers to.
       * @example 26
       */
      snippetStartTime?: number
      /**
       * Format: double
       * @description The number of seconds from the beginning of the call that the snippet end refers to.
       * @example 26
       */
      snippetEndTime?: number
      /**
       * @description Unique ID of the participant in the call.
       * @example 56825452554556
       */
      speakerID?: string
      /**
       * @description The snippet including the action.
       * @example And I'll send you an invite with a link that you can use at that time as well.
       */
      snippet?: string
    }
    /** @description Points of interest of the call. */
    PointsOfInterest: {
      actionItems?: components['schemas']['PointOfInterest'][]
    }
    /** @description Question counts of the call. */
    Questions: {
      /**
       * Format: int32
       * @description The number of questions asked by company speakers.
       */
      companyCount?: number
      /**
       * Format: int32
       * @description The number of questions asked by non-company speakers.
       */
      nonCompanyCount?: number
    }
    /** @description Agenda of the current part of the call */
    StructureDto: {
      /**
       * @description The agenda name
       * @example Meeting Setup
       */
      name?: string
      /**
       * Format: int64
       * @description The duration of this part of the call
       * @example 67
       */
      duration?: number
    }
    TopicDto: {
      /**
       * @description The name of the topic (e.g., Pricing).
       * @example Objections
       */
      name?: string
      /**
       * Format: int32
       * @description The total time, in seconds, spent on this topic within the call.
       * @example 86
       */
      duration?: number
    }
    TrackerDto: {
      /**
       * @description The unique ID of the Tracker.
       * @example 56825452554556
       */
      id?: string
      /**
       * @description The name of the Tracker (e.g., Stores).
       * @example Competitors
       */
      name?: string
      /**
       * Format: int32
       * @description The number of times words in this Tracker occurred in the call.
       * @example 7
       */
      count?: number
      /**
       * @description The type of the tracker - Keyword or Smart.
       * @example KEYWORD
       * @enum {string}
       */
      type?: 'KEYWORD' | 'SMART'
      /** @description Details when the smart or keyword tracker term came up in the call. The list does not specify each phrase defined in the tracker, rather it lists when any term relevant to the tracker was mentioned. Empty when keyword trackers are set to display each term in the tracker separately. */
      occurrences?: components['schemas']['occurrences'][]
      /** @description Details when each specific phrase defined in the keyword tracker came up in the call. Smart trackers are not listed. */
      phrases?: components['schemas']['trackerPhrases'][]
    }
    /** @description Talking duration */
    UserSpeaker: {
      /**
       * @description Unique ID of the participant in the call.
       * @example 56825452554556
       */
      id?: string
      /**
       * @description User Id within the Gong system
       * @example 234599484848423
       */
      userId?: string
      /**
       * Format: double
       * @description Talk duration in seconds
       * @example 145
       */
      talkTime?: number
    }
    /** @description Video statistics */
    VideoInteractionDto: {
      /**
       * @description Video segment type. Can have the values: 'Browser', 'Presentation', 'WebcamPrimaryUser', 'WebcamNonCompany', and 'Webcam'.
       *
       * <b>'Browser'</b>: When the video segment shows a web browser.
       *
       * <b>'Presentation'</b>: When the video segment shows a presentation (such as PowerPoint).
       *
       * <b>'WebcamPrimaryUser'</b>: When the video segment shows the webcam of the primary user.
       *
       * <b>'WebcamNonCompany'</b>: When the video segment shows webcam speakers that gong has identified as being non-company.
       *
       * <b>'Webcam'</b>: When the video segment shows any webcam.
       * @example Browser
       */
      name?: string
      /**
       * Format: float
       * @description Total video segments duration in seconds.
       * @example 218
       */
      duration?: number
    }
    occurrences: {
      /**
       * Format: double
       * @description The number of seconds from the beginning of the call when the tracker phrase was captured.
       * @example 32.56
       */
      startTime?: number
      /**
       * @description Unique ID of the speaker in the call who said the tracker term. Same as the speakerID in the "parties" field and in the transcript.
       * @example 234599484848423
       */
      speakerId?: string
    }
    trackerPhrases: {
      /**
       * Format: int32
       * @description The number of times this phrase was mentioned in the call.
       * @example 5
       */
      count?: number
      /** @description Lists when each keyword tracker phrase was mentioned in the call. */
      occurrences?: components['schemas']['occurrences'][]
      /**
       * @description The specific phrase within the tracker (e.g., Walmart).
       * @example Walmart
       */
      phrase?: string
    }
    /** @description Call collaboration */
    CallCollaboration: {
      /**
       * @description If true, add public comments made for this call
       * @example true
       */
      publicComments?: boolean
    }
    /** @description The content of the call */
    CallContent: {
      /**
       * @description If true, add call agenda, if available
       * @example false
       */
      structure?: boolean
      /**
       * @description If true, add duration of call topics
       * @example false
       */
      topics?: boolean
      /**
       * @description If true, returns smart tracker and keyword tracker information for the call.
       * @example false
       */
      trackers?: boolean
      /**
       * @description If true, the API will return the timing and speaker ID of each occurrence of a tracker (in addition to other tracker data). This functionality must be used in combination with the "trackers" field. The occurrence data is available only for the calls recorded since Jan 1, 2023, contact Gong support if a backfill of this data is required.
       * @example false
       */
      trackerOccurrences?: boolean
      /**
       * @description If true, add call points of interest
       * @example false
       */
      pointsOfInterest?: boolean
      /**
       * @description When true, returns the spotlight call brief.
       * @example true
       */
      brief?: boolean
      /**
       * @description When true, returns the call outline.
       * @example true
       */
      outline?: boolean
      /**
       * @description When true, returns the call highlights.
       * @example true
       */
      highlights?: boolean
      /**
       * @description When true, returns the outcome of the call.
       * @example true
       */
      callOutcome?: boolean
      /**
       * @description When true, returns the key points of the call.
       * @example true
       */
      keyPoints?: boolean
    }
    /** @description The interaction data of the call */
    CallInteraction: {
      /**
       * @description If true, add the time each participant spoke.
       * @example true
       */
      speakers?: boolean
      /**
       * @description If true, add video statistics
       * @example true
       */
      video?: boolean
      /**
       * @description If true, add statistics for the host of the call.
       * @example true
       */
      personInteractionStats?: boolean
      /**
       * @description If true, add question counts
       * @example true
       */
      questions?: boolean
    }
    /** @description Filter parameters. */
    CallsRequestFilterWithOwners: {
      /**
       * @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. The date applies to call start time.
       * @example 2018-02-17T02:30:00-08:00
       */
      fromDateTime?: string
      /**
       * @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. The date applies to call start time.
       * @example 2018-02-19T02:30:00-08:00
       */
      toDateTime?: string
      /**
       * @description Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace.
       * @example 623457276584334
       */
      workspaceId?: string
      /**
       * @description List of calls Ids to be filtered. If not supplied, returns all calls between fromDateTime and toDateTime.
       * @example [
       *   "7782342274025937895"
       * ]
       */
      callIds?: string[]
      /**
       * @description An optional list of user identifiers, if supplied the API will return only the calls hosted by the specified users. The identifiers in this field match the primaryUserId field of the calls.
       * @example [
       *   "7782342274025937895"
       * ]
       */
      primaryUserIds?: string[]
    }
    /** @description The content selector identifies which data components, if any, are needed, by the caller */
    ContentSelector: {
      /**
       * @description If 'Basic', add links to external systems (context objects) such as CRM, Telephony System, Case Management. If 'Extended' include also data (context fields) for these links. Default value 'None'
       * @enum {string}
       */
      context?: 'None' | 'Basic' | 'Extended'
      /** @description Timing for the context data. The field is optional and can contain either "Now" or "TimeOfCall" or both. The default value is ["Now"]. Can be provided only when the context field is set to 'Extended' */
      contextTiming?: ('Now' | 'TimeOfCall')[]
      exposedFields?: components['schemas']['ExposedFields']
    }
    /** @description The exposed fields identifies which field, if any, are returned in the response object */
    ExposedFields: {
      /**
       * @description If true, add information about the parties of the call
       * @example true
       */
      parties?: boolean
      content?: components['schemas']['CallContent']
      interaction?: components['schemas']['CallInteraction']
      collaboration?: components['schemas']['CallCollaboration']
      /**
       * @description If true and exist, add audio url and video url of the call. The urls will be available for 8 hours.
       * @example true
       */
      media?: boolean
    }
    PublicApiBaseRequestWithDataV2CallsRequestFilterWithOwnersContentSelector: {
      /**
       * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
       * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
       */
      cursor?: string
      filter: components['schemas']['CallsRequestFilterWithOwners']
      contentSelector?: components['schemas']['ContentSelector']
    }
    /** @description A list, in which each item provides a workspace metadata. */
    WorkspaceMetadata: {
      /**
       * @description Gong's unique numeric identifier for the workspace (up to 20 digits).
       * @example 623457276584334
       */
      id?: string
      /**
       * @description The name of the workspace.
       * @example Some Workspace
       */
      name?: string
      /**
       * @description The description of the workspace.
       * @example This is one of our workspaces
       */
      description?: string
    }
    WorkspacesMetadata: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item provides a workspace metadata. */
      workspaces?: components['schemas']['WorkspaceMetadata'][]
    }
    User: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      user?: components['schemas']['UserMetadata']
    }
    SettingsHistory: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description User's settings history. */
      userSettingsHistory?: components['schemas']['UserSettingsHistory'][]
    }
    /** @description User's settings history. */
    UserSettingsHistory: {
      /**
       * @description The user capability that was changed
       * @enum {string}
       */
      setting?:
        | 'webConferencesRecorded'
        | 'preventWebConferenceRecording'
        | 'emailsImported'
        | 'preventEmailImport'
        | 'active'
        | 'nonRecordedMeetingsImported'
        | 'gongConnectEnabled'
        | 'callsImported'
        | 'interviewsRecorded'
        | 'preventInterviewRecording'
      /**
       * @description The new value that was set
       * @example true
       */
      value?: boolean
      /**
       * @description The date and time the action was set, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-19T02:30:00-08:00
       */
      time?: string
    }
    /** @description The definition of a tracker. */
    KeywordTracker: {
      /**
       * @description The unique identifier of the tracker.
       * @example 6840000929075400007
       */
      trackerId?: string
      /**
       * @description The name of the tracker.
       * @example Competitors
       */
      trackerName?: string
      /**
       * @description The id of the workspace the tracker is in.
       * @example 623457276584334
       */
      workspaceId?: string
      /** @description The words and phrases defined for the tracker. Each languagueKeywords object contains the words and phrases defined in the specified language. */
      languageKeywords?: components['schemas']['TrackerLanguageKeyword'][]
      /**
       * @description Sets whether to track the keywords when said by people affiliated to a specific company. Options are: "Anyone", "Company", "NonCompany".
       * @example NonCompany
       */
      affiliation?: string
      /**
       * @description When true, only looks for the keywords when they are part of a question.
       * @example false
       */
      partOfQuestion?: boolean
      /**
       * @description Sets whether the words and phrases are tracked at the beginning, end or anytime in a call. Options are: "Anytime", "First", or "Last". For “First” and “Last” see the saidAtInterval and saidAtUnit fields to see how long to track the keywords for.
       * @example Anytime
       */
      saidAt?: string
      /**
       * Format: int32
       * @description Sets the period of time to check if the words or phrases came up in the call (according to the saidAt setting). This can be either minutes or percent depending on the value in the saidAtUnit parameter.
       */
      saidAtInterval?: number
      /**
       * @description Sets whether the time to look for keywords is in minutes or a percentage of the call duration (according to the saidAt setting).
       * @example minutes
       */
      saidAtUnit?: string
      /** @description Sets the topics in the call the tracker terms should be picked up in. */
      saidInTopics?: string[]
      /** @description Sets the parts of the call to look for the keyword trackers in. */
      saidInCallParts?: string[]
      /**
       * @description A filter that defines which calls to include when searching for the keyword tracker. The filter is in JSON and is in the URL of the search page. Example: a filter for all outbound calls { "type": "And", "filters": [ { "type": "CallDirection", "terms": ["OUTBOUND"] } ] }
       * @example {"type":"And","filters":[{"type":"CallDirection","terms":["OUTBOUND"]}]}
       */
      filterQuery?: string
      /**
       * @description Sets the date and time the tracker was created, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2018-02-17T02:30:00-08:00
       */
      created?: string
      /**
       * @description The Id of the team member who created the tracker. Null when the tracker is built-in.
       * @example 234599484848423
       */
      creatorUserId?: string
      /**
       * @description The date and time the tracker settings were last updated, in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2018-02-17T02:30:00-08:00
       */
      updated?: string
      /**
       * @description The Id of the team member who updated the tracker. Null when the tracker is built-in.
       * @example 234599484848423
       */
      updaterUserId?: string
    }
    /** @description The tracker keywords definition. */
    TrackerLanguageKeyword: {
      /**
       * @description The ISO 639-2/B language code for the language the keywords are in. When set to "mul" (ISO 639-2/B code for multiple languages), the keywords are relevant for all languages.
       * @example ukr
       */
      language?: string
      /** @description A list of words and phrases in the specified language. */
      keywords?: string[]
      /**
       * @description When true the tracker identifies words in different forms, for example, if the keyword is "organize", "organized" and "organizes" are also included.
       * @example false
       */
      includeRelatedForms?: boolean
    }
    Trackers: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list of keyword trackers. */
      keywordTrackers?: components['schemas']['KeywordTracker'][]
    }
    /** @description The questions in the scorecard. */
    Question: {
      /**
       * Format: int64
       * @description The identifier for the question.
       */
      questionId?: number
      /**
       * Format: int64
       * @description The identifier for the revision version of the question.
       * @example 43955224753211110
       */
      questionRevisionId?: number
      /**
       * @description The question's text.
       * @example How do you evaluate the SDR's overall performance in the call?
       */
      questionText?: string
      /**
       * @description If the question is the main overall question.
       * @example false
       */
      isOverall?: boolean
      /**
       * Format: int64
       * @description The user Id of the team member that updated the question.
       * @example 234599484848423
       */
      updaterUserId?: number
      /**
       * Format: date-time
       * @description The date and time when the question was created in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1518863400
       */
      created?: string
      /**
       * Format: date-time
       * @description The date and time when the question was updated in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1519036200
       */
      updated?: string
    }
    /** @description A list, in which each item contains one scorecard. */
    Scorecard: {
      /**
       * Format: int64
       * @description The identifier of the scorecard.
       * @example 6843152929075440000
       */
      scorecardId?: number
      /**
       * @description Scorecard name.
       * @example SDR Call Scorecard
       */
      scorecardName?: string
      /**
       * Format: int64
       * @description Scorecard workspaceId.
       * @example 623457276584334
       */
      workspaceId?: number
      /**
       * @description If the scorecard is enabled or not.
       * @example true
       */
      enabled?: boolean
      /**
       * Format: int64
       * @description The user Id of the team member that updated the scorecard.
       * @example 234599484848423
       */
      updaterUserId?: number
      /**
       * Format: date-time
       * @description The date and time when the scorecard was created in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1518863400
       */
      created?: string
      /**
       * Format: date-time
       * @description The date and time when the scorecard was updated in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1519036200
       */
      updated?: string
      /** @description The questions in the scorecard. */
      questions?: components['schemas']['Question'][]
    }
    Scorecards: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item contains one scorecard. */
      scorecards?: components['schemas']['Scorecard'][]
    }
    PermissionProfileUsersResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item specifies a user attached to the permission profile. */
      users?: components['schemas']['UserSimpleMetadata'][]
    }
    /** @description A list, in which each item specifies a user attached to the permission profile. */
    UserSimpleMetadata: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits).
       * @example 234599484848423
       */
      id?: string
      /**
       * @description The full name of the Gong user.
       * @example Jon
       */
      fullName?: string
      /**
       * @description The email address of the Gong user.
       * @example test@test.com
       */
      emailAddress?: string
    }
    LogsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one log. */
      logEntries?: components['schemas']['logEntry'][]
    }
    /** @description A list, in which each item specifies one log. */
    logEntry: {
      /**
       * @description Gong's unique numeric identifier for the user (up to 20 digits), if available.
       * @example 234599484848423
       */
      userId?: string
      /**
       * @description The email address of the user, if available.
       * @example test@test.com
       */
      userEmailAddress?: string
      /**
       * @description The full name of the user, if available.
       * @example Jon Snow
       */
      userFullName?: string
      /**
       * @description Gong's unique numeric identifier for the impersonating user (up to 20 digits), if available.
       * @example 234599484848423
       */
      impersonatorUserId?: string
      /**
       * @description The email address of the impersonating user, if available.
       * @example test@test.com
       */
      impersonatorEmailAddress?: string
      /**
       * @description The full name of the impersonating user, if available.
       * @example Jon Snow
       */
      impersonatorFullName?: string
      /**
       * @description Gong's unique numeric identifier for the impersonating user's company id (up to 20 digits), if available.
       * @example 234599484848423
       */
      impersonatorCompanyId?: string
      /**
       * @description The time in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); when log was created.
       * @example 2018-02-17T02:30:00-08:00
       */
      eventTime?: string
      /** @description The list of log fields and associated values. This element will be populated dynamically by the log record, depending on the type of log. */
      logRecord?: {
        [key: string]: Record<string, never>
      }
    }
    /** @description Basic details such as sub-folders, title, etc. */
    LibraryFolder: {
      /**
       * @description Gong's unique numeric identifier for a library's folder (up to 20 digits).
       * @example 3843152912968920037
       */
      id?: string
      /**
       * @description Display name of the folder.
       * @example Sales Onboarding
       */
      name?: string
      /**
       * @description Gong's unique numeric identifier for library's parent folder (null for root folder).
       * @example 295738305212375930
       */
      parentFolderId?: string
      /**
       * @description Gong's unique numeric identifier for the user who added the folder.
       * @example 234599484848423
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description Folder's last update time in the ISO-8601 format (e.g., '2020-03-14T05:30:00-08:00').
       * @example 1584192600
       */
      updated?: string
    }
    LibraryResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item specifies one folder. */
      folders?: components['schemas']['LibraryFolder'][]
    }
    /** @description Basic details such as id, title, notes, etc. */
    LibraryCall: {
      /**
       * @description Gong's unique numeric identifier of a call (up to 20 digits).
       * @example 7782342274025937895
       */
      id?: string
      /**
       * @description The title of the call.
       * @example Example call
       */
      title?: string
      /**
       * @description A note attached to the call in the folder. The note is optional.
       * @example sample note
       */
      note?: string
      /**
       * @description Gong's unique numeric identifier for the user who added the call to folder.
       * @example 234599484848423
       */
      addedBy?: string
      /**
       * Format: date-time
       * @description The date and time when the call was added to folder in the ISO-8601 format (e.g., '2020-01-12T14:30:00-08:00').
       * @example 1578868200
       */
      created?: string
      /**
       * @description URL of the call.
       * @example https://app.gong.io/call?id=3636865806219496180&highlights=%5B%7B%22to%22%3A+3240%2C+%22from%22%3A+1200%2C+%22type%22%3A+%22LIBRARY%22%7D%5D
       */
      url?: string
      snippet?: components['schemas']['Snippet']
    }
    LibraryFolderListOfCallsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description Gong's unique numeric identifier for a library's folder (up to 20 digits).
       * @example 3843152912968920037
       */
      id?: string
      /**
       * @description Display name of the folder.
       * @example Sales Onboarding
       */
      name?: string
      /**
       * @description Gong's unique numeric identifier for the user who added the folder.
       * @example 234599484848423
       */
      createdBy?: string
      /**
       * Format: date-time
       * @description Folder's last update time in the ISO-8601 format (e.g., '2020-03-14T05:30:00-08:00').
       * @example 1584192600
       */
      updated?: string
      /** @description A list, in which each item represents one library call. */
      calls?: components['schemas']['LibraryCall'][]
    }
    /** @description Snippet of call */
    Snippet: {
      /**
       * Format: int32
       * @description Call snippet start in seconds relative to the call start time. For example 305 is a snippet that starts after 5 minutes and 5 seconds after the beginning of the call.
       * @example 21
       */
      fromSec?: number
      /**
       * Format: int32
       * @description Call snippet end in seconds relative to the call start time. For example 900 means that this snippet ends after exactly 15 minutes after the beginning of the call.
       * @example 132
       */
      toSec?: number
    }
    /** @description A list, in which each item specifies one Flow. */
    Flow: {
      /**
       * @description The id of the flow
       * @example 1695493301223590792
       */
      id?: string
      /**
       * @description The name of the flow
       * @example Personal Flow
       */
      name?: string
      /**
       * @description The id of the folder this flow is under
       * @example 1695493301223573465
       */
      folderId?: string
      /**
       * @description The name of the folder this flow is under
       * @example 1695493301223573465
       */
      folderName?: string
      /**
       * @description The flow visibility type
       * @enum {string}
       */
      visibility?: 'Company' | 'Personal'
      /**
       * @description Creation time of the flow in ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC).
       * @example 2018-02-17T02:30:00-08:00
       */
      creationDate?: string
    }
    FlowsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one Flow. */
      flows?: components['schemas']['Flow'][]
    }
    /** @description Details of a call referencing the email address. */
    CallReference: {
      /**
       * @description Gong's unique numeric identifier for the call (up to 20 digits).
       * @example 7782342274025937895
       */
      id?: string
      /**
       * @description Call status
       * @example COMPLETED
       */
      status?: string
      /** @description A list of links to external systems such as CRM, Telephony System, Case Management, etc. */
      externalSystems?: components['schemas']['ExternalSystem'][]
    }
    /** @description A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores. */
    CustomerData: {
      /**
       * @description External system name.
       * @example Salesforce
       * @enum {string}
       */
      system?: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description List of objects in the external system. */
      objects?: components['schemas']['CustomerDataObject'][]
    }
    /** @description List of objects in the external system. */
    CustomerDataObject: {
      /**
       * @description Gong's unique numeric identifier (up to 20 digits) for the Lead or Contact.
       * @example 7782342274025937895
       */
      id?: string
      /**
       * @description Object Type.
       * @example Contact
       * @enum {string}
       */
      objectType?: 'Lead' | 'Contact'
      /**
       * @description External ID.
       * @example 0013601230sV7grAAC
       */
      externalId?: string
      /**
       * @description Crm Mirror ID.
       * @example "{\"integrationId\":\"262834820328732\",\"crmObjectType\":\"CONTACT\",\"crmId\":\"0031Q00002DFhi4QAD\"}"
       */
      mirrorId?: string
      /** @description Object fields. */
      fields?: components['schemas']['ContextField'][]
    }
    /** @description Related email messages. */
    EmailMessage: {
      /**
       * @description The sender's email address.
       * @example test@test.com
       */
      from?: string
      /**
       * @description Gong's unique 32 character identifier for the email message.
       * @example 223mjfaaqqjuegabiyrmpctvcwwl75oz
       */
      id?: string
      /**
       * @description The date and time the email message was sent in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 2019-01-20T00:00:00-08:00
       */
      sentTime?: string
      /**
       * @description The mailbox from which the email was retrieved.
       * @example test@test.com
       */
      mailbox?: string
      /**
       * @description Hash code of the email message.
       * @example l3z7w2s7oircdabnkwizmycm6g2uwznc
       */
      messageHash?: string
    }
    /** @description A list of links to external systems such as CRM, Telephony System, Case Management, etc. */
    ExternalSystem: {
      /**
       * @description External system name.
       * @example Salesforce
       * @enum {string}
       */
      system?: 'Salesforce' | 'HubSpot' | 'MicrosoftDynamic' | 'Generic'
      /** @description List of objects within the external system. */
      objects?: components['schemas']['ExternalSystemObject'][]
    }
    /** @description List of objects within the external system. */
    ExternalSystemObject: {
      /**
       * @description Object Type.
       * @example Task
       * @enum {string}
       */
      objectType?: 'Conversation' | 'Task'
      /**
       * @description External ID.
       * @example 0013601230sV7grAAC
       */
      externalId?: string
    }
    /** @description Related meetings. */
    Meeting: {
      /**
       * @description Gong's unique identifier for the meeting.
       * @example 8059707022269524529.sb5gr1tgpt5dd799eh035rb3dk@google.com_2022-06-30T13:00:00Z
       */
      id?: string
    }
    PhoneNumberReferences: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description Related email messages. */
      emails?: components['schemas']['EmailMessage'][]
      /** @description Related calls. */
      calls?: components['schemas']['CallReference'][]
      /** @description Related meetings. */
      meetings?: components['schemas']['Meeting'][]
      /** @description A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores. */
      customerData?: components['schemas']['CustomerData'][]
      /** @description The supplied phone number. */
      suppliedPhoneNumber?: string
      /** @description Matching phone numbers found. */
      matchingPhoneNumbers?: string[]
      /** @description Related email addresses. */
      emailAddresses?: string[]
    }
    /** @description A list of customer's engagement (such as viewing external share call) */
    CustomerEngagement: {
      /**
       * @description Event type
       * @example ExternalCallViewing
       * @enum {string}
       */
      eventType?:
        | 'contentShared'
        | 'contentViewed'
        | 'customEvent'
        | 'digitalInteraction'
      /**
       * Format: date-time
       * @description The date and time the event occurred in the ISO-8601 format, for example: '2024-01-17T16:20:05-03:00' or '2016-02-16T03:57:04.834+05:30' or '2020-11-20T21:30:07.233692Z', where Z stands for UTC.
       * @example 1547971200
       */
      timestamp?: string
      /**
       * @description Event content id
       * @example 7782342274025937895
       */
      contentId?: string
      /**
       * @description Event content url
       * @example https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i
       */
      contentUrl?: string
      /**
       * @description Event reporting system
       * @example https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i
       */
      reportingSystem?: string
      /**
       * @description Event name
       * @example https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i
       */
      eventName?: string
      /**
       * @description Source event Id
       * @example https://app.gong.io/e/c-share/tkn=5vjaxkqnzmp515b220vlzto2i
       */
      sourceEventId?: string
    }
    EmailAddressReferences: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description Related email messages. */
      emails?: components['schemas']['EmailMessage'][]
      /** @description Related calls. */
      calls?: components['schemas']['CallReference'][]
      /** @description Related meetings. */
      meetings?: components['schemas']['Meeting'][]
      /** @description A list of links to data from external systems (such as CRM, Telephony System, Case Management, etc.) that reference the email address and that Gong stores. */
      customerData?: components['schemas']['CustomerData'][]
      /** @description A list of customer's engagement (such as viewing external share call) */
      customerEngagement?: components['schemas']['CustomerEngagement'][]
    }
    LineErrorResponse: {
      /**
       * Format: int32
       * @description Line number of failed object
       * @example 49
       */
      line?: number
      /**
       * @description Error description
       * @example Mandatory field [objectId] is missing or empty
       */
      description?: string
    }
    RequestStatusResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /**
       * @description Request status
       * @example FAILED
       * @enum {string}
       */
      status?: 'PENDING' | 'IN_PROGRESS' | 'DONE' | 'FAILED'
      errors?: components['schemas']['LineErrorResponse'][]
      /**
       * Format: int32
       * @description Number of objects that failed parsing
       * @example 3
       */
      totalErrorCount?: number
      /**
       * Format: int32
       * @description Number of valid objects
       * @example 97
       */
      totalSuccessCount?: number
    }
    /** @description A list of integration objects */
    GenericCrmIntegration: {
      /**
       * Format: int64
       * @description The ID of the integration.<br><b>Note:</b> Parse the integrationId as Long or BigInt. Parsing the integrationId as an Integer truncates the integrationId to trailing zeros and returns an incorrect ID.
       * @example 5517027188234206000
       */
      integrationId?: number
      /**
       * @description Email address of the person responsible for the integration
       * @example joe.doe@acme.com
       */
      ownerEmail?: string
      /**
       * @description The name of the integration
       * @example ACME Sandbox
       */
      name?: string
    }
    ListGenericCrmIntegrationsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list of integration objects */
      integrations?: components['schemas']['GenericCrmIntegration'][]
    }
    ListSelectedFieldsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description selectedFields */
      objectTypeToSelectedFields?: {
        [key: string]: components['schemas']['GenericSchemaFieldRequest'][]
      }
    }
    GetGenericCrmObjectsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description crmObjects */
      crmObjectsMap?: {
        [key: string]: {
          [key: string]: Record<string, never>
        }
      }
    }
    CallsResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one call. */
      calls?: components['schemas']['CallBasicData'][]
    }
    SpecificCall: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      call?: components['schemas']['CallBasicData']
    }
    /** @description List of all association objects. */
    AssociationObject: {
      /**
       * @description CRM account Id.
       * @example a5V1Q00A120DP4CVAW
       */
      accountCrmId?: string
      /**
       * @description CRM deal Id, if deal/opportunity was associated.
       * @example 0052Q00000qkGmgQBT
       */
      dealCrmId?: string
    }
    ManualAssociationResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      records?: components['schemas']['Records']
      /** @description A list, in which each item specifies one manual call association. */
      associations?: components['schemas']['ManualAssociationsBasicData'][]
    }
    /** @description Basic association details such as call Id, etc. */
    ManualAssociationsBasicData: {
      /**
       * @description Gong's unique numeric identifier for the call (up to 20 digits).
       * @example 7782342274025937895
       */
      callId?: string
      /**
       * @description The user Id who performed the association.
       * @example 234599484848423
       */
      userId?: string
      /**
       * Format: date-time
       * @description The association date.
       * @example 1518863400
       */
      created?: string
      /** @description List of all association objects. */
      associatedCrmObjects?: components['schemas']['AssociationObject'][]
    }
    PermissionProfilesResponse: {
      /**
       * @description A Gong request reference Id, generated for this request. Can be used for troubleshooting purposes.
       * @example 4al018gzaztcr8nbukw
       */
      requestId?: string
      /** @description A list, in which each item specifies a permission profile. */
      profiles?: components['schemas']['PermissionProfileDTO'][]
    }
    /** @description Meeting update metadata */
    DeleteMeetingRequest: {
      /**
       * @description The email address of the user who created the meeting.
       * @example test@test.com
       */
      organizerEmail?: string
    }
    CallsUsersAccessDeleteDto: {
      /** @description A list, in which each item specifies a call and a list of users to be removed from the call. */
      callAccessList?: components['schemas']['CallUsersAccessDto'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Retrieve call data by date range (/v2/calls)
   * @description List calls that took place during a specified date range.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
   */
  listCalls: {
    parameters: {
      query: {
        /**
         * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
         * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
         */
        cursor?: string
        /** @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) from which to list recorded calls. Returns calls that started on or after the specified date and time. If not provided, list starts with earliest call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time. */
        fromDateTime: string
        /** @description Date and time (in ISO-8601 format: '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC) until which to list recorded calls. Returns calls that started up to but excluding specified date and time. If not provided, list ends with most recent call. For web-conference calls recorded by Gong, the date denotes its scheduled time, otherwise, it denotes its actual start time. */
        toDateTime: string
        /** @description Optional Workspace identifier, if supplied the API will return only the calls belonging to this workspace. */
        workspaceId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CallsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No calls found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add new call (/v2/calls)
   * @description When using this endpoint, either provide a downloadMediaUrl or use the returned callId in a follow-up request to /v2/calls/{id}/media to upload the media file.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
   */
  addCall: {
    requestBody: {
      content: {
        'application/json': components['schemas']['NewCallAddingRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['NewCallAddingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, e.g. recording is not enabled for the primary user */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Add call media (/v2/calls/{id}/media)
   * @description Adds a call media, recorded by a telephony system (PBX) or other media recording facility. Gong accepts call recordings in various audio and video file formats, including WAV, MP3, MP4, MKV and FLAC. If uploading a dual-channel (stereo) file separated by speaker, make sure to specify which channel correspondsto the company team member (rep) in the parties/mediaChannelId parameter of the Add New Call operation.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:create'.
   */
  addCallRecording: {
    parameters: {
      path: {
        /** @description callId returned from 'Add New Call' request */
        id: string
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The media file of the recording. You may attach files up to 1.5GB in size.
           */
          mediaFile: string
        }
      }
    }
    responses: {
      /** @description Successfully registered the new call recording */
      201: {
        content: {
          'application/json': components['schemas']['NewCallRecordingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve data for a specific call (/v2/calls/{id})
   * @description Retrieve data for a specific call.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:basic'.
   */
  getCall: {
    parameters: {
      path: {
        /** @description Gong's unique numeric identifier for the call (up to 20 digits). */
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['SpecificCall']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Call ID was not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve detailed call data by various filters (/v2/calls/extensive)
   * @description Lists detailed call data for calls that took place during a specified date range, have specified call IDs or hosted by specified users.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:extensive'.
   * Moreover, clients requesting media download URLs by the contentSelector.exposedFields.media field should also have the scope 'api:calls:read:media-url'.
   */
  listCallsExtensive: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestWithDataV2CallsRequestFilterWithOwnersContentSelector']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Calls']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No calls found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Permission profile for a given profile Id (/v2/permission-profile)
   * @description Returns a permission profile.
   */
  getPermissionProfile: {
    parameters: {
      query: {
        /** @description Permission profile identifier. */
        profileId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PermissionProfileResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update permission profile (/v2/permission-profile)
   * @description Update a permission profile.
   */
  updatePermissionProfile: {
    parameters: {
      query: {
        /** @description Permission profile identifier. */
        profileId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionProfileDTO']
      }
    }
    responses: {
      /** @description Successful response - returns the entire permission profile after applying the changes. */
      200: {
        content: {
          'application/json': components['schemas']['PermissionProfileResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create permission profile (/v2/permission-profile)
   * @description Create a permission profile in a given workspace.
   */
  createPermissionProfile: {
    parameters: {
      query: {
        /**
         * @description Workspace identifier.
         *
         * You can retrieve the workspace using the "workspaces" (under "Settings") API.
         */
        workspaceId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PermissionProfileDTO']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PermissionProfileResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update a Gong Meeting (/v2/meetings/{meetingId})
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:update'.
   */
  updateMeeting: {
    parameters: {
      path: {
        /** @description Gong's unique identifier for the meeting (up to 20 digits). */
        meetingId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMeetingRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UpdateMeetingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description This API endpoint is in Limited release - contact your CSM for more information. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No meeting found corresponding to the provided meeting ID */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, e.g. consent page is not enabled in your company */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete a Gong Meeting (/v2/meetings)
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:delete'.
   */
  deleteMeeting: {
    parameters: {
      path: {
        /** @description Gong's unique identifier for the meeting (up to 20 digits). */
        meetingId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteMeetingRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['DeleteMeetingRequest']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description This API endpoint is in Limited release - contact your CSM for more information. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No Gong meeting found corresponding to the provided organizer email */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, e.g. consent page is not enabled in your company */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Report event of a content view (/v2/customer-engagement/content/viewed)
   * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is viewed by an external participant (for example, a contract was “viewed” by the prospect)
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
   */
  contentViewed: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentViewedEvent']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          '*/*': components['schemas']['RegisterGenericCrmResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - Event was already reported in the past. */
      409: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Report event of a content share (/v2/customer-engagement/content/shared)
   * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a Gong user shares content with external participants (for example, a contract was “shared” by the account executive with his prospects)
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
   */
  contentShared: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ContentSharedEvent']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          '*/*': components['schemas']['RegisterGenericCrmResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - Event was already reported in the past. */
      409: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Report event of a custom action (/v2/customer-engagement/action)
   * @description Push engagement events into Gong and display them as events in Gong’s activity timeline, when a content is engaged by an external participant (for example, a contract was “signed” by the prospect)
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:engagement-data:write'.
   */
  customAction: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CustomActionEvent']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          '*/*': components['schemas']['RegisterGenericCrmResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - Event was already reported in the past. */
      409: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          '*/*': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get Generic CRM integration details (/v2/crm/integrations)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the CRM integration you set up using the <code>PUT /v2/crm/integrations</code> endpoint. You can only have one integration at a time. </p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integrations:read' scope.</p>
   */
  listGenericCrmIntegration: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['ListGenericCrmIntegrationsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Register a Generic CRM integration (/v2/crm/integrations)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Creates your CRM integration with Gong. Returns an integrationId, which should be used in requests to the CRM API to enable correct association of CRM data.</p><p>Multiple CRM integrations are not supported. To create a new integration, delete the old one first (<code>DELETE /v2/crm/integrations</code>).</p><p>This includes if you have integrated with Gong using one of the native CRM integrations such as HubSpot or Salesforce.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:integration:register' scope.</p>
   */
  registerGenericCrmIntegration: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GenericCrmRegistrationRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RegisterGenericCrmResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - An active integration already exists. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete a Generic CRM integration (/v2/crm/integrations)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Asynchronously deletes a CRM integration and all its associated CRM objects (Accounts, Contacts, Deals, Leads, and Users).</p><p>This endpoint gets the clientRequestId generated by you as the request identifier. Use this to check the status of the delete request by calling the <code>/request-status</code> endpoint,with the clientRequestId. </p><p>A status of DONE indicates that the integration and all its associated crm objects have been successfully deleted. This may take up to 24 hours to be deleted.</p><br>When accessed using a bearer token, this endpoint requires the '"+OAuthGongScope.DELETE_CRM_INTEGRATION+"' scope.<h2>Example</h2><code>DELETE https://api.gong.io/v2/crm/integrations?clientRequestId=1234&integrationId=6286478263646</code>
   */
  deleteGenericCrmIntegration: {
    parameters: {
      query: {
        /** @description The ID of the integration to delete */
        integrationId: number
        /** @description A unique identifier generated and sent by you to allow troubleshooting. Valid characters are letters, numbers, dashes and underscores. */
        clientRequestId: string
      }
    }
    responses: {
      /** @description Successfully registered the delete integration request */
      201: {
        content: {
          'application/json': components['schemas']['AsyncProcessingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Client request id has already been used */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  registerGenericCrmIntegrationDeprecated: {
    requestBody: {
      content: {
        'application/json': components['schemas']['GenericCrmRegistrationRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  /**
   * Give individual users access to calls (/v2/calls/users-access)
   * @description Give individual users access to calls.
   *
   * If a user already has access (perhaps the call was shared with them, or they have access through their permission profiles) the request will have no effect.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
   */
  addUsersAccessToCalls: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CallsUsersAccessAddDto']
      }
    }
    responses: {
      /** @description Successful request */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve users that have specific individual access to calls (/v2/calls/users-access)
   * @description Returns a list of users who have received individual access to calls through the API.
   *
   * This endpoint doesn't cover user that have access for other reasons (such as sharing recipients, or access through permission profiles).
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:read'.
   */
  getUsersAccessToCalls: {
    requestBody: {
      content: {
        'application/json': components['schemas']['FilterRequestCallsAccessGetDto']
      }
    }
    responses: {
      /** @description Successful request */
      200: {
        content: {
          'application/json': components['schemas']['CallsAccessDetailsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Remove specific individual users access from calls (/v2/calls/users-access)
   * @description Remove individual user access from calls. The request can only remove access previously given by the /v2/calls/users-access API.
   *
   * If a given user does not have access to the call, they will be unaffected.
   *
   * If a given user does have access to the call, but not through the pubic API (for example if the call was shared with the user), the user's access will remain unchanged.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:call-user-access:write'.
   */
  deleteUsersAccessToCalls: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CallsUsersAccessDeleteDto']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List users by filter (/v2/users/extensive)
   * @description List multiple Users.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
   */
  listMultipleUsers: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2MultipleUsersRequestWithCreationDates']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UsersMetadata']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No calls found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve interaction stats for applicable users by date (/v2/stats/interaction)
   * @description Returns interaction stats for users based on calls that have Whisper turned on.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:interaction'.
   */
  listInteractionStats: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2MultipleUsersWithDates']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CompanyUsersIntercationStatsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No stats found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve answered scorecards for applicable reviewed users or scorecards for a date range (/v2/stats/activity/scorecards)
   * @description Retrieve all the answers for the scorecards that were reviewed during a specified date range, for calls that took place during a specified date range, for specific scorecards or for specific reviewed users.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:scorecards'.
   */
  listAnsweredScorecards: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2AnsweredScorecardsFilter']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['AnsweredScorecards']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Answered scorecards not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve daily activity for applicable users for a date range (/v2/stats/activity/day-by-day)
   * @description Retrieve the daily activity of multiple users within the Gong system for a range of dates. This endpoint returns records including statistics about each user's activity, on the daily level. Records are returned only for users with activity in the range.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions:detailed'.
   */
  listMultipleUsersDayByDayActivity: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2MultipleUsersWithDates']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UsersDayByDayActivity']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve aggregated activity for defined users by date (/v2/stats/activity/aggregate)
   * @description Lists the activity of multiple users within the Gong system during a defined period. Given the period, this endpoint returns multiple records, one for each user, with an applicable activity during the period. Each record includes statistics about the user's activity.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.
   */
  listMultipleUsersAggregateActivity: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2MultipleUsersWithDates']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CompanyUsersAggregateActivityResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve aggregated activity for defined users by a date range with grouping in time periods (/v2/stats/activity/aggregate-by-period)
   * @description Lists the aggregated activity of multiple users within the Gong system for each time period within the defined date range. This endpoint returns multiple records, one for each user. For each user there are items for every time period in the date range, including statistics about the user's activity. Records are returned only for users with activity in the range.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:stats:user-actions'.
   */
  listMultipleUsersAggregateByPeriod: {
    requestBody: {
      content: {
        'application/json': components['schemas']['RequestWithTimePeriod']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UsersAggregateByPeriodActivity']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Create a New Gong Meeting (/v2/meetings)
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:user:create'.
   */
  addMeeting: {
    requestBody: {
      content: {
        'application/json': components['schemas']['NewMeetingRequest']
      }
    }
    responses: {
      /** @description Successful request */
      200: {
        content: {
          'application/json': components['schemas']['NewMeetingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description This API endpoint is in Limited release - contact your CSM for more information. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No Gong user found corresponding to the provided organizer email */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict, e.g. consent page is not enabled in your company */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Validate Gong meeting Integration (/v2/meetings/integration/status)
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:meetings:integration:status'.
   */
  integrationStatus: {
    requestBody: {
      content: {
        'application/json': components['schemas']['IntegrationStatusRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['IntegrationStatusResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description This API endpoint is in Limited release - contact your CSM for more information. */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Integration Settings (/v2/integration-settings)
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:integration-settings:write'.
   */
  integrationSettings: {
    requestBody: {
      content: {
        'application/json': components['schemas']['IntegrationSettingsRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['RegisterGenericCrmResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - Event was already reported in the past. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List assigned flows for the given prospects (/v2/flows/prospects)
   * @description Get the Gong Engage flows assigned to the given prospects.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:read'.
   */
  getFlowsForProspects: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ProspectsAssignedFlowsRequestV2']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['ProspectsFlowsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Assign a Gong Engage flow to prospects  (/v2/flows/prospects/assign)
   * @description Assign a Gong Engage flow to a batch of prospects.
   *
   * Gong Engage requires 'prospectsCrmIds' to fetch the prospects from the CRM, the chosen 'gongFlowId' to assign to the prospect, and an 'assignToEmail' which is the email address of the Gong user for whom the flow tasks will be created.
   *
   * The maximum allowed prospects to be assigned in a single request is 200
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:write'.
   */
  assignProspects: {
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignFlowRequestV2']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['AssignFlowResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Post a Digital Interaction (/v2/digital-interaction)
   * @description When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:digital-interactions:write'.
   */
  addDigitalInteraction: {
    requestBody: {
      content: {
        'application/json': components['schemas']['DigitalInteractionRequest']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['EventAcceptedResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Conflict - Event was already reported in the past. */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete the phone number, and all associated elements (/v2/data-privacy/erase-data-for-phone-number)
   * @description Given a phone number, this endpoint deletes from the Gong system any leads or contacts with a matching phone number or mobile phone number. Email messages sent to or from these leads/contacts are deleted. Calls where the leads/contacts appear are deleted. The deletion is not immediate, and may take several hours to complete.
   *
   * This endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io
   *
   * Delete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.
   */
  purgePhoneNumber: {
    parameters: {
      query: {
        /**
         * @description The phone number.
         *
         * This number must start with a + (plus) sign followed by the country code, area code, and local phone number. All other non-digits are ignored.
         *
         * The following are examples of permitted phone numbers: +1 425 555 2671, +1-425-555-2671, +1 425 5552671, +14255552671, +1 425 555 26 71, +1(425) 555-2671, etc.
         *
         * Note: This parameter should be URL-encoded.
         * @example +1(425) 555-2671
         */
        phoneNumber: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete the email address, and all associated elements (/v2/data-privacy/erase-data-for-email-address)
   * @description Given an email address, this endpoint deletes from the Gong system any calls or email messages that reference this address. Email messages sent to or from the address are deleted. Calls where the email address appears (as a lead, contact, attendee or speaker) are deleted. Leads or Contacts with the email address are deleted. The deletion is not immediate, and may take several hours to complete.
   *
   * This endpoint contains a data integrity protection mechanism to prevent the deletion of an abnormal number of objects. If the deletion fails please contact support at help@gong.io
   *
   * Delete the data from your CRM and email system before performing this operation so that private data is not re-imported into Gong.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:delete'.
   */
  purgeEmailAddress: {
    parameters: {
      query: {
        /** @description The email address. */
        emailAddress: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  uploadStages: {
    parameters: {
      query: {
        integrationId: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenericDealStageRequest'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  uploadCrmSchemaFieldDeprecated: {
    parameters: {
      query: {
        integrationId: number
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenericSchemaFieldRequestDeprecated'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  uploadCrmDataDeprecated: {
    parameters: {
      query: {
        clientRequestId: string
        integrationId: number
        objectType:
          | 'ACCOUNT'
          | 'CONTACT'
          | 'DEAL'
          | 'LEAD'
          | 'USER'
          | 'BUSINESS_USER'
          | 'STAGE'
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          dataFile: string
        }
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  mapCrmUsers: {
    parameters: {
      query: {
        clientRequestId: string
        integrationId: number
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          dataFile: string
        }
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  /**
   * List Schema Fields (/v2/crm/entity-schema)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Retrieves a list of the object schema fields.</p><p>When accessed using a bearer token, this endpoint requires the scope 'api:crm:schema'.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code><h4>Response</h4><code>{    "requestId": "afjkzqkqglog7ueki5",    "objectTypeToSelectedFields": {        "ACCOUNT": [            {                "name": "accountTypePicklist",                "label": "Account Type",                "type": "PICKLIST",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            },            {                "name": "accountTypePicklist2",                "label": "Account Type2",                "type": "PICKLIST",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            },            {                "name": "fooBar",                "label": "Foo Bar",                "type": "STRING",                "lastModified": null,                "isDeleted": false,                "referenceTo": null,                "orderedValueList": null            }        ]    }}</code>
   */
  listCrmSchemaFields: {
    parameters: {
      query: {
        /** @description Integration ID generated when creating the integration */
        integrationId: number
        /** @description Type of object to retrieve the schema fields for (case-sensitive). <br>Omitting this parameter returns the schema for all object types. */
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
      }
    }
    responses: {
      /** @description Successfully retrieved crm schema fields */
      200: {
        content: {
          'application/json': components['schemas']['ListSelectedFieldsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Upload Object Schema (/v2/crm/entity-schema)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Enables you to add, edit or remove fields to Gong CRM entities, so that you can display additional CRM data in Gong. Fields that are not included in the Gong CRM objects, and are uploaded without updating your schema, are not displayed in Gong.</p><p>Update your schema when:</p><ul>  <li>You create a new integration</li>  <li>There are changes to the schema of any object type. You can also send a schema update request before any request to the <code>/v2/crm/entities</code> API.</li></ul><p>When updating your schema:</p><ul>  <li>Add or change field: include all fields you want in the schema, including those sent previously. Example:     <table>      <tr>        <th>Date</th>        <th>Action</th>        <th>Result</th>      </tr>      <tr>        <td>3/4/2023</td>        <td>Send account schema with fieldA</td>        <td>fieldA added to the account</td>      </tr>      <tr>        <td>6/4/23</td>        <td>Send account schema with fieldA and fieldB</td>        <td>fieldA still included in account schema. fieldB added to the account</td>      </tr>      <tr>        <td>8/4/23</td>        <td>Send account schema with fieldC but without fieldA and fieldB</td>        <td>Receive an error that you must include all fields in the schema</td>      </tr>      <tr>        <td>15/4/23</td>        <td>Send account schema with fieldB, fieldC, and isDeleted for fieldA</td>        <td>fieldA and all it's data are deleted. fieldB and fieldC remain in the schema</td>      </tr>    </table>  </li>  <li>Changing a field: if you change the field type, a new field is created and the data associated with the original field is deleted. Other changes, such as the label do not result in data being deleted.</li>  <li>Deleting a field: to delete a field and it's associated data, send the field with isDeleted = true</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:schema' scope.</p><h2>Supported field types</h2><p>This table describes the field types that can be added to your schema</p><table>  <tr><th>Field type</th><th>Format in JSON</th><th>Possible values</th></tr>  <tr><td>BOOLEAN</td><td>boolean</td><td>true, false</td></tr>  <tr><td>DATE</td><td>string (ISO-8601 date without time)</td><td>"2020-05-31"</td></tr>  <tr><td>DATETIME</td><td>string (ISO-8601 datetime without milliseconds)</td><td>"2020-12-17T07:37:21+02:00"<p>"2020-12-17T05:37:21Z"</p></td></tr>  <tr><td>PICKLIST</td><td>string - one of the values in an orderedValueList</td><td>"Analyst"</td></tr>  <tr><td>NUMBER</td><td>number</td><td>45.66, 8453</td></tr>  <tr><td>PERCENT</td><td>number (between 0 to 100)</td><td>67.3</td></tr>  <tr><td>CURRENCY*</td><td>number</td><td>34.68</td></tr>  <tr><td>PHONENUMBER</td><td>string</td><td>"+14055766687"</td></tr>  <tr><td>EMAILADDRESS</td><td>string</td><td>"john.doe@anywhere.com"</td></tr>  <tr><td>REFERENCE</td><td>string - the id of another object</td><td>"48b009drax"</td></tr>  <tr><td>ID</td><td>string - the id of the object</td><td>"843hf8484jr84htg"</td></tr>  <tr><td>STRING</td><td>string</td><td>"whatever you want"</td></tr>  <tr><td>URL</td><td>string</td><td>"https://crm.com/account/6d4r578f"</td></tr></table><p>* In the integration send a number value, and specify the correct currency symbol in the Gong UI. Currently Gong does not support multiple currencies per company.</p><h3>Example</h3><h4>Request</h4><p><code>POST https://api.gong.io/v2/crm/entity-schema?integrationId=6286478263646&objectType=ACCOUNT</code></p><p><code>[{"uniqueName": "orderId", "label": "ID", "type": "ID", "lastModified": "2020-11-11T08:11:34+01:00"},</code></p><p><code>{"uniqueName": "parentAccount", "label": "Main Account", "type": "REFERENCE", "referenceTo": "ACCOUNT", "lastModified": "2020-11-11T08:11:34+01:00"},</code></p><p><code>{"uniqueName": "category", "label": "Category", "type": "PICKLIST", "orderedValueList": ["Analyst", "Competitor", "Customer", "Integrator", "Investor", "Partner", "Other"], "lastModified": "2020-11-11T08:11:34+01:00"}, </code></p><p>// remove custom field</p><p><code>{"uniqueName": "industry", "isDeleted": true, "label": "Industry", "type": "PICKLIST", "lastModified": "2020-11-21T08:11:34+01:00"}] </code></p>
   */
  uploadCrmSchemaField: {
    parameters: {
      query: {
        /** @description Integration ID generated when creating the integration */
        integrationId: number
        /** @description The object type to set the schema for (case-sensitive) */
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GenericSchemaFieldRequest'][]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
      /** @description Successfully uploaded crm schema fields */
      201: {
        content: {
          'application/json': components['schemas']['SchemaUpdateResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get CRM objects (/v2/crm/entities)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><h2>This API is for use in the <strong>development phase only</strong>, to manually verify that objects are uploaded and processed correctly in Gong.</h2><p>Returns a JSON object where each key is the object’s crm id and the corresponding value is a nested JSON object representing the CRM object fields. Each key in the nested JSON is the field name and the corresponding value is the field value.</p><p>The objects are fetched from the Gong main DB. If the object is not found, the JSON’s value is null.</p><p>The request body contains an array of objects ids.</p><p>The request is limited to 100 objects. If more than 100 objects are requested only the first 100 are returned.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:get-objects' scope.</p><h3>Example</h3><h4>Request</h4><code>GET https://api.gong.io/v2/crm/entities?integrationId=6286478263646&objectType=DEAL</code><br><br><code>["1234","8765"] //request body</code>
   */
  getCrmObjects: {
    parameters: {
      query: {
        /** @description Integration ID generated when creating the integration */
        integrationId: number
        /** @description Requested objects type */
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
        /** @description <b>Request Body:</b> The requested objects crm ids (should be sent in the request body) */
        objectsCrmIds: string[]
      }
    }
    responses: {
      /** @description Successfully retrieved requested objects data */
      200: {
        content: {
          'application/json': components['schemas']['GetGenericCrmObjectsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Upload CRM objects (/v2/crm/entities)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Inserts, updates, or deletes a CRM entity in Gong.</p><p>Gong searches for existing entities with the same ID, to determine whether the entity should be added or updated.</p><p>Ensure you have an authentication key and that you have registered your integration before uploading your CRM data.</p><p>When accessed using a bearer token, this endpoint requires the 'api:crm:upload' scope.</p><h2>Request parameters</h2> <h3>Query String parameters</h3><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>integrationId <font color="red">*</font></td>    <td>Integration ID generated when creating the integration</td>    <td>long</td>  </tr>  <tr>    <td>objectType <font color="red">*</font></td>    <td>The object being uploaded. Options are (case-sensitive): <br><ul><li>ACCOUNT</li><li>CONTACT</li><li>DEAL</li><li>LEAD</li><li>BUSINESS_USER</li><li>STAGE</li></ul> </td>    <td>string</td>  </tr>  <tr>    <td>clientRequestId	<font color="red">*</font></td>    <td>A unique identifier sent by you to allow troubleshooting and to prevent repeated attempts to upload the same list of objects.<br>Valid characters: letters, numbers, dashes and underscores.</td>    <td>string</td>  </tr></table><h2>Request Body</h2><ul>  <li>Content-Type should be multipart/form-data</li>  <li>Maximum payload size: 200 megabytes</li></ul><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>dataFile <font color="red">*</font></td>    <td>The LDJSON file with the entity data to upload. A file should only contain objects of one entity type. Records that have multiple updates should be sent in separate files. Each JSON object should be on a separate line. </td>    <td>file</td>  </tr></table><h2>CRM Entities</h2><p>This section details the entities that can be uploaded to Gong </p><h3>Business User</h3><p>The CRM business user represents the Gong user in the CRM and is responsible for the relationship with the account and for creating opportunities and closing deals. Uploading business users enables Gong to associate CRM entities such as accounts and contacts with the relevant user in Gong and with their Gong activity, such as conversations. </p><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your business users to Gong, generate a JSON file with the following fields:</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>objectId <font color="red">*</font></td>    <td>The CRM unique ID for the object. <br>Note: objectId can have a maximum of 64 characters and can have the following characters:       <ul>        <li>alpha numeric characters and a "-" </li>        <li>a valid email address</li>      </ul>No other special characters can be used    </td>    <td>string</td>  </tr>  <tr>    <td>modifiedDate <font color="red">*</font></td>    <td>The date and time the object was last modified in the CRM</td>    <td>ISO-8601 datetime format, without milliseconds</td>  </tr>  <tr>    <td>isDeleted</td>    <td>(Default: false) When true, the object is deleted from the database.</td>    <td>boolean</td>  </tr>  <tr>    <td>url</td>    <td>The full URL path to view this object in the CRM</td>    <td>string (Qualified URI)</td>  </tr>  <tr>    <td>emailAddress <font color="red">*</font></td>    <td>The business user's email address. Used to associate the Gong user with the CRM user. Not mandatory when isDeleted = true.</td>    <td>string</td>  </tr></table><h4>Associating the Gong user with the CRM user</h4><p>The CRM user is associated with the Gong user according to the email address. Each CRM deal contains an ownerId field, which is the CRM user ID.</p><p>To update an existing user:</p><ol>  <li>Delete the existing user by uploading the business user entity with isDeleted=true.</li>  <li>In a new request, send the new user details with isDeleted=false, or send a different user with the same email address.</li></ol><h3>Account</h3><p>The account object is an active customer in the CRM. Emails and calls in Gong are associated with this account object.</p><p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your CRM accounts to Gong, generate a JSON file with the following fields:</p><table>  <tr>    <th>Name</th>    <th>Description</th>    <th>Data Type</th>  </tr>  <tr>    <td>objectId <font color="red">*</font></td>    <td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters:       <ul>        <li>alpha numeric characters and a "-" </li>        <li>a valid email address</li>      </ul>No other special characters can be used    </td>    <td>string</td>  </tr>  <tr>    <td>modifiedDate <font color="red">*</font></td>    <td>The date and time the object was last modified in the CRM</td>    <td>ISO-8601 datetime format, without milliseconds</td>  </tr>  <tr>    <td>isDeleted</td>    <td>(Default: false) When true, the object is deleted from the database</td>    <td>boolean</td>  </tr>  <tr>    <td>url</td>    <td>A full http URL to browse this object in the CRM</td>    <td>string (Qualified URI)</td>  </tr>  <tr>    <td>name</td>    <td>The account name. <br>Default value: "Account_#"+objectId</td>    <td>string</td>  </tr>  <tr>    <td>domains</td>    <td>The account's domain/s. When an activity can’t be associated with a contact, the participants domain is used to associate the activity to an account via the account domain in this field.</td>    <td>string array</td>  </tr></table><h3>Contact</h3><p>A contact in Gong is the contact associated with the account. Gong uses a contact to match an activity to the correct account.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your CRM contacts to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to browse this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>accountId</td><td>The ID of the account associated with the contact in the CRM. Used to associate an activity to an account once the activity has been associated with a contact.</td><td>string</td></tr><tr><td>emailAddress</td><td>The contact's email address. Used to associate activities to a contact, based on the participants email. </td><td>string</td></tr><tr><td>firstName</td><td>The contact's first name</td><td>string</td></tr><tr><td>lastName</td><td>The contact's last name</td><td>string</td></tr><tr><td>title</td><td>The contact's title</td><td>string</td></tr><tr><td>phoneNumber</td><td>The contact's phone number. Used to associate telephony system calls to a contact based on the call participant's phone number.</td><td>string</td></tr></table><h3>Deal</h3><p>A deal in Gong is a qualified opportunity or contract in a specific account.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your deals to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to access this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>accountId</td><td>The ID of the account the deal is associated with in the CRM. <br><b>Note</b>: Deals without an accountId will not appear in Gong</td><td>string</td></tr><tr><td>ownerId</td><td>The ID of the deal owner in the CRM. This ID should be the same as the business user objectId so the deal can be associated with the correct Gong user. <br><b>Note</b>: Deals without an ownerId will not appear in the deal board in Gong. </td><td>string</td></tr><tr><td>name</td><td>The deal name<br>Default value: Deal_# + objectId</td><td>string</td></tr><tr><td>createdDate</td><td>The date and time the deal was created in the CRM.</td><td>ISO-8601 datetime without milliseconds</td></tr><tr><td>closeDate</td><td>The date the deal closed or is expected to close. <br><b>Note</b>: Deals without a closeDate will not appear in the deal board in Gong.</td><td>string</td></tr><tr><td>status</td><td>The deal status. Possible values are: <ul><li>WON</li><li>LOST</li><li>OPEN</li></ul><br>Default value: OPEN</td><td>string</td></tr><tr><td>stage</td><td>The stage the deal is in. If empty, it will not always be possible to associate activities with deals. <br>Must be the same as one of the values in the objectId field in the stages object</td><td>string</td></tr><tr><td>amount</td><td>The deal amount in the currency unit. Companies set their default currency in the Company Settings page. All amounts should be sent in this currency. If your deal is in a different currency, convert the deal amount to the currency defined in the Company Settings page.<br>Default value: 0</td><td>currency</td></tr></table><h3>Lead</h3><p>A Lead is a potential customer, who may not yet be associated with an account. If conversations can't be associated with a contact, Gong then checks to see whether there is a relevant lead to associate with the conversation.</p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your leads to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object.<br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>modifiedDate <font color="red">*</font></td><td>The date and time the object was last modified in the CRM</td><td>ISO-8601 datetime format, without milliseconds</td></tr><tr><td>isDeleted</td><td>(Default: false) When true, the object is deleted from the database.</td><td>boolean</td></tr><tr><td>url</td><td>A full http URL to browse this object in the CRM</td><td>string (Qualified URI)</td></tr><tr><td>emailAddress </td><td>The lead's email address. Used to associate activities to a lead, based on the participants email. </td><td>string</td></tr><tr><td>firstName </td><td>The lead's first name</td><td>string</td></tr><tr><td>lastName </td><td>The lead's last name</td><td>string</td></tr><tr><td>title</td><td>The lead's title</td><td>string</td></tr><tr><td>phoneNumber</td><td><p>The lead's phone number. Used to associated telephony system calls to a lead based on the call participant's phone number. </p><p></td><td>string</td></tr><tr><td>convertedToDealId</td><td>The deal ID in the CRM. Relevant if the lead is converted to a deal</td><td>string</td></tr><tr><td>convertedToContactId</td><td>The contact ID in the CRM the lead was converted to. Relevant if the lead is converted to a contact</td><td>string</td></tr><tr><td>convertedToAccountId</td><td>The account ID in the CRM the lead was converted to. Relevant if the lead is converted to an account</td><td>string</td></tr></table><h3>Stage</h3><p>The list of stages the deal can be in, in the CRM.  Stages are set to be active or inactive so that if you want to delete them, the stage is still associated with existing deals in that stage but will not be available for new deals. </p> <p>Mandatory parameters are marked with a <font color="red">*</font>.</p><p>To upload your stages to Gong, generate a JSON file with the following fields:</p><table><tr><th>Name</th><th>Description</th><th>Data Type</th></tr><tr><td>objectId <font color="red">*</font></td><td>The CRM unique ID for the object. <br>Note: objectId can have a maximum of 64 characters and can have the following characters: <ul><li>alpha numeric characters and a "-" </li><li>a valid email address</li></ul>No other special characters can be used</td><td>string</td></tr><tr><td>name <font color="red">*</font></td><td>The display name for the stage</td><td>string</td></tr><tr><td>isActive</td><td>When true, sets the stage to active in Gong. When false, sets the stage to inactive in Gong.<br>Default value: true</td><td>boolean</td></tr><tr><td>sortOrder</td><td>The order of the stage in the sales process (starting from 1). The stages are displayed according to this order. If two stages have the same sort order they will be displayed one after another. <br>Default value: 1</td><td>integer</td></tr></table><h2>Example</h2><h3>Upload Business User account</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=BUSINESS_USER<br>{"objectId": "user1_Id_In_The_CRM", "emailAddress": "john.doe@acme.com", "modifiedDate": "2019-01-03T23:45:57+01:00"}<br> // remove user mapping for user user2_Id_In_The_CRM<br>{"objectId": "user2_Id_In_The_CRM", "isDeleted": true, "emailAddress": "john.taylor@acme.com", "modifiedDate": "2019-01-03T23:45:57+01:00"}</code><h3>Upload Stage example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=STAGE<br>{"objectId": "discovery", "name": "Discovery", "isActive": true, "sortOrder": 1}<br>{"objectId": "won", "modifiedDate": "2019-01-03T23:45:57+01:00", "name": "Closed Won", "isActive": true, "sortOrder": 5}</code><h3>Upload Account example</h3><p><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=ACCOUNT<br>// account with additional field<br>{"objectId": "5ybyh6n6n65", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/accounts/5ybyh6n6n65", "name": "PBR", "domains": ["pbr.com", "pbr.gov"], "type": "Investor"}<br>// remove account gfjhty756th from Gong <br>{"objectId": "gfjhty756th", "modifiedDate": "2019-01-03T22:45:57Z", "name": "PBR", "domains": ["pbr.com", "pbr.gov"], "isDeleted": true} </code><h3>Upload Contact example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=CONTACT<br>{"objectId": "5zbwd7n5n65", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/contacts/5zbwd7n5n65", "accountId": "5ybyh6n6n65", "emailAddress": "john.smith@acme.com", "firstName": "john", "lastName": "smith", "phoneNumber": "(912) 507-4395"}</code><h3>Upload Lead example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=LEAD<br>{"objectId": "4v5bt54t553", "modifiedDate": "2019-01-03T23:45:57+01:00", "url": "https://crm.com/leads/45k4j5j5k44", "emailAddress": "jane.doe@acme.com", "firstName": "Jane", "lastName": "Doe", "title": "VP Special Effects", "phoneNumber": "(912) 507-4395"}<br>// remove lead gf4543gf6th<br>{"objectId": "gf4543gf6th", "modifiedDate": "2019-01-03T22:45:57Z", "emailAddress": "john.smith@acme.com", "firstName": "John", "lastName": "Smith", "isDeleted": true} <br>// lead 63473hjg53h converted to account 6sjk47jf78d, contact 87grhn74hg6 and deal dkfj8dfgf87<br>{"objectId": "63473hjg53h", "modifiedDate": "2019-01-03T23:45:57+01:00", "emailAddress": "bob.smith@acme.com", "firstName": "Bob", "lastName": "Smith", "convertedToDealId": "dkfj8dfgf87", "convertedToContactId": "87grhn74hg6", "convertedToAccountId": "6sjk47jf78d"} </code><h3>Upload Deal example</h3><code>POST https://api.gong.io/v2/crm/entities?clientRequestId=1234&integrationId=6286478263646&objectType=DEAL<br>{"objectId": "8608553", "modifiedDate": "2022-02-04T18:24:59Z", "url": "http://crm.com/deals/8608553", "accountId": "5ybyh6n6n65", "ownerId": "5486951", "name": "Deal name", "createdDate": "2022-02-04T17:57:23Z", "closeDate": "2022-09-04", "status": OPEN, "stage": "discovery", "amount": 7000, "custom_field_1": "2022-02-04T17:57:23.000Z", "custom_field_2": null}</code><h3>Uploading additional fields</h3><p>If you defined additional fields using the <code>/v2/crm/entity-schema</code> API, include those fields in the JSON file.</p>
   */
  uploadCrmData: {
    requestBody: {
      content: {
        'multipart/form-data': {
          /**
           * Format: binary
           * @description The CRM data file. You may attach files up to 200MB in size
           */
          dataFile: string
        }
      }
    }
    responses: {
      /** @description Successfully uploaded the crm data.<br>Important: This API is asynchronous. A 201 response indicates that the file successfully uploaded to Gong and is pending processing. Use the clientRequestId to verify the status of the request by calling the GET /v2/crm/request-status endpoint. */
      201: {
        content: {
          'application/json': components['schemas']['AsyncProcessingResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Client request id has already been used */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve transcripts of calls (/v2/calls/transcript)
   * @description Returns transcripts for calls that took place during the specified date period. If call IDs are specified, only transcripts for calls with those IDs that took place during the time period are returned.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:calls:read:transcript'.
   */
  getCallTranscripts: {
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicApiBaseRequestV2CallsFilter']
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['CallTranscripts']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No calls found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List all company workspaces (/v2/workspaces)
   * @description Returns a list of all workspaces including their details.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:workspaces:read'.
   */
  listWorkspaces: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['WorkspacesMetadata']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List all users (/v2/users)
   * @description List all of the company's users.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
   */
  listUsers: {
    parameters: {
      query?: {
        /**
         * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
         * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
         */
        cursor?: string
        /**
         * @description Avatars are synthetic users representing Gong employees (CSMs and support providers) when they access your instance. References to avatars' IDs may be found in the outputs of other API endpoints. This parameter is optional, if not provided avatars will not be included in the results.
         * @example false
         */
        includeAvatars?: boolean
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['UsersMetadata']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve user (/v2/users/{id})
   * @description Retrieve a specific user.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
   */
  getUser: {
    parameters: {
      path: {
        /** @description Gong's unique numeric identifier for the user (up to 20 digits). */
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['User']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve user settings history (/v2/users/{id}/settings-history)
   * @description Retrieve a specific user's settings history.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
   */
  getUserHistory: {
    parameters: {
      path: {
        /** @description Gong's unique numeric identifier for the user (up to 20 digits). */
        id: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['SettingsHistory']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description User not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve tracker details (/v2/settings/trackers)
   * @description Retrieves details of all keyword trackers in the system or in a given workspace.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the  'api:settings:trackers:read' scope.
   */
  listTrackers: {
    parameters: {
      query?: {
        /** @description The ID of the workspace the keyword trackers are in. When empty, all trackers in all workspaces are returned. */
        workspaceId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Trackers']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Workspace not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve scorecards details (/v2/settings/scorecards)
   * @description Retrieve all the scorecards within the Gong system.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:settings:scorecards:read'.
   */
  listScorecards: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['Scorecards']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Scorecards not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List all users attached to a given permission profile (/v2/permission-profile/users)
   * @description Returns a list of all users whose access is controlled by the given permission profile.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:users:read'.
   */
  listPermissionProfileUsers: {
    parameters: {
      query: {
        /** @description Permission profile identifier. */
        profileId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PermissionProfileUsersResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve logs data by type and time range (/v2/logs)
   * @description List log entries that took place during a specified time range.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:logs:read'.
   */
  listLogs: {
    parameters: {
      query: {
        /** @description Type of logs requested. */
        logType:
          | 'AccessLog'
          | 'UserActivityLog'
          | 'UserCallPlay'
          | 'ExternallySharedCallAccess'
          | 'ExternallySharedCallPlay'
        /** @description The time from which to retrieve log records, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC). */
        fromDateTime: string
        /** @description The time until which to retrieve log records, in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified, the logs end with the latest recorded log. */
        toDateTime?: string
        /**
         * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
         * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
         */
        cursor?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['LogsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No logs found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve Library folders (/v2/library/folders)
   * @description Use this endpoint to retrieve a list of public library folders. We do not allow retrieval of either private or archived folders.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
   */
  getLibraryStructure: {
    parameters: {
      query?: {
        /** @description Workspace identifier. We will retrieve folders which are related to this specific workspace. */
        workspaceId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['LibraryResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No folders found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List of calls in a specific folder (/v2/library/folder-content)
   * @description Given a folder id, this endpoint retrieves a list of calls in it.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:library:read'.
   */
  getCallsInSpecificFolder: {
    parameters: {
      query?: {
        /** @description Gong's unique numeric identifier for the folder (up to 20 digits). */
        folderId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['LibraryFolderListOfCallsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No folders found for the specified period */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List Gong Engage flows (/v2/flows)
   * @description Lists all 'COMPANY' flows and optionally 'Personal' flows available for the user to choose from.
   *
   * Gong Engage sorts flows by 2 visibility types: 'Personal' and 'Company'
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:flows:read'.
   */
  listFlows: {
    parameters: {
      query: {
        /**
         * @description Email of a Gong user, the API will return 'PERSONAL' flows belonging to the given user in addition to the 'COMPANY' flows.
         * @example test@test.com
         */
        flowOwnerEmail: string
        /**
         * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
         * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
         */
        cursor?: string
        /**
         * @description Optional Workspace identifier, if supplied the API will return only the flows belonging to this workspace.
         * @example 623457276584334
         */
        workspaceId?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['FlowsResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve all references to a phone number. (/v2/data-privacy/data-for-phone-number)
   * @description Shows the elements in the Gong system that reference the given phone number. Given a phone number, this endpoint returns details of any leads or contacts with this phone number and their associated calls and email messages.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.
   */
  findAllReferencesToPhoneNumber: {
    parameters: {
      query: {
        /**
         * @description The phone number.
         *
         * This number must start with a + (plus) sign followed by the country code, area code, and local phone number. All other non-digits are ignored.
         *
         * The following are examples of permitted phone numbers: +1 425 555 2671, +1-425-555-2671, +1 425 5552671, +14255552671, +1 425 555 26 71, +1(425) 555-2671, etc.
         *
         * Note: This parameter should be URL-encoded.
         * @example +1(425) 555-2671
         */
        phoneNumber: string
      }
    }
    responses: {
      /** @description Successful request */
      200: {
        content: {
          'application/json': components['schemas']['PhoneNumberReferences']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve all references to an email address. (/v2/data-privacy/data-for-email-address)
   * @description Shows the elements in the Gong system that reference the given email address. Given an emails address, this endpoint returns details of all calls and email messages that reference this address, and any leads or contacts with this email address.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:data-privacy:read'.
   */
  findAllReferencesToEmailAddress: {
    parameters: {
      query: {
        /** @description The email address. */
        emailAddress: string
      }
    }
    responses: {
      /** @description Successful request */
      200: {
        content: {
          'application/json': components['schemas']['EmailAddressReferences']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get Request Status (/v2/crm/request-status)
   * @description <style>.public-api-info {    background: rgb(222, 235, 255);}.public-api-tip {    background: rgb(227, 252, 239);}.public-api-parameter {    background: rgba(9,30,66,0.08);}.public-api-note {    background: rgb(234, 230, 255);}.public-api-important {    background: rgb(255, 250, 230);}.public-api-critical {    background: rgb(255, 235, 230);}table, th, td {  border: 1px solid gray;  border-collapse: collapse;}th, td {  padding: 5px;}th {  text-align: left;}img {  border: 2px solid #D3D5D9;}</style><p>Returns the current status of the request for endpoints run asynchronously: </p><ul>  <li>POST /v2/crm/entities</li>  <li>DELETE /v2/crm/integrations</li></ul><p>When accessed using a bearer token, this endpoint requires the 'api:crm:upload' scope.</p><h3>Status Codes</h3><ul>  <li>PENDING: file is pending being processed</li>  <li>IN_PROGRESS: file is being processed</li>  <li>DONE: all objects in the file were successfully processed</li>  <li>FAILED: failed to parse some objects, or a general error occurred when the file was being processed</li></ul><h3>Correcting a file that failed to be processed:</h3><p>When the status in the response is FAILED do one of the following: </p><ul>  <li>If the response includes a list of errors, correct the errors in the file as follows:     <ol>      <li>Using the <code>errors.line</code> attribute, locate and correct the data in the JSON file.</li>      <li>You can resend the entire LDJSON file, or only the corrected records via the relevant API. <br>Note: The response returns a maximum of 20 errors. To make sure you have corrected all errors, upload the entire file repeatedly until you receive a DONE status.</li>    </ol>  </li>  <li>A single error in the form of: <br>{"line":0,"description":"....."} indicates a general processing error:     <ol>      <li>Fix the LDJSON file according to the error message.</li>      <li>Upload the entire LDJSON file again.</li>    </ol>  </li></ul>
   */
  getRequestStatus: {
    parameters: {
      query: {
        /** @description Integration ID generated when creating the integration */
        integrationId: number
        /** @description The client request ID used in the asynchronous endpoint you want to get a status for */
        clientRequestId: string
      }
    }
    responses: {
      /** @description Operation successful */
      200: {
        content: {
          'application/json': components['schemas']['RequestStatusResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description API request limit exceeded */
      429: {
        headers: {
          /** @description Number of seconds to wait before making a new request. */
          'Retry-After'?: string
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  listCrmSchemaFieldsDeprecated: {
    parameters: {
      query: {
        integrationId: number
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  getCrmObjectsDeprecated: {
    parameters: {
      query: {
        integrationId: number
        objectType: 'ACCOUNT' | 'CONTACT' | 'DEAL' | 'LEAD'
        objectsCrmIds: string[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  listGenericCrmIntegrationDeprecated: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
  /**
   * List all calls that were manually associated with CRM objects (/v2/calls/manual-crm-associations) in Beta Phase
   * @description Returns a list of all calls that were manually associated or re-associated with CRM account and deal/opportunity since a given time.
   *
   * Actions will be listed in the ascending order of their timing.
   *
   * Notice if a call was associated and later re-associated the API will return both events.
   *
   * When accessed through a Bearer token authorization method, this endpoint requires the scope 'api:crm-calls:manual-association:read'.
   */
  listCRMCallsManualAssociation: {
    parameters: {
      query?: {
        /** @description Association time filter - only the associations made after that time will be listed. The time is in the ISO-8601 format (e.g., '2018-02-18T02:30:00-07:00' or '2018-02-18T08:00:00Z', where Z stands for UTC); if not specified all association events will be listed. */
        fromDateTime?: string
        /**
         * @description When paging is needed, provide the value supplied by the previous API call to bring the following page of records.
         * @example eyJhbGciOiJIUzI1NiJ9.eyJjYWxsSWQiM1M30.6qKwpOcvnuweTZmFRzYdtjs_YwJphJU4QIwWFM
         */
        cursor?: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['ManualAssociationResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * List all company permission profiles for a given workspace (/v2/all-permission-profiles)
   * @description Returns a list of all permission profiles.
   *
   * The listing is in the alphabetical order of the profile names.
   */
  listPermissionProfile: {
    parameters: {
      query: {
        /**
         * @description Workspace identifier, the API will return only the profiles belonging to this workspace.
         *
         * You can retrieve the workspace using the "workspaces" (under "Settings") API.
         */
        workspaceId: string
      }
    }
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': components['schemas']['PermissionProfilesResponse']
        }
      }
      /** @description Malformed request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Failed to complete the operation due to an unexpected error */
      500: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteGenericCrmIntegrationDeprecated: {
    parameters: {
      query: {
        integrationId: number
        clientRequestId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BaseResponse']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
