/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/Employees': {
    /** Retrieves employees */
    get: operations['getEmployees']
    /** Creates employees */
    post: operations['createEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}': {
    /** Retrieves specific employees by using a unique employee ID */
    get: operations['getEmployee']
    /** Updates a specific employee's detail */
    put: operations['updateEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Employment': {
    /** Creates employment detail for a specific employee using a unique employee ID */
    post: operations['createEmployment']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Tax': {
    /** Retrieves tax records for a specific employee using a unique employee ID */
    get: operations['getEmployeeTax']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/ukopeningbalances': {
    /** Retrieves a specific employee's openingbalances using a unique employee ID */
    get: operations['getEmployeeOpeningBalances']
    /** Updates a specific employee's opening balances */
    put: operations['updateEmployeeOpeningBalances']
    /** Creates an opening balance for a specific employee */
    post: operations['createEmployeeOpeningBalances']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Leave': {
    /** Retrieves a specific employee's leave records using a unique employee ID */
    get: operations['getEmployeeLeaves']
    /** Creates leave records for a specific employee */
    post: operations['createEmployeeLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Leave/{LeaveID}': {
    /** Retrieves a specific employee's leave record using a unique employee ID */
    get: operations['getEmployeeLeave']
    /** Updates a specific employee's leave records */
    put: operations['updateEmployeeLeave']
    /** Deletes a specific employee's leave record */
    delete: operations['deleteEmployeeLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeaveBalances': {
    /** Retrieves a specific employee's leave balances using a unique employee ID */
    get: operations['getEmployeeLeaveBalances']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/StatutoryLeaveBalance': {
    /** Retrieves a specific employee's leave balances using a unique employee ID */
    get: operations['getEmployeeStatutoryLeaveBalances']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/StatutoryLeaves/Summary/{EmployeeID}': {
    /** Retrieves a specific employee's summary of statutory leaves using a unique employee ID */
    get: operations['getStatutoryLeaveSummary']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/StatutoryLeaves/Sick': {
    /** Creates statutory sick leave records */
    post: operations['createEmployeeStatutorySickLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/StatutoryLeaves/Sick/{StatutorySickLeaveID}': {
    /** Retrieves a statutory sick leave for an employee */
    get: operations['getEmployeeStatutorySickLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeavePeriods': {
    /** Retrieves a specific employee's leave periods using a unique employee ID */
    get: operations['getEmployeeLeavePeriods']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeaveTypes': {
    /** Retrieves a specific employee's leave types using a unique employee ID */
    get: operations['getEmployeeLeaveTypes']
    /** Creates employee leave type records */
    post: operations['createEmployeeLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PaymentMethods': {
    /** Retrieves a specific employee's payment method using a unique employee ID */
    get: operations['getEmployeePaymentMethod']
    /** Creates an employee payment method */
    post: operations['createEmployeePaymentMethod']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates': {
    /** Retrieves a specific employee pay templates using a unique employee ID */
    get: operations['getEmployeePayTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates/earnings': {
    /** Creates an earnings template records for a specific employee */
    post: operations['createEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates/earnings/{PayTemplateEarningID}': {
    /** Updates a specific employee's earnings template records */
    put: operations['updateEmployeeEarningsTemplate']
    /** Deletes a specific employee's earnings template record */
    delete: operations['deleteEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/paytemplateearnings': {
    /** Creates multiple earnings template records for a specific employee using a unique employee ID */
    post: operations['createMultipleEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Benefits': {
    /** Retrieves employee benefits */
    get: operations['getBenefits']
    /** Creates a new employee benefit */
    post: operations['createBenefit']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Benefits/{id}': {
    /** Retrieves a specific benefit by using a unique benefit ID */
    get: operations['getBenefit']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Deductions': {
    /** Retrieves deductions */
    get: operations['getDeductions']
    /** Creates a new deduction */
    post: operations['createDeduction']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Deductions/{deductionId}': {
    /** Retrieves a specific deduction by using a unique deduction ID */
    get: operations['getDeduction']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsOrders': {
    /** Retrieves earnings orders */
    get: operations['getEarningsOrders']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsOrders/{id}': {
    /** Retrieves a specific earnings orders by using a unique earnings orders id */
    get: operations['getEarningsOrder']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsRates': {
    /** Retrieves earnings rates */
    get: operations['getEarningsRates']
    /** Creates a new earnings rate */
    post: operations['createEarningsRate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsRates/{EarningsRateID}': {
    /** Retrieves a specific earnings rates by using a unique earnings rate id */
    get: operations['getEarningsRate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveTypes': {
    /** Retrieves leave types */
    get: operations['getLeaveTypes']
    /** Creates a new leave type */
    post: operations['createLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveTypes/{LeaveTypeID}': {
    /** Retrieves a specific leave type by using a unique leave type ID */
    get: operations['getLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Reimbursements': {
    /** Retrieves reimbursements */
    get: operations['getReimbursements']
    /** Creates a new reimbursement */
    post: operations['createReimbursement']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Reimbursements/{ReimbursementID}': {
    /** Retrieves a specific reimbursement by using a unique reimbursement id */
    get: operations['getReimbursement']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets': {
    /** Retrieves timesheets */
    get: operations['getTimesheets']
    /** Creates a new timesheet */
    post: operations['createTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}': {
    /** Retrieve a specific timesheet by using a unique timesheet ID */
    get: operations['getTimesheet']
    /** Deletes a specific timesheet */
    delete: operations['deleteTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Lines': {
    /** Creates a new timesheet line for a specific timesheet using a unique timesheet ID */
    post: operations['createTimesheetLine']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Approve': {
    /** Approves a specific timesheet */
    post: operations['approveTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/RevertToDraft': {
    /** Reverts a specific timesheet to draft */
    post: operations['revertTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}': {
    /** Updates a specific timesheet line for a specific timesheet */
    put: operations['updateTimesheetLine']
    /** Deletes a specific timesheet line */
    delete: operations['deleteTimesheetLine']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRunCalendars': {
    /** Retrieves payrun calendars */
    get: operations['getPayRunCalendars']
    /** Creates a new payrun calendar */
    post: operations['createPayRunCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRunCalendars/{PayRunCalendarID}': {
    /** Retrieves a specific payrun calendar by using a unique payrun calendar ID */
    get: operations['getPayRunCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/SalaryAndWages': {
    /** Retrieves a specific employee's salary and wages by using a unique employee ID */
    get: operations['getEmployeeSalaryAndWages']
    /** Creates a salary and wage record for a specific employee */
    post: operations['createEmployeeSalaryAndWage']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/SalaryAndWages/{SalaryAndWagesID}': {
    /** Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id */
    get: operations['getEmployeeSalaryAndWage']
    /** Updates salary and wages record for a specific employee */
    put: operations['updateEmployeeSalaryAndWage']
    /** Deletes a salary and wages record for a specific employee */
    delete: operations['deleteEmployeeSalaryAndWage']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns': {
    /** Retrieves pay runs */
    get: operations['getPayRuns']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns/{PayRunID}': {
    /** Retrieves a specific pay run by using a unique pay run ID */
    get: operations['getPayRun']
    /** Updates a specific pay run */
    put: operations['updatePayRun']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Payslips': {
    /** Retrieves payslips */
    get: operations['getPaySlips']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Payslips/{PayslipID}': {
    /** Retrieves a specific payslip by using a unique payslip ID */
    get: operations['getPaySlip']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Settings': {
    /** Retrieves payroll settings */
    get: operations['getSettings']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Settings/trackingCategories': {
    /** Retrieves tracking categories */
    get: operations['getTrackingCategories']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Pagination: {
      /** @example 1 */
      page?: number
      /** @example 10 */
      pageSize?: number
      /** @example 1 */
      pageCount?: number
      /** @example 2 */
      itemCount?: number
    }
    /** @description The object returned for a bad request */
    Problem: {
      /**
       * @description The type of error format
       * @example application/problem+json
       */
      type?: string
      /**
       * @description The type of the error
       * @example BadRequest
       */
      title?: string
      /**
       * @description The error status code
       * @example 400
       */
      status?: string
      /**
       * @description A description of the error
       * @example Validation error occurred.
       */
      detail?: string
      instance?: string
      invalidFields?: components['schemas']['InvalidField'][]
    }
    InvalidField: {
      /**
       * @description The name of the field that caused the error
       * @example DateOfBirth
       */
      name?: string
      /**
       * @description The reason the error occurred
       * @example The Date of Birth is required.
       */
      reason?: string
    }
    Employees: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employees?: components['schemas']['Employee'][]
    }
    EmployeeObject: {
      pagination?: components['schemas']['Pagination']
      employee?: components['schemas']['Employee']
      problem?: components['schemas']['Problem']
    }
    Employee: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the employee
       * @example d90457c4-f1be-4f2e-b4e3-f766390a7e30
       */
      employeeID?: string
      /**
       * @description Title of the employee
       * @example Mrs
       */
      title?: string
      /**
       * @description First name of employee
       * @example Karen
       */
      firstName?: string
      /**
       * @description Last name of employee
       * @example Jones
       */
      lastName?: string
      /**
       * Format: date
       * @description Date of birth of the employee (YYYY-MM-DD)
       * @example 2019-01-02T00:00:00.000Z
       */
      dateOfBirth?: string
      address?: components['schemas']['Address']
      /**
       * @description The email address for the employee
       * @example developer@me.com
       */
      email?: string
      /**
       * @description The employee’s gender
       * @example F
       * @enum {string}
       */
      gender?: 'M' | 'F'
      /**
       * @description Employee phone number
       * @example 415-555-1212
       */
      phoneNumber?: string
      /**
       * Format: date
       * @description Employment start date of the employee at the time it was requested
       * @example 2020-01-19T00:00:00.000Z
       */
      startDate?: string
      /**
       * Format: date
       * @description Employment end date of the employee at the time it was requested
       * @example 2020-01-19T00:00:00.000Z
       */
      endDate?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar of the employee
       */
      payrollCalendarID?: string
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the employee
       */
      updatedDateUTC?: string
      /**
       * Format: date-time
       * @description UTC timestamp when the employee was created in Xero
       */
      createdDateUTC?: string
      /**
       * @description National insurance number of the employee
       * @example AB123456C
       */
      nationalInsuranceNumber?: string
      /** @description Whether the employee is an off payroll worker */
      isOffPayrollWorker?: boolean
    }
    EmploymentObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employment?: components['schemas']['Employment']
    }
    Employment: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar of the employee
       */
      payrollCalendarID?: string
      /**
       * Format: date
       * @description Start date of the employment (YYYY-MM-DD)
       */
      startDate?: string
      /**
       * @description The employment number of the employee
       * @example 7
       */
      employeeNumber?: string
      /**
       * @description The NI Category of the employee
       * @example A
       * @enum {string}
       */
      niCategory?:
        | 'A'
        | 'B'
        | 'C'
        | 'F'
        | 'H'
        | 'I'
        | 'J'
        | 'L'
        | 'M'
        | 'S'
        | 'V'
        | 'X'
        | 'Z'
    }
    EmployeeTaxObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employeeTax?: components['schemas']['EmployeeTax']
    }
    EmployeeTax: {
      /**
       * @description The Starter type.
       * @example New Employee with P45
       */
      starterType?: string
      /**
       * @description Starter declaration.
       * @example B.) This is currently their only job
       */
      starterDeclaration?: string
      /**
       * @description The Tax code.
       * @example 1185L
       */
      taxCode?: string
      /** @description Describes whether the tax settings is W1M1 */
      w1M1?: boolean
      /**
       * Format: double
       * @description The previous taxable pay
       */
      previousTaxablePay?: number
      /**
       * Format: double
       * @description The tax amount previously paid
       */
      previousTaxPaid?: number
      /**
       * @description The employee's student loan deduction type
       * @example Plan Type 2
       */
      studentLoanDeduction?: string
      /** @description Describes whether the employee has post graduate loans */
      hasPostGraduateLoans?: boolean
      /** @description Describes whether the employee is director */
      isDirector?: boolean
      /**
       * Format: date
       * @description The directorship start date
       */
      directorshipStartDate?: string
      /**
       * @description NICs calculation method
       * @example Annualized
       */
      nicCalculationMethod?: string
    }
    EmployeeOpeningBalancesObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      openingBalances?: components['schemas']['EmployeeOpeningBalances']
    }
    EmployeeOpeningBalances: {
      /**
       * Format: double
       * @description The total accumulated statutory adoption pay amount received by the employee for current fiscal year to date
       */
      statutoryAdoptionPay?: number
      /**
       * Format: double
       * @description The total accumulated statutory maternity pay amount received by the employee for current fiscal year to date
       */
      statutoryMaternityPay?: number
      /**
       * Format: double
       * @description The total accumulated statutory paternity pay amount received by the employee for current fiscal year to date
       */
      statutoryPaternityPay?: number
      /**
       * Format: double
       * @description The total accumulated statutory shared parental pay amount received by the employee for current fiscal year to date
       */
      statutorySharedParentalPay?: number
      /**
       * Format: double
       * @description The total accumulated statutory sick pay amount received by the employee for current fiscal year to date
       */
      statutorySickPay?: number
      /**
       * Format: double
       * @description The unique employee number issued by the employee's former employer
       */
      priorEmployeeNumber?: number
    }
    EmployeeLeaves: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leave?: components['schemas']['EmployeeLeave'][]
    }
    EmployeeLeaveObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leave?: components['schemas']['EmployeeLeave']
    }
    EmployeeLeave: {
      /**
       * Format: uuid
       * @description The Xero identifier for LeaveType
       */
      leaveID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for LeaveType
       */
      leaveTypeID: string
      /** @description The description of the leave  (max length = 50) */
      description: string
      /**
       * Format: date
       * @description Start date of the leave (YYYY-MM-DD)
       */
      startDate: string
      /**
       * Format: date
       * @description End date of the leave (YYYY-MM-DD)
       */
      endDate: string
      /** @description The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits. */
      periods?: components['schemas']['LeavePeriod'][]
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the leave type note
       */
      updatedDateUTC?: string
    }
    LeavePeriods: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      periods?: components['schemas']['LeavePeriod'][]
    }
    LeavePeriod: {
      /**
       * Format: date
       * @description The Pay Period Start Date (YYYY-MM-DD)
       */
      periodStartDate?: string
      /**
       * Format: date
       * @description The Pay Period End Date (YYYY-MM-DD)
       */
      periodEndDate?: string
      /**
       * Format: double
       * @description The Number of Units for the leave
       */
      numberOfUnits?: number
      /**
       * @description Period Status
       * @enum {string}
       */
      periodStatus?: 'Approved' | 'Completed'
    }
    EmployeeLeaveBalances: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveBalances?: components['schemas']['EmployeeLeaveBalance'][]
    }
    EmployeeLeaveBalance: {
      /**
       * @description Name of the leave type.
       * @example Holiday
       */
      name?: string
      /**
       * Format: uuid
       * @description The Xero identifier for leave type
       */
      leaveTypeID?: string
      /**
       * Format: double
       * @description The employees current balance for the corresponding leave type.
       */
      balance?: number
      /**
       * @description The type of the units of the leave.
       * @example hours
       */
      typeOfUnits?: string
    }
    EmployeeStatutoryLeaveBalanceObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveBalance?: components['schemas']['EmployeeStatutoryLeaveBalance']
    }
    EmployeeStatutoryLeaveBalance: {
      /**
       * @description The type of statutory leave
       * @enum {string}
       */
      leaveType?:
        | 'Sick'
        | 'Adoption'
        | 'Maternity'
        | 'Paternity'
        | 'Sharedparental'
      /**
       * Format: double
       * @description The balance remaining for the corresponding leave type as of specified date.
       */
      balanceRemaining?: number
      /**
       * @description The units will be "Hours"
       * @enum {string}
       */
      units?: 'Hours'
    }
    EmployeeStatutoryLeavesSummaries: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryLeaves?: components['schemas']['EmployeeStatutoryLeaveSummary'][]
    }
    EmployeeStatutoryLeaveSummary: {
      /**
       * Format: uuid
       * @description The unique identifier (guid) of a statutory leave.
       */
      statutoryLeaveID?: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the employee
       */
      employeeID?: string
      /**
       * @description The category of statutory leave
       * @enum {string}
       */
      type?: 'Sick' | 'Adoption' | 'Maternity' | 'Paternity' | 'Sharedparental'
      /**
       * Format: date
       * @description The date when the leave starts
       */
      startDate?: string
      /**
       * Format: date
       * @description The date when the leave ends
       */
      endDate?: string
      /** @description Whether the leave was entitled to receive payment */
      isEntitled?: boolean
      /**
       * @description The status of the leave
       * @enum {string}
       */
      status?: 'Pending' | 'In-Progress' | 'Completed'
    }
    EmployeeStatutorySickLeaves: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutorySickLeave?: components['schemas']['EmployeeStatutorySickLeave'][]
    }
    EmployeeStatutorySickLeaveObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutorySickLeave?: components['schemas']['EmployeeStatutorySickLeave']
    }
    EmployeeStatutorySickLeave: {
      /**
       * Format: uuid
       * @description The unique identifier (guid) of a statutory leave
       */
      statutoryLeaveID?: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the employee
       */
      employeeID: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the "Statutory Sick Leave (non-pensionable)" pay item
       */
      leaveTypeID: string
      /**
       * Format: date
       * @description The date when the leave starts
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the leave ends
       */
      endDate: string
      /**
       * @description the type of statutory leave
       * @example Sick
       */
      type?: string
      /**
       * @description the type of statutory leave
       * @example Pending
       */
      status?: string
      /** @description The days of the work week the employee is scheduled to work at the time the leave is taken */
      workPattern: string[]
      /** @description Whether the sick leave was pregnancy related */
      isPregnancyRelated: boolean
      /** @description Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request */
      sufficientNotice: boolean
      /** @description Whether the leave was entitled to receive payment */
      isEntitled?: boolean
      /**
       * Format: double
       * @description The amount of requested time (in weeks)
       */
      entitlementWeeksRequested?: number
      /**
       * Format: double
       * @description The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested
       */
      entitlementWeeksQualified?: number
      /**
       * Format: double
       * @description A calculated amount of time (in weeks) that remains for the statutory sick leave period
       */
      entitlementWeeksRemaining?: number
      /** @description Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave's period. While this is allowed it could affect payment amounts */
      overlapsWithOtherLeave?: boolean
      /** @description If the leave requested was considered "not entitled", the reasons why are listed here. */
      entitlementFailureReasons?: (
        | 'UnableToCalculateAwe'
        | 'AweLowerThanLel'
        | 'NotQualifiedInPreviousPiw'
        | 'ExceededMaximumEntitlementWeeksOfSsp'
        | 'ExceededMaximumDurationOfPiw'
        | 'SufficientNoticeNotGiven'
      )[]
    }
    EmployeeLeaveTypes: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveTypes?: components['schemas']['EmployeeLeaveType'][]
    }
    EmployeeLeaveTypeObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveType?: components['schemas']['EmployeeLeaveType']
    }
    EmployeeLeaveType: {
      /**
       * Format: uuid
       * @description The Xero identifier for leave type
       */
      leaveTypeID: string
      /**
       * @description The schedule of accrual
       * @enum {string}
       */
      scheduleOfAccrual:
        | 'BeginningOfCalendarYear'
        | 'OnAnniversaryDate'
        | 'EachPayPeriod'
        | 'OnHourWorked'
      /**
       * Format: double
       * @description The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is "OnHourWorked"
       */
      hoursAccruedAnnually?: number
      /**
       * Format: double
       * @description The maximum number of hours that can be accrued for the leave
       */
      maximumToAccrue?: number
      /**
       * Format: double
       * @description The initial number of hours assigned when the leave was added to the employee
       */
      openingBalance?: number
      /**
       * Format: double
       * @description The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is "OnHourWorked"
       */
      rateAccruedHourly?: number
    }
    EmployeePayTemplateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payTemplate?: components['schemas']['EmployeePayTemplate']
    }
    EmployeePayTemplates: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningTemplates?: components['schemas']['EarningsTemplates']
    }
    EmployeePayTemplate: {
      /**
       * Format: uuid
       * @description Unique identifier for the employee
       */
      employeeID?: string
      earningTemplates?: components['schemas']['EarningsTemplates']
    }
    EarningsTemplates: components['schemas']['EarningsTemplate'][]
    EarningsTemplateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningTemplate?: components['schemas']['EarningsTemplate']
    }
    EarningsTemplate: {
      /**
       * Format: uuid
       * @description The Xero identifier for the earnings template
       */
      payTemplateEarningID?: string
      /**
       * Format: double
       * @description The rate per unit
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description The rate per unit
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description The fixed amount per period
       */
      fixedAmount?: number
      /**
       * Format: uuid
       * @description The corresponding earnings rate identifier
       */
      earningsRateID?: string
      /** @description The read-only name of the Earning Template. */
      name?: string
    }
    Benefits: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      benefits?: components['schemas']['Benefit'][]
    }
    BenefitObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      benefit?: components['schemas']['Benefit']
    }
    Benefit: {
      /**
       * Format: uuid
       * @description unique identifier in Xero
       */
      id?: string
      /** @description Name of the employer pension */
      name: string
      /**
       * @description Category type of the employer pension
       * @enum {string}
       */
      category: 'StakeholderPension' | 'Other'
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId: string
      /**
       * Format: uuid
       * @description Xero identifier for Expense Account
       */
      expenseAccountId: string
      /**
       * Format: double
       * @description Standard amount of the employer pension
       */
      standardAmount?: number
      /**
       * Format: double
       * @description Percentage of gross of the employer pension
       */
      percentage: number
      /**
       * @description Calculation Type of the employer pension (FixedAmount or PercentageOfGross).
       * @enum {string}
       */
      calculationType: 'FixedAmount' | 'PercentageOfGross'
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
      /** @description Identifier of subject To NIC */
      subjectToNIC?: boolean
      /** @description Identifier of subject To pension */
      subjectToPension?: boolean
      /** @description Identifier of subject To Tax */
      subjectToTax?: boolean
      /** @description Identifier of calculating on qualifying earnings */
      isCalculatingOnQualifyingEarnings?: boolean
      /** @description display the balance to employee */
      showBalanceToEmployee?: boolean
    }
    Deductions: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      deductions?: components['schemas']['Deduction'][]
    }
    DeductionObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      deduction?: components['schemas']['Deduction']
    }
    Deduction: {
      /**
       * Format: uuid
       * @description The Xero identifier for Deduction
       */
      deductionId?: string
      /** @description Name of the deduction */
      deductionName: string
      /**
       * @description Deduction Category type
       * @enum {string}
       */
      deductionCategory?:
        | 'CapitalContributions'
        | 'ChildCareVoucher'
        | 'MakingGood'
        | 'PostgraduateLoanDeductions'
        | 'PrivateUsePayments'
        | 'SalarySacrifice'
        | 'StakeholderPension'
        | 'StakeholderPensionPostTax'
        | 'StudentLoanDeductions'
        | 'UkOther'
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId: string
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
      /**
       * Format: double
       * @description Standard amount of the deduction
       */
      standardAmount?: number
      /** @description Identifier of reduces super liability */
      reducesSuperLiability?: boolean
      /** @description Identifier of reduces tax liability */
      reducesTaxLiability?: boolean
      /**
       * @description determine the calculation type whether fixed amount or percentage of gross
       * @enum {string}
       */
      calculationType?: 'FixedAmount' | 'PercentageOfGross'
      /**
       * Format: double
       * @description Percentage of gross
       */
      percentage?: number
      /** @description Identifier of subject To NIC */
      subjectToNIC?: boolean
      /** @description Identifier of subject To Tax */
      subjectToTax?: boolean
      /** @description Identifier of reduced by basic rate applicable or not */
      isReducedByBasicRate?: boolean
      /** @description Identifier for apply to pension calculations */
      applyToPensionCalculations?: boolean
      /** @description Identifier of calculating on qualifying earnings */
      isCalculatingOnQualifyingEarnings?: boolean
      /** @description Identifier of applicable for pension or not */
      isPension?: boolean
    }
    StatutoryDeductions: components['schemas']['StatutoryDeduction'][]
    StatutoryDeduction: {
      /**
       * Format: uuid
       * @description The Xero identifier for earnings order
       */
      id?: string
      /** @description Name of the earnings order */
      name?: string
      statutoryDeductionCategory?: components['schemas']['StatutoryDeductionCategory']
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId?: string
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
    }
    /**
     * @description Statutory Deduction Category
     * @enum {string}
     */
    StatutoryDeductionCategory:
      | 'AdditionalStudentLoan'
      | 'ChildSupport'
      | 'CourtFines'
      | 'Creditor'
      | 'FederalLevy'
      | 'InlandRevenueArrears'
      | 'KiwiSaver'
      | 'MsdRepayments'
      | 'NonPriorityOrder'
      | 'PriorityOrder'
      | 'TableBased'
      | 'StudentLoan'
      | 'VoluntaryStudentLoan'
      | 'USChildSupport'
    EarningsOrders: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeductions?: components['schemas']['EarningsOrder'][]
    }
    EarningsOrderObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeduction?: components['schemas']['EarningsOrder']
    }
    EarningsOrder: {
      /**
       * Format: uuid
       * @description Xero unique identifier for an earning rate
       */
      id?: string
      /** @description Name of the earning order */
      name: string
      statutoryDeductionCategory?: components['schemas']['StatutoryDeductionCategory']
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId?: string
      /**
       * @description Identifier of a record is active or not.
       * @default true
       */
      currentRecord?: boolean
    }
    EarningsRates: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningsRates?: components['schemas']['EarningsRate'][]
    }
    EarningsRateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningsRate?: components['schemas']['EarningsRate']
    }
    EarningsRate: {
      /**
       * Format: uuid
       * @description Xero unique identifier for an earning rate
       */
      earningsRateID?: string
      /** @description Name of the earning rate */
      name: string
      /**
       * @description Indicates how an employee will be paid when taking this type of earning
       * @enum {string}
       */
      earningsType:
        | 'Allowance'
        | 'BackPay'
        | 'Bonus'
        | 'Commission'
        | 'LumpSum'
        | 'OtherEarnings'
        | 'OvertimeEarnings'
        | 'RegularEarnings'
        | 'StatutoryAdoptionPay'
        | 'StatutoryAdoptionPayNonPensionable'
        | 'StatutoryBereavementPay'
        | 'StatutoryMaternityPay'
        | 'StatutoryMaternityPayNonPensionable'
        | 'StatutoryPaternityPay'
        | 'StatutoryPaternityPayNonPensionable'
        | 'StatutoryParentalBereavementPayNonPensionable'
        | 'StatutorySharedParentalPay'
        | 'StatutorySharedParentalPayNonPensionable'
        | 'StatutorySickPay'
        | 'StatutorySickPayNonPensionable'
        | 'TipsNonDirect'
        | 'TipsDirect'
        | 'TerminationPay'
      /**
       * @description Indicates the type of the earning rate
       * @enum {string}
       */
      rateType: 'RatePerUnit' | 'MultipleOfOrdinaryEarningsRate' | 'FixedAmount'
      /** @description The type of units used to record earnings */
      typeOfUnits: string
      /** @description Indicates whether an earning type is active */
      currentRecord?: boolean
      /**
       * Format: uuid
       * @description The account that will be used for the earnings rate
       */
      expenseAccountID: string
      /**
       * Format: double
       * @description Default rate per unit (optional). Only applicable if RateType is RatePerUnit
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
       */
      multipleOfOrdinaryEarningsRate?: number
      /**
       * Format: double
       * @description Optional Fixed Rate Amount. Applicable for FixedAmount Rate
       */
      fixedAmount?: number
    }
    LeaveTypes: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveTypes?: components['schemas']['LeaveType'][]
    }
    LeaveTypeObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveType?: components['schemas']['LeaveType']
    }
    LeaveType: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the leave
       */
      leaveID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the leave type
       */
      leaveTypeID?: string
      /** @description Name of the leave type */
      name: string
      /** @description Indicate that an employee will be paid when taking this type of leave */
      isPaidLeave: boolean
      /** @description Indicate that a balance for this leave type to be shown on the employee’s payslips */
      showOnPayslip: boolean
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the leave type note
       */
      updatedDateUTC?: string
      /** @description Shows whether the leave type is active or not */
      isActive?: boolean
      /** @description Shows whether the leave type is a statutory leave type or not */
      isStatutoryLeave?: boolean
    }
    Reimbursements: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      reimbursements?: components['schemas']['Reimbursement'][]
    }
    ReimbursementObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      reimbursement?: components['schemas']['Reimbursement']
    }
    Reimbursement: {
      /**
       * Format: uuid
       * @description Xero unique identifier for a reimbursement
       */
      reimbursementID?: string
      /** @description Name of the reimbursement */
      name: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the account used for the reimbursement
       */
      accountID: string
      /** @description Indicates that whether the reimbursement is active */
      currentRecord?: boolean
    }
    Timesheets: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheets?: components['schemas']['Timesheet'][]
    }
    TimesheetObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheet?: components['schemas']['Timesheet']
    }
    Timesheet: {
      /**
       * Format: uuid
       * @description The Xero identifier for a Timesheet
       */
      timesheetID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Payroll Calendar that the Timesheet applies to
       */
      payrollCalendarID: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Employee that the Timesheet is for
       */
      employeeID: string
      /**
       * Format: date
       * @description The Start Date of the Timesheet period (YYYY-MM-DD)
       */
      startDate: string
      /**
       * Format: date
       * @description The End Date of the Timesheet period (YYYY-MM-DD)
       */
      endDate: string
      /**
       * @description Status of the timesheet
       * @enum {string}
       */
      status?: 'Draft' | 'Approved' | 'Completed'
      /**
       * Format: double
       * @description The Total Hours of the Timesheet
       */
      totalHours?: number
      /**
       * Format: date-time
       * @description The UTC date time that the Timesheet was last updated
       */
      updatedDateUTC?: string
      timesheetLines?: components['schemas']['TimesheetLines']
    }
    TimesheetLines: components['schemas']['TimesheetLine'][]
    TimesheetLineObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheetLine?: components['schemas']['TimesheetLine']
    }
    TimesheetLine: {
      /**
       * Format: uuid
       * @description The Xero identifier for a Timesheet Line
       */
      timesheetLineID?: string
      /**
       * Format: date
       * @description The Date that this Timesheet Line is for (YYYY-MM-DD)
       */
      date: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Earnings Rate that the Timesheet is for
       */
      earningsRateID: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Tracking Item that the Timesheet is for
       */
      trackingItemID?: string
      /**
       * Format: double
       * @description The Number of Units of the Timesheet Line
       */
      numberOfUnits: number
    }
    PayRunCalendars: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRunCalendars?: components['schemas']['PayRunCalendar'][]
    }
    PayRunCalendarObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRunCalendar?: components['schemas']['PayRunCalendar']
    }
    PayRunCalendar: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar
       */
      payrollCalendarID?: string
      /** @description Name of the calendar */
      name: string
      /**
       * @description Type of the calendar
       * @enum {string}
       */
      calendarType:
        | 'Weekly'
        | 'Fortnightly'
        | 'FourWeekly'
        | 'Monthly'
        | 'Annual'
        | 'Quarterly'
      /**
       * Format: date
       * @description Period start date of the calendar
       */
      periodStartDate: string
      /**
       * Format: date
       * @description Period end date of the calendar
       */
      periodEndDate?: string
      /**
       * Format: date
       * @description Payment date of the calendar
       */
      paymentDate: string
      /**
       * Format: date-time
       * @description UTC timestamp of the last update to the pay run calendar
       */
      updatedDateUTC?: string
    }
    PaymentMethodObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paymentMethod?: components['schemas']['PaymentMethod']
    }
    PaymentMethod: {
      /**
       * @description The payment method code
       * @enum {string}
       */
      paymentMethod: 'Cheque' | 'Electronically' | 'Manual'
      bankAccounts?: components['schemas']['BankAccount'][]
    }
    SalaryAndWages: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      salaryAndWages?: components['schemas']['SalaryAndWage'][]
    }
    SalaryAndWageObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      salaryAndWages?: components['schemas']['SalaryAndWage']
    }
    SalaryAndWage: {
      /**
       * Format: uuid
       * @description Xero unique identifier for a salary and wages record
       */
      salaryAndWagesID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for an earnings rate
       */
      earningsRateID: string
      /**
       * Format: double
       * @description The Number of Units per week for the corresponding salary and wages
       */
      numberOfUnitsPerWeek: number
      /**
       * Format: double
       * @description The rate of each unit for the corresponding salary and wages
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description The Number of Units per day for the corresponding salary and wages
       */
      numberOfUnitsPerDay?: number
      /**
       * Format: date
       * @description The effective date of the corresponding salary and wages
       */
      effectiveFrom: string
      /**
       * Format: double
       * @description The annual salary
       */
      annualSalary: number
      /**
       * @description The current status of the corresponding salary and wages
       * @enum {string}
       */
      status: 'Active' | 'Pending' | 'History'
      /**
       * @description The type of the payment of the corresponding salary and wages
       * @enum {string}
       */
      paymentType: 'Salary' | 'Hourly'
    }
    PayRuns: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRuns?: components['schemas']['PayRun'][]
    }
    PayRunObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRun?: components['schemas']['PayRun']
    }
    PayRun: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the pay run
       */
      payRunID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar
       */
      payrollCalendarID?: string
      /**
       * Format: date
       * @description Period start date of the payroll calendar
       */
      periodStartDate?: string
      /**
       * Format: date
       * @description Period end date of the payroll calendar
       */
      periodEndDate?: string
      /**
       * Format: date
       * @description Payment date of the pay run
       */
      paymentDate?: string
      /**
       * Format: double
       * @description Total cost of the pay run
       */
      totalCost?: number
      /**
       * Format: double
       * @description Total pay of the pay run
       */
      totalPay?: number
      /**
       * @description Pay run status
       * @enum {string}
       */
      payRunStatus?: 'Draft' | 'Posted'
      /**
       * @description Pay run type
       * @enum {string}
       */
      payRunType?: 'Scheduled' | 'Unscheduled' | 'EarlierYearUpdate'
      /**
       * @description Calendar type of the pay run
       * @enum {string}
       */
      calendarType?:
        | 'Weekly'
        | 'Fortnightly'
        | 'FourWeekly'
        | 'Monthly'
        | 'Annual'
        | 'Quarterly'
      /**
       * Format: date
       * @description Posted date time of the pay run
       */
      postedDateTime?: string
      paySlips?: components['schemas']['Payslip'][]
    }
    PayslipObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paySlip?: components['schemas']['Payslip']
    }
    Payslips: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paySlips?: components['schemas']['Payslip'][]
    }
    Payslip: {
      /**
       * Format: uuid
       * @description The Xero identifier for a Payslip
       */
      paySlipID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for payroll employee
       */
      employeeID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for the associated payrun
       */
      payRunID?: string
      /**
       * Format: date
       * @description The date payslip was last updated
       */
      lastEdited?: string
      /** @description Employee first name */
      firstName?: string
      /** @description Employee last name */
      lastName?: string
      /**
       * Format: double
       * @description Total earnings before any deductions. Same as gross earnings for UK.
       */
      totalEarnings?: number
      /**
       * Format: double
       * @description Total earnings before any deductions. Same as total earnings for UK.
       */
      grossEarnings?: number
      /**
       * Format: double
       * @description The employee net pay
       */
      totalPay?: number
      /**
       * Format: double
       * @description The employer's tax obligation
       */
      totalEmployerTaxes?: number
      /**
       * Format: double
       * @description The part of an employee's earnings that is deducted for tax purposes
       */
      totalEmployeeTaxes?: number
      /**
       * Format: double
       * @description Total amount subtracted from an employee's earnings to reach total pay
       */
      totalDeductions?: number
      /**
       * Format: double
       * @description Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
       */
      totalReimbursements?: number
      /**
       * Format: double
       * @description Total amounts required by law to subtract from the employee's earnings
       */
      totalCourtOrders?: number
      /**
       * Format: double
       * @description Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
       */
      totalBenefits?: number
      /** @description BACS Service User Number */
      bacsHash?: string
      /**
       * @description The payment method code
       * @enum {string}
       */
      paymentMethod?: 'Cheque' | 'Electronically' | 'Manual'
      earningsLines?: components['schemas']['EarningsLines']
      leaveEarningsLines?: components['schemas']['LeaveEarningsLines']
      timesheetEarningsLines?: components['schemas']['TimesheetEarningsLines']
      deductionLines?: components['schemas']['DeductionLines']
      reimbursementLines?: components['schemas']['ReimbursementLines']
      leaveAccrualLines?: components['schemas']['LeaveAccrualLines']
      benefitLines?: components['schemas']['BenefitLines']
      paymentLines?: components['schemas']['PaymentLines']
      employeeTaxLines?: components['schemas']['TaxLines']
      employerTaxLines?: components['schemas']['TaxLines']
      courtOrderLines?: components['schemas']['CourtOrderLines']
    }
    EarningsLines: components['schemas']['EarningsLine'][]
    EarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings line
       */
      earningsLineID?: string
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings rate
       */
      earningsRateID?: string
      /** @description name of earnings rate for display in UI */
      displayName?: string
      /**
       * Format: double
       * @description Rate per unit for earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the earnings line.
       */
      amount?: number
      /** @description Identifies if the earnings is taken from the timesheet. False for earnings line */
      isLinkedToTimesheet?: boolean
      /** @description Identifies if the earnings is using an average daily pay rate */
      isAverageDailyPayRate?: boolean
    }
    LeaveEarningsLines: components['schemas']['LeaveEarningsLine'][]
    LeaveEarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll leave earnings rate
       */
      earningsRateID?: string
      /**
       * Format: double
       * @description Rate per unit for leave earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Leave earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the earnings line.
       */
      amount?: number
      /** @description Identifies if the leave earnings is taken from the timesheet. False for leave earnings line */
      isLinkedToTimesheet?: boolean
    }
    TimesheetEarningsLines: components['schemas']['TimesheetEarningsLine'][]
    TimesheetEarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll timesheet earnings rate
       */
      earningsRateID?: string
      /**
       * Format: double
       * @description Rate per unit for timesheet earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Timesheet earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Timesheet earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the timesheet earnings line.
       */
      amount?: number
      /** @description Identifies if the timesheet earnings is taken from the timesheet. False for leave earnings line */
      isLinkedToTimesheet?: boolean
    }
    DeductionLines: components['schemas']['DeductionLine'][]
    DeductionLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll deduction
       */
      deductionTypeID?: string
      /**
       * Format: double
       * @description The amount of the deduction line
       */
      amount?: number
      /** @description Identifies if the deduction is subject to tax */
      subjectToTax?: boolean
      /**
       * Format: double
       * @description Deduction rate percentage
       */
      percentage?: number
    }
    ReimbursementLines: components['schemas']['ReimbursementLine'][]
    ReimbursementLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll reimbursement
       */
      reimbursementTypeID?: string
      /** @description Reimbursement line description */
      description?: string
      /**
       * Format: double
       * @description Reimbursement amount
       */
      amount?: number
    }
    LeaveAccrualLines: components['schemas']['LeaveAccrualLine'][]
    LeaveAccrualLine: {
      /**
       * Format: uuid
       * @description Xero identifier for the Leave type
       */
      leaveTypeID?: string
      /**
       * Format: double
       * @description Leave accrual number of units
       */
      numberOfUnits?: number
    }
    BenefitLines: components['schemas']['BenefitLine'][]
    BenefitLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll benefit type
       */
      benefitTypeID?: string
      /** @description Benefit display name */
      displayName?: string
      /**
       * Format: double
       * @description The amount of the benefit line.
       */
      amount?: number
      /**
       * Format: double
       * @description Benefit fixed amount
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description Benefit rate percentage
       */
      percentage?: number
    }
    PaymentLines: components['schemas']['PaymentLine'][]
    PaymentLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll payment line
       */
      paymentLineID?: string
      /**
       * Format: double
       * @description The amount of the payment line
       */
      amount?: number
      /** @description The account number */
      accountNumber?: string
      /** @description The account sort code */
      sortCode?: string
      /** @description The account name */
      accountName?: string
    }
    TaxLines: components['schemas']['TaxLine'][]
    TaxLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll tax line
       */
      taxLineID?: string
      /** @description Tax line description */
      description?: string
      /** @description Identifies if the amount is paid for by the employee or employer. True if employer pays the tax */
      isEmployerTax?: boolean
      /**
       * Format: double
       * @description The amount of the tax line
       */
      amount?: number
      /** @description Tax type ID */
      globalTaxTypeID?: string
      /** @description Identifies if the tax line is a manual adjustment */
      manualAdjustment?: boolean
    }
    CourtOrderLines: components['schemas']['CourtOrderLine'][]
    CourtOrderLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll court order type
       */
      courtOrderTypeID?: string
      /**
       * Format: double
       * @description Amount
       */
      amount?: number
    }
    Settings: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      settings?: components['schemas']['Accounts']
    }
    Accounts: {
      accounts?: components['schemas']['Account'][]
    }
    Account: {
      /**
       * Format: uuid
       * @description The Xero identifier for Settings.
       */
      accountID?: string
      /**
       * @description The assigned AccountType
       * @enum {string}
       */
      type?:
        | 'BANK'
        | 'EMPLOYERSNIC'
        | 'NICLIABILITY'
        | 'PAYEECONTRIBUTION'
        | 'PAYELIABILITY'
        | 'WAGESPAYABLE'
        | 'WAGESEXPENSE'
      /** @description A unique 3 digit number for each Account */
      code?: string
      /** @description Name of the Account. */
      name?: string
    }
    Address: {
      /**
       * @description Address line 1 for employee home address
       * @example 123 Main St
       */
      addressLine1: string
      /**
       * @description Address line 2 for employee home address
       * @example Apt 4
       */
      addressLine2?: string
      /**
       * @description Suburb for employee home address
       * @example Fulham
       */
      city: string
      /**
       * @description PostCode for employee home address
       * @example SW6 6EY
       */
      postCode: string
      /**
       * @description Country of HomeAddress
       * @example United Kingdom
       */
      countryName?: string
    }
    BankAccounts: components['schemas']['BankAccount'][]
    BankAccount: {
      /** @description Bank account name (max length = 32) */
      accountName: string
      /** @description Bank account number (digits only; max length = 8) */
      accountNumber: string
      /** @description Bank account sort code (6 digits) */
      sortCode: string
    }
    TrackingCategories: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      trackingCategories?: components['schemas']['TrackingCategory']
    }
    TrackingCategory: {
      /**
       * Format: uuid
       * @description The Xero identifier for Employee groups tracking category.
       */
      employeeGroupsTrackingCategoryID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for Timesheet tracking category.
       */
      timesheetTrackingCategoryID?: string
    }
  }
  responses: never
  parameters: {
    /** @description Xero identifier for Tenant */
    requiredHeader?: string
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Retrieves employees */
  getEmployees: {
    parameters: {
      query?: {
        /**
         * @description Filter by first name, lastname, and/or whether they are an off-payroll worker
         * @example firstName==John,lastName==Smith,isOffPayrollWorker==false
         */
        filter?: string
        /**
         * @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
         * @example 5
         */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates employees */
  createEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "title":"Mr", "firstName":"Mike", "lastName":"Fancy", "dateOfBirth":"1999-01-01T00:00:00", "gender":"M", "email":"mike@starkindustries.com", "isOffPayrollWorker": false, "address": { "addressLine1": "171 Midsummer", "city": "Milton Keyness", "postCode": "MK9 1EB" } } */
        'application/json': components['schemas']['Employee']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves specific employees by using a unique employee ID */
  getEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
    }
  }
  /** Updates a specific employee's detail */
  updateEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "title": "Mr.", "firstName": "TestDataUK", "lastName": "Tester", "dateOfBirth": "1992-11-22T00:00:00", "gender": "M", "email": "tester@gmail.com", "phoneNumber": "0400123456", "isOffPayrollWorker": false, "address": { "addressLine1": "171 Midsummer", "city": "Milton Keyness", "postCode": "MK9 1EB" } } */
        'application/json': components['schemas']['Employee']
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates employment detail for a specific employee using a unique employee ID */
  createEmployment: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "PayrollCalendarID": "216d80e6-af55-47b1-b718-9457c3f5d2fe", "StartDate": "2020-04-01", "EmployeeNumber": "123ABC", "NICategory": "A" } */
        'application/json': components['schemas']['Employment']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmploymentObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves tax records for a specific employee using a unique employee ID */
  getEmployeeTax: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeTaxObject']
        }
      }
    }
  }
  /** Retrieves a specific employee's openingbalances using a unique employee ID */
  getEmployeeOpeningBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeOpeningBalancesObject']
        }
      }
    }
  }
  /** Updates a specific employee's opening balances */
  updateEmployeeOpeningBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "statutoryAdoptionPay": 20, "statutoryMaternityPay": 20, "statutoryPaternityPay": 20, "statutorySharedParentalPay": 20, "statutorySickPay": 20, "priorEmployeeNumber": 20 } */
        'application/json': components['schemas']['EmployeeOpeningBalances']
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeOpeningBalancesObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an opening balance for a specific employee */
  createEmployeeOpeningBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "statutoryAdoptionPay": 10, "statutoryMaternityPay": 10, "statutoryPaternityPay": 10, "statutorySharedParentalPay": 10, "statutorySickPay": 10, "priorEmployeeNumber": 10 } */
        'application/json': components['schemas']['EmployeeOpeningBalances']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeOpeningBalancesObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave records using a unique employee ID */
  getEmployeeLeaves: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaves']
        }
      }
    }
  }
  /** Creates leave records for a specific employee */
  createEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "1d2778ee-86ea-45c0-bbf8-1045485f6b3f", "description": "Creating a Description", "startDate": "2020-03-24", "endDate": "2020-03-26" } */
        'application/json': components['schemas']['EmployeeLeave']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave record using a unique employee ID */
  getEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Leave id for single object */
        LeaveID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
    }
  }
  /** Updates a specific employee's leave records */
  updateEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Leave id for single object */
        LeaveID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "ed08dffe-788e-4b24-9630-f0fa2f4d164c", "description": "Creating a Description", "startDate": "2020-04-24", "endDate": "2020-04-26", "periods": [ { "periodStartDate": "2020-04-20", "periodEndDate": "2020-04-26", "numberOfUnits": 1, "periodStatus": "Approved" } ] } */
        'application/json': components['schemas']['EmployeeLeave']
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a specific employee's leave record */
  deleteEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Leave id for single object */
        LeaveID: string
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave balances using a unique employee ID */
  getEmployeeLeaveBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveBalances']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave balances using a unique employee ID */
  getEmployeeStatutoryLeaveBalances: {
    parameters: {
      query?: {
        /**
         * @description Filter by the type of statutory leave
         * @example sick
         */
        LeaveType?: string
        /** @description The date from which to calculate balance remaining. If not specified, current date UTC is used. */
        AsOfDate?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeStatutoryLeaveBalanceObject']
        }
      }
    }
  }
  /** Retrieves a specific employee's summary of statutory leaves using a unique employee ID */
  getStatutoryLeaveSummary: {
    parameters: {
      query?: {
        /** @description Filter response with leaves that are currently active or yet to be taken. If not specified, all leaves (past, current, and future scheduled) are returned */
        activeOnly?: boolean
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeStatutoryLeavesSummaries']
        }
      }
    }
  }
  /** Creates statutory sick leave records */
  createEmployeeStatutorySickLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "employeeID": "aad6b292-7b94-408b-93f6-e489867e3fb0", "leaveTypeID": "aab78802-e9d3-4bbd-bc87-df858054988f", "startDate": "2020-04-21", "endDate": "2020-04-24", "workPattern": [ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" ], "isPregnancyRelated": false, "sufficientNotice": true } */
        'application/json': components['schemas']['EmployeeStatutorySickLeave']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeStatutorySickLeaveObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a statutory sick leave for an employee */
  getEmployeeStatutorySickLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Statutory sick leave id for single object */
        StatutorySickLeaveID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeStatutorySickLeaveObject']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave periods using a unique employee ID */
  getEmployeeLeavePeriods: {
    parameters: {
      query?: {
        /** @description Filter by start date */
        startDate?: string
        /** @description Filter by end date */
        endDate?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeavePeriods']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific employee's leave types using a unique employee ID */
  getEmployeeLeaveTypes: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveTypes']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates employee leave type records */
  createEmployeeLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "4918f233-bd31-43f9-9633-bcc6de1178f2", "scheduleOfAccrual": "BeginningOfCalendarYear", "hoursAccruedAnnually": 10 } */
        'application/json': components['schemas']['EmployeeLeaveType']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveTypeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific employee's payment method using a unique employee ID */
  getEmployeePaymentMethod: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaymentMethodObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an employee payment method */
  createEmployeePaymentMethod: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "paymentMethod": "Electronically", "bankAccounts": [ { "accountName": "Sid BofA", "accountNumber": "24987654", "sortCode": "287654" } ] } */
        'application/json': components['schemas']['PaymentMethod']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaymentMethodObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific employee pay templates using a unique employee ID */
  getEmployeePayTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeePayTemplateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an earnings template records for a specific employee */
  createEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EarningsTemplate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsTemplateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Updates a specific employee's earnings template records */
  updateEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        PayTemplateEarningID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "ratePerUnit": 30, "numberOfUnits": 4, "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27" } */
        'application/json': components['schemas']['EarningsTemplate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsTemplateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a specific employee's earnings template record */
  deleteEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        PayTemplateEarningID: string
      }
    }
    responses: {
      /** @description deletion successful */
      200: {
        content: never
      }
    }
  }
  /** Creates multiple earnings template records for a specific employee using a unique employee ID */
  createMultipleEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example [ { "ratePerUnit":20.0, "numberOfUnits":8.0, "earningsRateID":"87f5b43a-cf51-4b74-92de-94c819e82d27" }, { "ratePerUnit":20.0, "numberOfUnits":8.0, "earningsRateID":"973365f3-66b2-4c33-8ae6-14b75f78f68b" } ] */
        'application/json': components['schemas']['EarningsTemplates']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeePayTemplates']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves employee benefits */
  getBenefits: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Benefits']
        }
      }
    }
  }
  /** Creates a new employee benefit */
  createBenefit: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My Big Bennie", "category": "StakeholderPension", "liabilityAccountId": "e0faa299-ca0d-4b0a-9e32-0dfabdf9179a", "expenseAccountId": "4b03500d-32fd-4616-8d70-e1e56e0519c6", "standardAmount": 50, "percentage": 25, "calculationType": "PercentageOfGross" } */
        'application/json': components['schemas']['Benefit']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['BenefitObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific benefit by using a unique benefit ID */
  getBenefit: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the benefit */
        id: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['BenefitObject']
        }
      }
    }
  }
  /** Retrieves deductions */
  getDeductions: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Deductions']
        }
      }
    }
  }
  /** Creates a new deduction */
  createDeduction: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "deductionName": "My new deduction", "deductionCategory": "SalarySacrifice", "liabilityAccountId": "e0faa299-ca0d-4b0a-9e32-0dfabdf9179a", "calculationType": "FixedAmount" } */
        'application/json': components['schemas']['Deduction']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['DeductionObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific deduction by using a unique deduction ID */
  getDeduction: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the deduction */
        deductionId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['DeductionObject']
        }
      }
    }
  }
  /** Retrieves earnings orders */
  getEarningsOrders: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsOrders']
        }
      }
    }
  }
  /** Retrieves a specific earnings orders by using a unique earnings orders id */
  getEarningsOrder: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the deduction */
        id: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsOrderObject']
        }
      }
    }
  }
  /** Retrieves earnings rates */
  getEarningsRates: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRates']
        }
      }
    }
  }
  /** Creates a new earnings rate */
  createEarningsRate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My Earnings Rate", "earningsType": "RegularEarnings", "rateType": "RatePerUnit", "typeOfUnits": "hours", "expenseAccountID": "4b03500d-32fd-4616-8d70-e1e56e0519c6" } */
        'application/json': components['schemas']['EarningsRate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific earnings rates by using a unique earnings rate id */
  getEarningsRate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the earnings rate */
        EarningsRateID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRateObject']
        }
      }
    }
  }
  /** Retrieves leave types */
  getLeaveTypes: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /** @description Filters leave types by active status. By default the API returns all leave types. */
        ActiveOnly?: boolean
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypes']
        }
      }
    }
  }
  /** Creates a new leave type */
  createLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My opebvwbfxf Leave", "isPaidLeave": false, "showOnPayslip": true } */
        'application/json': components['schemas']['LeaveType']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific leave type by using a unique leave type ID */
  getLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the leave type */
        LeaveTypeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypeObject']
        }
      }
    }
  }
  /** Retrieves reimbursements */
  getReimbursements: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Reimbursements']
        }
      }
    }
  }
  /** Creates a new reimbursement */
  createReimbursement: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My new Reimburse", "accountID": "9ee28149-32a9-4661-8eab-a28738696983" } */
        'application/json': components['schemas']['Reimbursement']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['ReimbursementObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific reimbursement by using a unique reimbursement id */
  getReimbursement: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the reimbursement */
        ReimbursementID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['ReimbursementObject']
        }
      }
    }
  }
  /** Retrieves timesheets */
  getTimesheets: {
    parameters: {
      query?: {
        /**
         * @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
         * @example 5
         */
        page?: number
        /**
         * @description Filter by employeeId and/or payrollCalendarId
         * @example employeeId==00000000-0000-0000-0000-000000000000,payrollCalendarId==00000000-0000-0000-0000-000000000000
         */
        filter?: string
        /**
         * @description filter results by any timesheets with a matching timesheet status
         * @example Draft
         */
        status?: string
        /**
         * @description filter results by any timesheets with a startDate on or after the provided date
         * @example 2019-01-02
         */
        startDate?: string
        /**
         * @description filter results by any timesheets with a endDate on or before the provided date
         * @example 2020-01-02
         */
        endDate?: string
        /**
         * @description sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest.
         * @example startDate
         */
        sort?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Timesheets']
        }
      }
    }
  }
  /** Creates a new timesheet */
  createTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "payrollCalendarID": "216d80e6-af55-47b1-b718-9457c3f5d2fe", "employeeID": "aad6b292-7b94-408b-93f6-e489867e3fb0", "startDate": "2020-04-13", "endDate": "2020-04-19", "timesheetLines": [ { "date": "2020-04-13", "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnits": 8 }, { "date": "2020-04-15", "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnits": 6 } ] } */
        'application/json': components['schemas']['Timesheet']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieve a specific timesheet by using a unique timesheet ID */
  getTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
    }
  }
  /** Deletes a specific timesheet */
  deleteTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLine']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates a new timesheet line for a specific timesheet using a unique timesheet ID */
  createTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "date": "2020-04-14", "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnits": 1 } */
        'application/json': components['schemas']['TimesheetLine']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLineObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Approves a specific timesheet */
  approveTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Reverts a specific timesheet to draft */
  revertTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Updates a specific timesheet line for a specific timesheet */
  updateTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
        /** @description Identifier for the timesheet line */
        TimesheetLineID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "date": "2020-04-14", "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnits": 2 } */
        'application/json': components['schemas']['TimesheetLine']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLineObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a specific timesheet line */
  deleteTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
        /** @description Identifier for the timesheet line */
        TimesheetLineID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLine']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves payrun calendars */
  getPayRunCalendars: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendars']
        }
      }
    }
  }
  /** Creates a new payrun calendar */
  createPayRunCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My Weekly Cal", "calendarType": "Weekly", "periodStartDate": "2020-05-01", "paymentDate": "2020-05-15" } */
        'application/json': components['schemas']['PayRunCalendar']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendarObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific payrun calendar by using a unique payrun calendar ID */
  getPayRunCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the payrun calendars */
        PayRunCalendarID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendarObject']
        }
      }
    }
  }
  /** Retrieves a specific employee's salary and wages by using a unique employee ID */
  getEmployeeSalaryAndWages: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWages']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates a salary and wage record for a specific employee */
  createEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnitsPerWeek": 2, "ratePerUnit": 10, "numberOfUnitsPerDay": 2, "effectiveFrom": "2020-05-01", "annualSalary": 100, "status": "ACTIVE", "paymentType": "Salary" } */
        'application/json': components['schemas']['SalaryAndWage']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWageObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific salary and wages record for a specific employee using a unique salary and wage id */
  getEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        SalaryAndWagesID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWages']
        }
      }
    }
  }
  /** Updates salary and wages record for a specific employee */
  updateEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        SalaryAndWagesID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "earningsRateID": "87f5b43a-cf51-4b74-92de-94c819e82d27", "numberOfUnitsPerWeek": 3, "ratePerUnit": 11, "effectiveFrom": "2020-05-15", "annualSalary": 101, "status": "ACTIVE", "paymentType": "Salary" } */
        'application/json': components['schemas']['SalaryAndWage']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWageObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a salary and wages record for a specific employee */
  deleteEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single salary and wages object */
        SalaryAndWagesID: string
      }
    }
    responses: {
      /** @description deletion successful */
      200: {
        content: never
      }
    }
  }
  /** Retrieves pay runs */
  getPayRuns: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /** @description By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu={PayRunStatus} to filter the payruns by status. */
        status?: 'Draft' | 'Posted'
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
    }
  }
  /** Retrieves a specific pay run by using a unique pay run ID */
  getPayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the pay run */
        PayRunID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunObject']
        }
      }
    }
  }
  /** Updates a specific pay run */
  updatePayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the pay run */
        PayRunID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "paymentDate": "2020-05-01" } */
        'application/json': components['schemas']['PayRun']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves payslips */
  getPaySlips: {
    parameters: {
      query: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /** @description PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun. */
        PayRunID: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Payslips']
        }
      }
    }
  }
  /** Retrieves a specific payslip by using a unique payslip ID */
  getPaySlip: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the payslip */
        PayslipID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayslipObject']
        }
      }
    }
  }
  /** Retrieves payroll settings */
  getSettings: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Settings']
        }
      }
    }
  }
  /** Retrieves tracking categories */
  getTrackingCategories: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TrackingCategories']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
