/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/Employees': {
    /** Retrieves employees */
    get: operations['getEmployees']
    /** Creates an employees */
    post: operations['createEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}': {
    /** Retrieves an employees using a unique employee ID */
    get: operations['getEmployee']
    /** Updates an existing employee */
    put: operations['updateEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Employment': {
    /** Creates an employment detail for a specific employee */
    post: operations['createEmployment']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Tax': {
    /** Retrieves tax records for a specific employee */
    get: operations['getEmployeeTax']
    /** Updates the tax records for a specific employee */
    post: operations['updateEmployeeTax']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/openingBalances': {
    /** Retrieves the opening balance for a specific employee */
    get: operations['getEmployeeOpeningBalances']
    /** Creates opening balances for a specific employee */
    post: operations['createEmployeeOpeningBalances']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Leave': {
    /** Retrieves leave records for a specific employee */
    get: operations['getEmployeeLeaves']
    /** Creates leave records for a specific employee */
    post: operations['createEmployeeLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/Leave/{LeaveID}': {
    /** Updates leave records for a specific employee */
    put: operations['updateEmployeeLeave']
    /** Deletes a leave record for a specific employee */
    delete: operations['deleteEmployeeLeave']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeaveBalances': {
    /** Retrieves leave balances for a specific employee */
    get: operations['getEmployeeLeaveBalances']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeavePeriods': {
    /** Retrieves leave periods for a specific employee */
    get: operations['getEmployeeLeavePeriods']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/leaveSetup': {
    /** Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee */
    post: operations['createEmployeeLeaveSetup']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/LeaveTypes': {
    /** Retrieves leave types for a specific employee */
    get: operations['getEmployeeLeaveTypes']
    /** Creates leave type records for a specific employee */
    post: operations['createEmployeeLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PaymentMethods': {
    /** Retrieves available payment methods for a specific employee */
    get: operations['getEmployeePaymentMethod']
    /** Creates a payment method for an employee */
    post: operations['createEmployeePaymentMethod']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates': {
    /** Retrieves pay templates for a specific employee */
    get: operations['getEmployeePayTemplates']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates/earnings': {
    /** Creates earnings template records for an employee */
    post: operations['createEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/PayTemplates/earnings/{PayTemplateEarningID}': {
    /** Updates an earnings template records for an employee */
    put: operations['updateEmployeeEarningsTemplate']
    /** Deletes an employee's earnings template record */
    delete: operations['deleteEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/paytemplateearnings': {
    /** Creates multiple employee earnings template records for a specific employee */
    post: operations['createMultipleEmployeeEarningsTemplate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Deductions': {
    /** Retrieves deductions for a specific employee */
    get: operations['getDeductions']
    /** Creates a new deduction for a specific employee */
    post: operations['createDeduction']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Deductions/{deductionId}': {
    /** Retrieves a single deduction by using a unique deduction ID */
    get: operations['getDeduction']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/StatutoryDeductions': {
    /** Retrieves statutory deductions */
    get: operations['getStatutoryDeductions']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/StatutoryDeductions/{id}': {
    /** Retrieves a specific statutory deduction by using a unique statutory deductions id */
    get: operations['getStatutoryDeduction']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Superannuations': {
    /** Retrieves superannuations */
    get: operations['getSuperannuations']
    /** Creates a new superannuation */
    post: operations['createSuperannuation']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Superannuations/{SuperannuationID}': {
    /** Retrieves a specific superannuation using a unique superannuation ID */
    get: operations['getSuperannuation']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsRates': {
    /** Retrieves earnings rates */
    get: operations['getEarningsRates']
    /** Creates a new earnings rate */
    post: operations['createEarningsRate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/EarningsRates/{EarningsRateID}': {
    /** Retrieves a specific earnings rates by using a unique earnings rate id */
    get: operations['getEarningsRate']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveTypes': {
    /** Retrieves leave types */
    get: operations['getLeaveTypes']
    /** Creates a new leave type */
    post: operations['createLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveTypes/{LeaveTypeID}': {
    /** Retrieves a specific leave type by using a unique leave type ID */
    get: operations['getLeaveType']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Reimbursements': {
    /** Retrieves reimbursements */
    get: operations['getReimbursements']
    /** Creates a new reimbursement */
    post: operations['createReimbursement']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Reimbursements/{ReimbursementID}': {
    /** Retrieves a specific reimbursement by using a unique reimbursement ID */
    get: operations['getReimbursement']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets': {
    /** Retrieves timesheets */
    get: operations['getTimesheets']
    /** Creates a new timesheet */
    post: operations['createTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}': {
    /** Retrieves a specific timesheet by using a unique timesheet ID */
    get: operations['getTimesheet']
    /** Deletes a timesheet */
    delete: operations['deleteTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Lines': {
    /** Create a new timesheet line for a specific time sheet */
    post: operations['createTimesheetLine']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Approve': {
    /** Approves a timesheet */
    post: operations['approveTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/RevertToDraft': {
    /** Reverts a timesheet to draft */
    post: operations['revertTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}/Lines/{TimesheetLineID}': {
    /** Updates a timesheet line for a specific timesheet */
    put: operations['updateTimesheetLine']
    /** Deletes a timesheet line for a specific timesheet */
    delete: operations['deleteTimesheetLine']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRunCalendars': {
    /** Retrieves payrun calendars */
    get: operations['getPayRunCalendars']
    /** Creates a new payrun calendar */
    post: operations['createPayRunCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRunCalendars/{PayrollCalendarID}': {
    /** Retrieves a specific payrun calendar by using a unique payroll calendar ID */
    get: operations['getPayRunCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/SalaryAndWages': {
    /** Retrieves an employee's salary and wages */
    get: operations['getEmployeeSalaryAndWages']
    /** Creates an employee salary and wage record */
    post: operations['createEmployeeSalaryAndWage']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}/SalaryAndWages/{SalaryAndWagesID}': {
    /** Retrieves an employee's salary and wages record by using a unique salary and wage ID */
    get: operations['getEmployeeSalaryAndWage']
    /** Updates an employee's salary and wages record */
    put: operations['updateEmployeeSalaryAndWage']
    /** Deletes an employee's salary and wages record */
    delete: operations['deleteEmployeeSalaryAndWage']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns': {
    /** Retrieves pay runs */
    get: operations['getPayRuns']
    /** Creates a pay run */
    post: operations['createPayRun']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns/{PayRunID}': {
    /** Retrieves a specific pay run by using a unique pay run ID */
    get: operations['getPayRun']
    /** Updates a pay run */
    put: operations['updatePayRun']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PaySlips': {
    /** Retrieves payslips */
    get: operations['getPaySlips']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PaySlips/{PaySlipID}': {
    /** Retrieves a specific payslip by a unique pay slip ID */
    get: operations['getPaySlip']
    /** Creates an employee pay slip */
    put: operations['updatePaySlipLineItems']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Settings': {
    /** Retrieves settings */
    get: operations['getSettings']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Settings/TrackingCategories': {
    /** Retrieves tracking categories */
    get: operations['getTrackingCategories']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Pagination: {
      /** @example 1 */
      page?: number
      /** @example 10 */
      pageSize?: number
      /** @example 1 */
      pageCount?: number
      /** @example 2 */
      itemCount?: number
    }
    /** @description The object returned for a bad request */
    Problem: {
      /**
       * @description The type of error format
       * @example application/problem+json
       */
      type?: string
      /**
       * @description The type of the error
       * @example BadRequest
       */
      title?: string
      /**
       * @description The error status code
       * @example 400
       */
      status?: string
      /**
       * @description A description of the error
       * @example Validation error occurred.
       */
      detail?: string
      instance?: string
      invalidFields?: components['schemas']['InvalidField'][]
    }
    InvalidField: {
      /**
       * @description The name of the field that caused the error
       * @example DateOfBirth
       */
      name?: string
      /**
       * @description The reason the error occurred
       * @example The Date of Birth is required.
       */
      reason?: string
    }
    Employees: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employees?: components['schemas']['Employee'][]
    }
    EmployeeObject: {
      pagination?: components['schemas']['Pagination']
      employee?: components['schemas']['Employee']
      problem?: components['schemas']['Problem']
    }
    Employee: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the employee
       * @example d90457c4-f1be-4f2e-b4e3-f766390a7e30
       */
      employeeID?: string
      /**
       * @description Title of the employee
       * @example Mrs
       */
      title?: string
      /**
       * @description First name of employee
       * @example Karen
       */
      firstName?: string
      /**
       * @description Last name of employee
       * @example Jones
       */
      lastName?: string
      /**
       * Format: date
       * @description Date of birth of the employee (YYYY-MM-DD)
       * @example 2019-01-02T00:00:00.000Z
       */
      dateOfBirth?: string
      address?: components['schemas']['Address']
      /**
       * @description The email address for the employee
       * @example developer@me.com
       */
      email?: string
      /**
       * @description The employee’s gender
       * @example F
       * @enum {string}
       */
      gender?: 'M' | 'F'
      /**
       * @description Employee phone number
       * @example 415-555-1212
       */
      phoneNumber?: string
      /**
       * Format: date
       * @description Employment start date of the employee at the time it was requested
       * @example 2020-01-19T00:00:00.000Z
       */
      startDate?: string
      /**
       * Format: date
       * @description Employment end date of the employee at the time it was requested
       * @example 2020-01-19T00:00:00.000Z
       */
      endDate?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar of the employee
       */
      payrollCalendarID?: string
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the employee
       */
      updatedDateUTC?: string
      /**
       * Format: date-time
       * @description UTC timestamp when the employee was created in Xero
       */
      createdDateUTC?: string
      /**
       * @description Employee's job title
       * @example General Manager
       */
      jobTitle?: string
    }
    EmploymentObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employment?: components['schemas']['Employment']
    }
    Employment: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar of the employee
       */
      payrollCalendarID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the payrun calendar for the employee (Deprecated in version 1.1.6)
       */
      payRunCalendarID?: string
      /**
       * Format: date
       * @description Start date of the employment (YYYY-MM-DD)
       */
      startDate?: string
    }
    EmployeeTaxObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      employeeTax?: components['schemas']['EmployeeTax']
    }
    EmployeeTax: {
      /**
       * @description The IRD Number.
       * @example 111111111
       */
      irdNumber?: string
      taxCode?: components['schemas']['TaxCode']
      /**
       * Format: double
       * @description Special tax rate percentage.
       * @example 17.5
       */
      specialTaxRatePercentage?: number
      /**
       * @description Does the employee has a special student loan rate?
       * @example true
       */
      hasSpecialStudentLoanRate?: boolean
      /**
       * Format: double
       * @description The employee student loan rate percentage.
       * @example 2
       */
      specialStudentLoanRatePercentage?: number
      /**
       * @description The employee eligibility for KiwiSaver.
       * @example true
       */
      isEligibleForKiwiSaver?: boolean
      /**
       * Format: double
       * @description Employer superannuation contribution tax rate.
       * @example 1
       */
      esctRatePercentage?: number
      /**
       * @description Contribution Option which can be 'MakeContributions' 'OptOut', 'OnAContributionsHoliday', 'OnASavingsSuspension', 'NotCurrentlyAKiwiSaverMember' for employees without a KiwiSaver membership
       * @example MakeContributions
       * @enum {string}
       */
      kiwiSaverContributions?:
        | 'MakeContributions'
        | 'OptOut'
        | 'OnAContributionsHoliday'
        | 'OnASavingsSuspension'
        | 'NotCurrentlyAKiwiSaverMember'
      /**
       * Format: double
       * @description Employee Contribution percentage.
       * @example 4
       */
      kiwiSaverEmployeeContributionRatePercentage?: number
      /**
       * Format: double
       * @description Employer Contribution percentage.
       * @example 10
       */
      kiwiSaverEmployerContributionRatePercentage?: number
      /**
       * Format: double
       * @description Employer Contribution through Salary Sacrifice percentage.
       * @example 2
       */
      kiwiSaverEmployerSalarySacrificeContributionRatePercentage?: number
      /**
       * Format: date
       * @description Opt Out Date.
       * @example 2020-06-01T00:00:00
       */
      kiwiSaverOptOutDate?: string
      /**
       * Format: date
       * @description Contribution holiday expiry date or end date.
       * @example 2019-06-01T00:00:00
       */
      kiwiSaverContributionHolidayEndDate?: string
      /**
       * @description Does the employee have a remaining student loan balance? Set a remaining balance if you have received a letter from IR.
       * @example false
       */
      hasStudentLoanBalance?: boolean
      /**
       * Format: double
       * @description The employee's student loan balance shown on the letter from IR.
       * @example 30
       */
      studentLoanBalance?: number
      /**
       * Format: date
       * @description The date of the letter from IR.
       * @example 2020-07-01T00:00:00
       */
      studentLoanAsAt?: string
    }
    /**
     * @description Tax codes used for employee tax
     * @enum {string}
     */
    TaxCode:
      | 'ND'
      | 'M'
      | 'ME'
      | 'MSL'
      | 'MESL'
      | 'SB'
      | 'S'
      | 'SH'
      | 'ST'
      | 'SBSL'
      | 'SSL'
      | 'SHSL'
      | 'STSL'
      | 'WT'
      | 'CAE'
      | 'EDW'
      | 'NSW'
      | 'STC'
      | 'STCSL'
    EmployeeOpeningBalancesObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      openingBalances?: components['schemas']['EmployeeOpeningBalance'][]
    }
    EmployeeOpeningBalances: components['schemas']['EmployeeOpeningBalance'][]
    EmployeeOpeningBalance: {
      /**
       * Format: date
       * @description The opening balance period end date.
       * @example 2020-07-01T00:00:00
       */
      periodEndDate?: string
      /**
       * Format: int32
       * @description The paid number of days.
       */
      daysPaid?: number
      /**
       * Format: int32
       * @description The number of unpaid weeks.
       */
      unpaidWeeks?: number
      /**
       * Format: double
       * @description The gross earnings during the period.
       */
      grossEarnings?: number
    }
    EmployeeLeaves: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leave?: components['schemas']['EmployeeLeave'][]
    }
    EmployeeLeaveObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leave?: components['schemas']['EmployeeLeave']
    }
    EmployeeLeave: {
      /**
       * Format: uuid
       * @description The Xero identifier for LeaveType
       */
      leaveID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for LeaveType
       */
      leaveTypeID: string
      /** @description The description of the leave  (max length = 50) */
      description: string
      /**
       * Format: date
       * @description Start date of the leave (YYYY-MM-DD)
       */
      startDate: string
      /**
       * Format: date
       * @description End date of the leave (YYYY-MM-DD)
       */
      endDate: string
      /** @description The leave period information. The StartDate, EndDate and NumberOfUnits needs to be specified when you do not want to calculate NumberOfUnits automatically. Using incorrect period StartDate and EndDate will result in automatic computation of the NumberOfUnits. */
      periods?: components['schemas']['LeavePeriod'][]
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the leave type note
       */
      updatedDateUTC?: string
    }
    LeavePeriods: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      periods?: components['schemas']['LeavePeriod'][]
    }
    LeavePeriod: {
      /**
       * Format: date
       * @description The Pay Period Start Date (YYYY-MM-DD)
       */
      periodStartDate?: string
      /**
       * Format: date
       * @description The Pay Period End Date (YYYY-MM-DD)
       */
      periodEndDate?: string
      /**
       * Format: double
       * @description The Number of Units for the leave
       */
      numberOfUnits?: number
      /**
       * @description Period Status
       * @enum {string}
       */
      periodStatus?: 'Approved' | 'Completed'
    }
    EmployeeLeaveBalances: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveBalances?: components['schemas']['EmployeeLeaveBalance'][]
    }
    EmployeeLeaveBalance: {
      /**
       * @description Name of the leave type.
       * @example Holiday
       */
      name?: string
      /**
       * Format: uuid
       * @description The Xero identifier for leave type
       */
      leaveTypeID?: string
      /**
       * Format: double
       * @description The employees current balance for the corresponding leave type.
       */
      balance?: number
      /**
       * @description The type of the units of the leave.
       * @example hours
       */
      typeOfUnits?: string
    }
    EmployeeStatutoryLeaveBalanceObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveBalance?: components['schemas']['EmployeeStatutoryLeaveBalance']
    }
    EmployeeStatutoryLeaveBalance: {
      /**
       * @description The type of statutory leave
       * @enum {string}
       */
      leaveType?:
        | 'Sick'
        | 'Adoption'
        | 'Maternity'
        | 'Paternity'
        | 'Sharedparental'
      /**
       * Format: double
       * @description The balance remaining for the corresponding leave type as of specified date.
       */
      balanceRemaining?: number
      /**
       * @description The units will be "Hours"
       * @enum {string}
       */
      units?: 'Hours'
    }
    EmployeeStatutoryLeavesSummaries: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryLeaves?: components['schemas']['EmployeeStatutoryLeaveSummary'][]
    }
    EmployeeStatutoryLeaveSummary: {
      /**
       * Format: uuid
       * @description The unique identifier (guid) of a statutory leave.
       */
      statutoryLeaveID?: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the employee
       */
      employeeID?: string
      /**
       * @description The category of statutory leave
       * @enum {string}
       */
      type?: 'Sick' | 'Adoption' | 'Maternity' | 'Paternity' | 'Sharedparental'
      /**
       * Format: date
       * @description The date when the leave starts
       */
      startDate?: string
      /**
       * Format: date
       * @description The date when the leave ends
       */
      endDate?: string
      /** @description Whether the leave was entitled to receive payment */
      isEntitled?: boolean
      /**
       * @description The status of the leave
       * @enum {string}
       */
      status?: 'Pending' | 'In-Progress' | 'Completed'
    }
    EmployeeStatutorySickLeaves: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutorySickLeave?: components['schemas']['EmployeeStatutorySickLeave'][]
    }
    EmployeeStatutorySickLeaveObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutorySickLeave?: components['schemas']['EmployeeStatutorySickLeave']
    }
    EmployeeStatutorySickLeave: {
      /**
       * Format: uuid
       * @description The unique identifier (guid) of a statutory leave
       */
      statutoryLeaveID?: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the employee
       */
      employeeID: string
      /**
       * Format: uuid
       * @description The unique identifier (guid) of the "Statutory Sick Leave (non-pensionable)" pay item
       */
      leaveTypeID: string
      /**
       * Format: date
       * @description The date when the leave starts
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the leave ends
       */
      endDate: string
      /**
       * @description the type of statutory leave
       * @example Sick
       */
      type?: string
      /**
       * @description the type of statutory leave
       * @example Pending
       */
      status?: string
      /** @description The days of the work week the employee is scheduled to work at the time the leave is taken */
      workPattern: string[]
      /** @description Whether the sick leave was pregnancy related */
      isPregnancyRelated: boolean
      /** @description Whether the employee provided sufficient notice and documentation as required by the employer supporting the sick leave request */
      sufficientNotice: boolean
      /** @description Whether the leave was entitled to receive payment */
      isEntitled?: boolean
      /**
       * Format: double
       * @description The amount of requested time (in weeks)
       */
      entitlementWeeksRequested?: number
      /**
       * Format: double
       * @description The amount of statutory sick leave time off (in weeks) that is available to take at the time the leave was requested
       */
      entitlementWeeksQualified?: number
      /**
       * Format: double
       * @description A calculated amount of time (in weeks) that remains for the statutory sick leave period
       */
      entitlementWeeksRemaining?: number
      /** @description Whether another leave (Paternity, Shared Parental specifically) occurs during the requested leave's period. While this is allowed it could affect payment amounts */
      overlapsWithOtherLeave?: boolean
      /** @description If the leave requested was considered "not entitled", the reasons why are listed here. */
      entitlementFailureReasons?: (
        | 'UnableToCalculateAwe'
        | 'AweLowerThanLel'
        | 'NotQualifiedInPreviousPiw'
        | 'ExceededMaximumEntitlementWeeksOfSsp'
        | 'ExceededMaximumDurationOfPiw'
        | 'SufficientNoticeNotGiven'
      )[]
    }
    EmployeeLeaveTypes: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveTypes?: components['schemas']['EmployeeLeaveType'][]
    }
    EmployeeLeaveSetupObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveSetup?: components['schemas']['EmployeeLeaveSetup']
    }
    EmployeeLeaveSetup: {
      /**
       * @description Identifier if holiday pay will be included in each payslip
       * @example false
       */
      includeHolidayPay?: boolean
      /**
       * Format: double
       * @description Initial holiday pay balance. A percentage — usually 8% — of gross earnings since their last work anniversary.
       * @example 10.5
       */
      holidayPayOpeningBalance?: number
      /**
       * Format: double
       * @description Initial annual leave balance. The balance at their last anniversary, less any leave taken since then and excluding accrued annual leave.
       * @example 25.89
       */
      annualLeaveOpeningBalance?: number
      /**
       * Format: double
       * @description The dollar value of annual leave opening balance if negative.
       * @example 10
       */
      negativeAnnualLeaveBalancePaidAmount?: number
      /**
       * Format: double
       * @description Number of hours accrued annually for sick leave. Multiply the number of days they're entitled to by the hours worked per day
       * @example 100.5
       */
      sickLeaveHoursToAccrueAnnually?: number
      /**
       * Format: double
       * @description Maximum number of hours accrued annually for sick leave. Multiply the maximum days they can accrue by the hours worked per day
       * @example 200.5
       */
      sickLeaveMaximumHoursToAccrue?: number
      /**
       * Format: double
       * @description Initial sick leave balance. This will be positive unless they've taken sick leave in advance
       * @example 10.5
       */
      sickLeaveOpeningBalance?: number
    }
    EmployeeLeaveTypeObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveType?: components['schemas']['EmployeeLeaveType']
    }
    EmployeeLeaveType: {
      /**
       * Format: uuid
       * @description The Xero identifier for leave type
       */
      leaveTypeID?: string
      /**
       * @description The schedule of accrual
       * @enum {string}
       */
      scheduleOfAccrual?:
        | 'AnnuallyAfter6Months'
        | 'OnAnniversaryDate'
        | 'PercentageOfGrossEarnings'
        | 'NoAccruals'
      /**
       * Format: double
       * @description The number of hours accrued for the leave annually. This is 0 when the scheduleOfAccrual chosen is "OnHourWorked"
       */
      hoursAccruedAnnually?: number
      /**
       * Format: double
       * @description The maximum number of hours that can be accrued for the leave
       */
      maximumToAccrue?: number
      /**
       * Format: double
       * @description The initial number of hours assigned when the leave was added to the employee
       */
      openingBalance?: number
      /**
       * Format: double
       * @description The number of hours added to the leave balance for every hour worked by the employee. This is normally 0, unless the scheduleOfAccrual chosen is "OnHourWorked"
       */
      rateAccruedHourly?: number
      /**
       * Format: double
       * @description Specific for scheduleOfAccrual having percentage of gross earnings. Identifies how much percentage of gross earnings is accrued per pay period.
       */
      percentageOfGrossEarnings?: number
      /** @description Specific to Holiday pay. Flag determining if pay for leave type is added on each pay run. */
      includeHolidayPayEveryPay?: boolean
      /** @description Specific to Annual Leave. Flag to include leave available to take in advance in the balance in the payslip */
      showAnnualLeaveInAdvance?: boolean
      /**
       * Format: double
       * @description Specific to Annual Leave. Annual leave balance in dollars
       */
      annualLeaveTotalAmountPaid?: number
    }
    EmployeePayTemplateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payTemplate?: components['schemas']['EmployeePayTemplate']
    }
    EmployeePayTemplates: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payTemplate?: components['schemas']['EmployeePayTemplate']
    }
    EmployeeEarningsTemplates: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningTemplates?: components['schemas']['EarningsTemplate'][]
    }
    EmployeePayTemplate: {
      /**
       * Format: uuid
       * @description Unique identifier for the employee
       */
      employeeID?: string
      earningTemplates?: components['schemas']['EarningsTemplates']
    }
    EarningsTemplates: components['schemas']['EarningsTemplate'][]
    EarningsTemplateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningTemplate?: components['schemas']['EarningsTemplate']
    }
    EarningsTemplate: {
      /**
       * Format: uuid
       * @description The Xero identifier for the earnings template
       */
      payTemplateEarningID?: string
      /**
       * Format: double
       * @description The rate per unit
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description The rate per unit
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description The fixed amount per period
       */
      fixedAmount?: number
      /**
       * Format: uuid
       * @description The corresponding earnings rate identifier
       */
      earningsRateID?: string
      /** @description The read-only name of the Earning Template. */
      name?: string
    }
    Superannuations: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      benefits?: components['schemas']['Benefit'][]
    }
    SuperannuationObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      benefit?: components['schemas']['Benefit']
    }
    Benefit: {
      /**
       * Format: uuid
       * @description The Xero identifier for superannuation
       */
      id?: string
      /** @description Name of the superannuations */
      name: string
      /**
       * @description Superannuations Category type
       * @enum {string}
       */
      category: 'KiwiSaver' | 'ComplyingFund' | 'Other'
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId: string
      /**
       * Format: uuid
       * @description Xero identifier for Expense Account
       */
      expenseAccountId: string
      /**
       * @description Calculation Type of the superannuation either FixedAmount or PercentageOfTaxableEarnings
       * @enum {string}
       */
      calculationTypeNZ?: 'FixedAmount' | 'PercentageOfTaxableEarnings'
      /**
       * Format: double
       * @description Standard amount of the superannuation
       */
      standardAmount?: number
      /**
       * Format: double
       * @description Percentage of Taxable Earnings of the superannuation
       */
      percentage?: number
      /**
       * Format: double
       * @description Company Maximum amount of the superannuation
       */
      companyMax?: number
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
    }
    Deductions: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      deductions?: components['schemas']['Deduction'][]
    }
    DeductionObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      deduction?: components['schemas']['Deduction']
    }
    Deduction: {
      /**
       * Format: uuid
       * @description The Xero identifier for Deduction
       */
      deductionId?: string
      /** @description Name of the deduction */
      deductionName: string
      /**
       * @description Deduction Category type
       * @enum {string}
       */
      deductionCategory:
        | 'PayrollGiving'
        | 'KiwiSaverVoluntaryContributions'
        | 'Superannuation'
        | 'NzOther'
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId: string
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
      /**
       * Format: double
       * @description Standard amount of the deduction.
       */
      standardAmount?: number
    }
    StatutoryDeductions: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeductions?: components['schemas']['StatutoryDeduction'][]
    }
    StatutoryDeductionObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeduction?: components['schemas']['StatutoryDeduction']
    }
    StatutoryDeduction: {
      /**
       * Format: uuid
       * @description The Xero identifier for earnings order
       */
      id?: string
      /** @description Name of the earnings order */
      name?: string
      statutoryDeductionCategory?: components['schemas']['StatutoryDeductionCategory']
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId?: string
      /** @description Identifier of a record is active or not. */
      currentRecord?: boolean
    }
    /**
     * @description Statutory Deduction Category
     * @enum {string}
     */
    StatutoryDeductionCategory:
      | 'PriorityOrder'
      | 'NonPriorityOrder'
      | 'TableBased'
      | 'ChildSupport'
      | 'CourtFines'
      | 'InlandRevenueArrears'
      | 'MsdRepayments'
      | 'StudentLoan'
      | 'AdditionalStudentLoan'
      | 'VoluntaryStudentLoan'
      | 'KiwiSaver'
    EarningsOrders: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeductions?: components['schemas']['EarningsOrder'][]
    }
    EarningsOrderObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      statutoryDeduction?: components['schemas']['EarningsOrder']
    }
    EarningsOrder: {
      /**
       * Format: uuid
       * @description Xero unique identifier for an earning rate
       */
      id?: string
      /** @description Name of the earning order */
      name: string
      statutoryDeductionCategory?: components['schemas']['StatutoryDeductionCategory']
      /**
       * Format: uuid
       * @description Xero identifier for Liability Account
       */
      liabilityAccountId?: string
      /**
       * @description Identifier of a record is active or not.
       * @default true
       */
      currentRecord?: boolean
    }
    EarningsRates: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningsRates?: components['schemas']['EarningsRate'][]
    }
    EarningsRateObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      earningsRate?: components['schemas']['EarningsRate']
    }
    EarningsRate: {
      /**
       * Format: uuid
       * @description Xero unique identifier for an earning rate
       */
      earningsRateID?: string
      /** @description Name of the earning rate */
      name: string
      /**
       * @description Indicates how an employee will be paid when taking this type of earning
       * @enum {string}
       */
      earningsType:
        | 'Allowance'
        | 'Backpay'
        | 'Bonus'
        | 'Commission'
        | 'DiscretionaryPayments'
        | 'HolidayPay'
        | 'LumpSum'
        | 'OtherEarnings'
        | 'OtherGrossEarnings'
        | 'OvertimeEarnings'
        | 'RegularEarnings'
        | 'SalarySacrificeForKiwiSaver'
        | 'Tips(Direct)'
        | 'Tips(Non-Direct)'
        | 'WithholdingIncome'
      /**
       * @description Indicates the type of the earning rate
       * @enum {string}
       */
      rateType: 'RatePerUnit' | 'MultipleOfOrdinaryEarningsRate' | 'FixedAmount'
      /** @description The type of units used to record earnings */
      typeOfUnits: string
      /** @description Indicates whether an earning type is active */
      currentRecord?: boolean
      /**
       * Format: uuid
       * @description The account that will be used for the earnings rate
       */
      expenseAccountID: string
      /**
       * Format: double
       * @description Default rate per unit (optional). Only applicable if RateType is RatePerUnit
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MultipleOfOrdinaryEarningsRate
       */
      multipleOfOrdinaryEarningsRate?: number
      /**
       * Format: double
       * @description Optional Fixed Rate Amount. Applicable for FixedAmount Rate
       */
      fixedAmount?: number
    }
    LeaveTypes: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveTypes?: components['schemas']['LeaveType'][]
    }
    LeaveTypeObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      leaveType?: components['schemas']['LeaveType']
    }
    LeaveType: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the leave type
       */
      leaveTypeID?: string
      /** @description Name of the leave type */
      name: string
      /** @description Indicate that an employee will be paid when taking this type of leave */
      isPaidLeave: boolean
      /** @description Indicate that a balance for this leave type to be shown on the employee’s payslips */
      showOnPayslip: boolean
      /**
       * Format: date-time
       * @description UTC timestamp of last update to the leave type note
       */
      updatedDateUTC?: string
      /** @description Shows whether the leave type is active or not */
      isActive?: boolean
    }
    Reimbursements: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      reimbursements?: components['schemas']['Reimbursement'][]
    }
    ReimbursementObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      reimbursement?: components['schemas']['Reimbursement']
    }
    Reimbursement: {
      /**
       * Format: uuid
       * @description Xero unique identifier for a reimbursement
       */
      reimbursementID?: string
      /** @description Name of the reimbursement */
      name: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the account used for the reimbursement
       */
      accountID: string
      /** @description Indicates that whether the reimbursement is active */
      currentRecord?: boolean
      /**
       * @description See Reimbursement Categories
       * @enum {string}
       */
      reimbursementCategory?: 'GST' | 'NoGST' | 'GSTInclusive'
      /**
       * @description See Calculation Types
       * @enum {string}
       */
      calculationType?: 'Unknown' | 'FixedAmount' | 'RatePerUnit'
      /** @description Optional Fixed Rate Amount. Applicable when calculation type is Fixed Amount */
      standardAmount?: string
      /**
       * @description Optional Type Of Units. Applicable when calculation type is Rate Per Unit
       * @enum {string}
       */
      standardTypeOfUnits?: 'Hours' | 'km'
      /**
       * Format: double
       * @description Optional Rate Per Unit. Applicable when calculation type is Rate Per Unit
       */
      standardRatePerUnit?: number
    }
    Timesheets: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheets?: components['schemas']['Timesheet'][]
    }
    TimesheetObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheet?: components['schemas']['Timesheet']
    }
    Timesheet: {
      /**
       * Format: uuid
       * @description The Xero identifier for a Timesheet
       */
      timesheetID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Payroll Calendar that the Timesheet applies to
       */
      payrollCalendarID: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Employee that the Timesheet is for
       */
      employeeID: string
      /**
       * Format: date
       * @description The Start Date of the Timesheet period (YYYY-MM-DD)
       */
      startDate: string
      /**
       * Format: date
       * @description The End Date of the Timesheet period (YYYY-MM-DD)
       */
      endDate: string
      /**
       * @description Status of the timesheet
       * @enum {string}
       */
      status?: 'Draft' | 'Approved' | 'Completed' | 'Requested'
      /**
       * Format: double
       * @description The Total Hours of the Timesheet
       */
      totalHours?: number
      /**
       * Format: date-time
       * @description The UTC date time that the Timesheet was last updated
       */
      updatedDateUTC?: string
      timesheetLines?: components['schemas']['TimesheetLines']
    }
    TimesheetLines: components['schemas']['TimesheetLine'][]
    TimesheetLineObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      timesheetLine?: components['schemas']['TimesheetLine']
    }
    TimesheetLine: {
      /**
       * Format: uuid
       * @description The Xero identifier for a Timesheet Line
       */
      timesheetLineID?: string
      /**
       * Format: date
       * @description The Date that this Timesheet Line is for (YYYY-MM-DD)
       */
      date: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Earnings Rate that the Timesheet is for
       */
      earningsRateID: string
      /**
       * Format: uuid
       * @description The Xero identifier for the Tracking Item that the Timesheet is for
       */
      trackingItemID?: string
      /**
       * Format: double
       * @description The Number of Units of the Timesheet Line
       */
      numberOfUnits: number
    }
    PayRunCalendars: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRunCalendars?: components['schemas']['PayRunCalendar'][]
    }
    PayRunCalendarObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRunCalendar?: components['schemas']['PayRunCalendar']
    }
    PayRunCalendar: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar
       */
      payrollCalendarID?: string
      /** @description Name of the calendar */
      name: string
      calendarType: components['schemas']['CalendarType']
      /**
       * Format: date
       * @description Period start date of the calendar
       */
      periodStartDate: string
      /**
       * Format: date
       * @description Period end date of the calendar
       */
      periodEndDate?: string
      /**
       * Format: date
       * @description Payment date of the calendar
       */
      paymentDate: string
      /**
       * Format: date-time
       * @description UTC timestamp of the last update to the pay run calendar
       */
      updatedDateUTC?: string
    }
    PaymentMethodObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paymentMethod?: components['schemas']['PaymentMethod']
    }
    PaymentMethod: {
      /**
       * @description The payment method code
       * @enum {string}
       */
      paymentMethod?: 'Cheque' | 'Electronically' | 'Manual'
      bankAccounts?: components['schemas']['BankAccount'][]
    }
    SalaryAndWages: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      salaryAndWages?: components['schemas']['SalaryAndWage'][]
    }
    SalaryAndWageObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      salaryAndWages?: components['schemas']['SalaryAndWage']
    }
    SalaryAndWage: {
      /**
       * Format: uuid
       * @description Xero unique identifier for a salary and wages record
       */
      salaryAndWagesID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for an earnings rate
       */
      earningsRateID: string
      /**
       * Format: double
       * @description The Number of Units per week for the corresponding salary and wages
       */
      numberOfUnitsPerWeek: number
      /**
       * Format: double
       * @description The rate of each unit for the corresponding salary and wages
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description The Number of Units per day for the corresponding salary and wages
       */
      numberOfUnitsPerDay: number
      /**
       * Format: double
       * @description The days per week for the salary.
       */
      daysPerWeek?: number
      /**
       * Format: date
       * @description The effective date of the corresponding salary and wages
       */
      effectiveFrom: string
      /**
       * Format: double
       * @description The annual salary
       */
      annualSalary: number
      /**
       * @description The current status of the corresponding salary and wages
       * @enum {string}
       */
      status: 'Active' | 'Pending' | 'History'
      /**
       * @description The type of the payment of the corresponding salary and wages
       * @enum {string}
       */
      paymentType: 'Salary' | 'Hourly'
    }
    PayRuns: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRuns?: components['schemas']['PayRun'][]
    }
    PayRunObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      payRun?: components['schemas']['PayRun']
    }
    PayRun: {
      /**
       * Format: uuid
       * @description Xero unique identifier for the pay run
       */
      payRunID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for the payroll calendar
       */
      payrollCalendarID?: string
      /**
       * Format: date
       * @description Period start date of the payroll calendar
       */
      periodStartDate?: string
      /**
       * Format: date
       * @description Period end date of the payroll calendar
       */
      periodEndDate?: string
      /**
       * Format: date
       * @description Payment date of the pay run
       */
      paymentDate?: string
      /**
       * Format: double
       * @description Total cost of the pay run
       */
      totalCost?: number
      /**
       * Format: double
       * @description Total pay of the pay run
       */
      totalPay?: number
      /**
       * @description Pay run status
       * @enum {string}
       */
      payRunStatus?: 'Draft' | 'Posted'
      /**
       * @description Pay run type
       * @enum {string}
       */
      payRunType?: 'Scheduled' | 'Unscheduled' | 'EarlierYearUpdate'
      calendarType?: components['schemas']['CalendarType']
      /**
       * Format: date
       * @description Posted date time of the pay run
       */
      postedDateTime?: string
      paySlips?: components['schemas']['PaySlip'][]
    }
    /**
     * @description Calendar type of the pay run
     * @enum {string}
     */
    CalendarType:
      | 'Weekly'
      | 'Fortnightly'
      | 'FourWeekly'
      | 'Monthly'
      | 'Annual'
      | 'Quarterly'
      | 'TwiceMonthly'
    PaySlipObject: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paySlip?: components['schemas']['PaySlip']
    }
    PaySlips: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      paySlips?: components['schemas']['PaySlip'][]
    }
    PaySlip: {
      /**
       * Format: uuid
       * @description The Xero identifier for a PaySlip
       */
      paySlipID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for payroll employee
       */
      employeeID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for the associated payrun
       */
      payRunID?: string
      /**
       * Format: date
       * @description The date payslip was last updated
       */
      lastEdited?: string
      /** @description Employee first name */
      firstName?: string
      /** @description Employee last name */
      lastName?: string
      /**
       * Format: double
       * @description Total earnings before any deductions. Same as gross earnings for NZ.
       */
      totalEarnings?: number
      /**
       * Format: double
       * @description Total earnings before any deductions. Same as total earnings for NZ.
       */
      grossEarnings?: number
      /**
       * Format: double
       * @description The employee net pay
       */
      totalPay?: number
      /**
       * Format: double
       * @description The employer's tax obligation
       */
      totalEmployerTaxes?: number
      /**
       * Format: double
       * @description The part of an employee's earnings that is deducted for tax purposes
       */
      totalEmployeeTaxes?: number
      /**
       * Format: double
       * @description Total amount subtracted from an employee's earnings to reach total pay
       */
      totalDeductions?: number
      /**
       * Format: double
       * @description Total reimbursements are nontaxable payments to an employee used to repay out-of-pocket expenses when the person incurs those expenses through employment
       */
      totalReimbursements?: number
      /**
       * Format: double
       * @description Total amounts required by law to subtract from the employee's earnings
       */
      totalStatutoryDeductions?: number
      /**
       * Format: double
       * @description Benefits (also called fringe benefits, perquisites or perks) are various non-earnings compensations provided to employees in addition to their normal earnings or salaries
       */
      totalSuperannuation?: number
      /** @description BACS Service User Number */
      bacsHash?: string
      /**
       * @description The payment method code
       * @enum {string}
       */
      paymentMethod?: 'Cheque' | 'Electronically' | 'Manual'
      earningsLines?: components['schemas']['EarningsLines']
      leaveEarningsLines?: components['schemas']['LeaveEarningsLines']
      timesheetEarningsLines?: components['schemas']['TimesheetEarningsLines']
      deductionLines?: components['schemas']['DeductionLines']
      reimbursementLines?: components['schemas']['ReimbursementLines']
      leaveAccrualLines?: components['schemas']['LeaveAccrualLines']
      superannuationLines?: components['schemas']['SuperannuationLines']
      paymentLines?: components['schemas']['PaymentLines']
      employeeTaxLines?: components['schemas']['TaxLines']
      employerTaxLines?: components['schemas']['TaxLines']
      statutoryDeductionLines?: components['schemas']['StatutoryDeductionLines']
      taxSettings?: components['schemas']['TaxSettings']
      grossEarningsHistory?: components['schemas']['GrossEarningsHistory']
    }
    EarningsLines: components['schemas']['EarningsLine'][]
    EarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings line
       */
      earningsLineID?: string
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings rate
       */
      earningsRateID?: string
      /** @description name of earnings rate for display in UI */
      displayName?: string
      /**
       * Format: double
       * @description Rate per unit for earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the earnings line.
       */
      amount?: number
      /** @description Identifies if the earnings is taken from the timesheet. False for earnings line */
      isLinkedToTimesheet?: boolean
      /** @description Identifies if the earnings is using an average daily pay rate */
      isAverageDailyPayRate?: boolean
      /** @description Flag to identify whether the earnings line is system generated or not. */
      isSystemGenerated?: boolean
    }
    LeaveEarningsLines: components['schemas']['LeaveEarningsLine'][]
    LeaveEarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings line
       */
      earningsLineID?: string
      /**
       * Format: uuid
       * @description Xero identifier for payroll leave earnings rate
       */
      earningsRateID?: string
      /** @description name of earnings rate for display in UI */
      displayName?: string
      /**
       * Format: double
       * @description Rate per unit for leave earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Leave earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the earnings line.
       */
      amount?: number
      /** @description Identifies if the leave earnings is taken from the timesheet. False for leave earnings line */
      isLinkedToTimesheet?: boolean
      /** @description Identifies if the earnings is using an average daily pay rate */
      isAverageDailyPayRate?: boolean
      /** @description Flag to identify whether the earnings line is system generated or not. */
      isSystemGenerated?: boolean
    }
    TimesheetEarningsLines: components['schemas']['TimesheetEarningsLine'][]
    TimesheetEarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll earnings line
       */
      earningsLineID?: string
      /**
       * Format: uuid
       * @description Xero identifier for payroll leave earnings rate
       */
      earningsRateID?: string
      /** @description name of earnings rate for display in UI */
      displayName?: string
      /**
       * Format: double
       * @description Rate per unit for leave earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Leave earnings number of units
       */
      numberOfUnits?: number
      /**
       * Format: double
       * @description Leave earnings fixed amount. Only applicable if the EarningsRate RateType is Fixed
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description The amount of the earnings line.
       */
      amount?: number
      /** @description Identifies if the leave earnings is taken from the timesheet. False for leave earnings line */
      isLinkedToTimesheet?: boolean
      /** @description Identifies if the earnings is using an average daily pay rate */
      isAverageDailyPayRate?: boolean
      /** @description Flag to identify whether the earnings line is system generated or not. */
      isSystemGenerated?: boolean
    }
    DeductionLines: components['schemas']['DeductionLine'][]
    DeductionLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll deduction
       */
      deductionTypeID?: string
      /** @description name of earnings rate for display in UI */
      displayName?: string
      /**
       * Format: double
       * @description The amount of the deduction line
       */
      amount?: number
      /** @description Identifies if the deduction is subject to tax */
      subjectToTax?: boolean
      /**
       * Format: double
       * @description Deduction rate percentage
       */
      percentage?: number
    }
    ReimbursementLines: components['schemas']['ReimbursementLine'][]
    ReimbursementLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll reimbursement
       */
      reimbursementTypeID?: string
      /** @description Reimbursement line description */
      description?: string
      /**
       * Format: double
       * @description Reimbursement amount
       */
      amount?: number
      /**
       * Format: double
       * @description Rate per unit for leave earnings line
       */
      ratePerUnit?: number
      /**
       * Format: double
       * @description Leave earnings number of units
       */
      numberOfUnits?: number
    }
    LeaveAccrualLines: components['schemas']['LeaveAccrualLine'][]
    LeaveAccrualLine: {
      /**
       * Format: uuid
       * @description Xero identifier for the Leave type
       */
      leaveTypeID?: string
      /**
       * Format: double
       * @description Leave accrual number of units
       */
      numberOfUnits?: number
    }
    SuperannuationLines: components['schemas']['SuperannuationLine'][]
    SuperannuationLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll superannuation type
       */
      superannuationTypeID?: string
      /** @description Benefit display name */
      displayName?: string
      /**
       * Format: double
       * @description The amount of the superannuation line
       */
      amount?: number
      /**
       * Format: double
       * @description Superannuation fixed amount
       */
      fixedAmount?: number
      /**
       * Format: double
       * @description Superannuation rate percentage
       */
      percentage?: number
      /** @description manual adjustment made */
      manualAdjustment?: boolean
    }
    PaymentLines: components['schemas']['PaymentLine'][]
    PaymentLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll payment line
       */
      paymentLineID?: string
      /**
       * Format: double
       * @description The amount of the payment line
       */
      amount?: number
      /** @description The account number */
      accountNumber?: string
      /** @description The account sort code */
      sortCode?: string
      /** @description The account name */
      accountName?: string
    }
    TaxLines: components['schemas']['TaxLine'][]
    TaxLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll tax line
       */
      taxLineID?: string
      /** @description Tax line description */
      description?: string
      /**
       * Format: double
       * @description The amount of the tax line
       */
      amount?: number
      /** @description Tax type ID */
      globalTaxTypeID?: string
      /** @description Identifies if the tax line is a manual adjustment */
      manualAdjustment?: boolean
    }
    StatutoryDeductionLines: components['schemas']['StatutoryDeductionLine'][]
    StatutoryDeductionLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll statutory deduction type
       */
      statutoryDeductionTypeID?: string
      /**
       * Format: double
       * @description The amount of the statutory deduction line
       */
      amount?: number
      /**
       * Format: double
       * @description Fixed Amount
       */
      fixedAmount?: number
      /** @description Identifies if the tax line is a manual adjustment */
      manualAdjustment?: boolean
    }
    TaxSettings: {
      /**
       * Format: double
       * @description The number of units for the period type
       */
      periodUnits?: number
      /**
       * @description The type of period ("weeks" or "months")
       * @example weeks
       * @enum {string}
       */
      periodType?: 'weeks' | 'months'
      taxCode?: components['schemas']['TaxCode']
      /** @description Tax rate for STC and WT */
      specialTaxRate?: string
      /** @description Tax code for a lump sum amount */
      lumpSumTaxCode?: string
      /** @description The total of the lump sum amount */
      lumpSumAmount?: string
    }
    GrossEarningsHistory: {
      /**
       * Format: int32
       * @description Number of days the employee worked in the pay period (0 - 365)
       */
      daysPaid?: number
      /**
       * Format: int32
       * @description Number of full weeks the employee didn't work in the pay period (0 - 52)
       */
      unpaidWeeks?: number
    }
    Settings: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      settings?: components['schemas']['Accounts']
    }
    Accounts: {
      accounts?: components['schemas']['Account'][]
    }
    Account: {
      /**
       * Format: uuid
       * @description The Xero identifier for Settings.
       */
      accountID?: string
      /**
       * @description The assigned AccountType
       * @enum {string}
       */
      type?: 'PAYELIABILITY' | 'WAGESPAYABLE' | 'WAGESEXPENSE' | 'BANK'
      /** @description A unique 3 digit number for each Account */
      code?: string
      /** @description Name of the Account. */
      name?: string
    }
    Address: {
      /**
       * @description Address line 1 for employee home address
       * @example 19 Taranaki Street
       */
      addressLine1: string
      /**
       * @description Address line 2 for employee home address
       * @example Apt 4
       */
      addressLine2?: string
      /**
       * @description Suburb for employee home address
       * @example Wellington
       */
      city: string
      /**
       * @description Suburb for employee home address
       * @example Te Aro
       */
      suburb?: string
      /**
       * @description PostCode for employee home address
       * @example 6011
       */
      postCode: string
      /**
       * @description Country of HomeAddress
       * @example NEW ZEALAND
       */
      countryName?: string
    }
    BankAccounts: components['schemas']['BankAccount'][]
    BankAccount: {
      /** @description Bank account name (max length = 32) */
      accountName: string
      /** @description Bank account number (digits only; max length = 8) */
      accountNumber: string
      /** @description Bank account sort code (6 digits) */
      sortCode: string
      /** @description Particulars that appear on the statement. */
      particulars?: string
      /** @description Code of a transaction that appear on the statement. */
      code?: string
      /**
       * Format: double
       * @description Dollar amount of a transaction.
       */
      dollarAmount?: number
      /** @description Statement Text/reference for a transaction that appear on the statement. */
      reference?: string
      /**
       * @description Calculation type for the transaction can be 'Fixed Amount' or 'Balance'
       * @enum {string}
       */
      calculationType?: 'FixedAmount' | 'Balance'
    }
    TrackingCategories: {
      pagination?: components['schemas']['Pagination']
      problem?: components['schemas']['Problem']
      trackingCategories?: components['schemas']['TrackingCategory']
    }
    TrackingCategory: {
      /**
       * Format: uuid
       * @description The Xero identifier for Employee groups tracking category.
       */
      employeeGroupsTrackingCategoryID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for Timesheet tracking category.
       */
      timesheetTrackingCategoryID?: string
    }
  }
  responses: never
  parameters: {
    /** @description Xero identifier for Tenant */
    requiredHeader?: string
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Retrieves employees */
  getEmployees: {
    parameters: {
      query?: {
        /**
         * @description Filter by first name and/or lastname
         * @example firstName==John,lastName==Smith
         */
        filter?: string
        /**
         * @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
         * @example 5
         */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an employees */
  createEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "title": "Mr", "firstName": "Mike", "lastName": "Johntzxzpxhmkgson", "dateOfBirth": "2000-01-01", "address": { "addressLine1": "101 Green St", "city": "San Francisco", "postCode": "4351", "countryName": "United Kingdom" }, "email": "83139@starkindustries.com", "gender": "M" } */
        'application/json': components['schemas']['Employee']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves an employees using a unique employee ID */
  getEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
    }
  }
  /** Updates an existing employee */
  updateEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "title": "Mr", "firstName": "Tony", "lastName": "Starkgtrzgquusrson", "dateOfBirth": "1999-01-01", "address": { "addressLine1": "101 Green St", "city": "San Francisco", "postCode": "4432", "countryName": "United Kingdom" }, "email": "58315@starkindustries.com", "gender": "M" } */
        'application/json': components['schemas']['Employee']
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an employment detail for a specific employee */
  createEmployment: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030", "startDate": "2020-09-02" } */
        'application/json': components['schemas']['Employment']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmploymentObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves tax records for a specific employee */
  getEmployeeTax: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeTaxObject']
        }
      }
    }
  }
  /** Updates the tax records for a specific employee */
  updateEmployeeTax: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example */
        'application/json': components['schemas']['EmployeeTax']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeTaxObject']
        }
      }
    }
  }
  /** Retrieves the opening balance for a specific employee */
  getEmployeeOpeningBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeOpeningBalancesObject']
        }
      }
    }
  }
  /** Creates opening balances for a specific employee */
  createEmployeeOpeningBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example [{"periodEndDate":"2020-10-01","daysPaid":3,"unpaidWeeks":2,"grossEarnings":40.0}] */
        'application/json': components['schemas']['EmployeeOpeningBalances']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeOpeningBalancesObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves leave records for a specific employee */
  getEmployeeLeaves: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaves']
        }
      }
    }
  }
  /** Creates leave records for a specific employee */
  createEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4", "description": "Creating a Description", "startDate": "2020-04-24", "endDate": "2020-04-26" } */
        'application/json': components['schemas']['EmployeeLeave']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Updates leave records for a specific employee */
  updateEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Leave id for single object */
        LeaveID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4", "description": "Creating a Description", "startDate": "2020-04-24", "endDate": "2020-04-26", "periods": [ { "periodStartDate": "2020-04-20", "periodEndDate": "2020-04-26", "numberOfUnits": 1, "periodStatus": "Approved" } ] } */
        'application/json': components['schemas']['EmployeeLeave']
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a leave record for a specific employee */
  deleteEmployeeLeave: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Leave id for single object */
        LeaveID: string
      }
    }
    responses: {
      /** @description successful response */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveObject']
        }
      }
    }
  }
  /** Retrieves leave balances for a specific employee */
  getEmployeeLeaveBalances: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveBalances']
        }
      }
    }
  }
  /** Retrieves leave periods for a specific employee */
  getEmployeeLeavePeriods: {
    parameters: {
      query?: {
        /** @description Filter by start date */
        startDate?: string
        /**
         * @description Filter by end date
         * @example Johnson
         */
        endDate?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeavePeriods']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates a leave set-up for a specific employee. This is required before viewing, configuring and requesting leave for an employee */
  createEmployeeLeaveSetup: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "holidayPayOpeningBalance": 10, "annualLeaveOpeningBalance": 100, "sickLeaveHoursToAccrueAnnually": 20, "sickLeaveOpeningBalance": 10 } */
        'application/json': components['schemas']['EmployeeLeaveSetup']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveSetupObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves leave types for a specific employee */
  getEmployeeLeaveTypes: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveTypes']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates leave type records for a specific employee */
  createEmployeeLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "leaveTypeID": "35da97ae-05b9-427f-9a98-69157ba42cec", "scheduleOfAccrual": "AnnuallyAfter6Months", "hoursAccruedAnnually": 10, "maximumToAccrue": 80, "openingBalance": 100, "rateAccruedHourly": 3.5 } */
        'application/json': components['schemas']['EmployeeLeaveType']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeLeaveTypeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves available payment methods for a specific employee */
  getEmployeePaymentMethod: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaymentMethodObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates a payment method for an employee */
  createEmployeePaymentMethod: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example */
        'application/json': components['schemas']['PaymentMethod']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaymentMethodObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves pay templates for a specific employee */
  getEmployeePayTemplates: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeePayTemplates']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates earnings template records for an employee */
  createEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "ratePerUnit": 20, "numberOfUnits": 8, "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "name": "My New One" } */
        'application/json': components['schemas']['EarningsTemplate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsTemplateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Updates an earnings template records for an employee */
  updateEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        PayTemplateEarningID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "ratePerUnit": 25, "numberOfUnits": 4, "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5" } */
        'application/json': components['schemas']['EarningsTemplate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsTemplateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes an employee's earnings template record */
  deleteEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        PayTemplateEarningID: string
      }
    }
    responses: {
      /** @description deletion successful */
      200: {
        content: {
          'application/json': components['schemas']['EarningsTemplateObject']
        }
      }
    }
  }
  /** Creates multiple employee earnings template records for a specific employee */
  createMultipleEmployeeEarningsTemplate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example [{"ratePerUnit":20.0,"numberOfUnits":8.0,"earningsRateID":"f9d8f5b5-9049-47f4-8541-35e200f750a5"},{"ratePerUnit":0.0,"numberOfUnits":8.0,"earningsRateID":"65b83d94-f20f-45e1-85ae-387fcf460c26"}] */
        'application/json': components['schemas']['EarningsTemplates']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EmployeeEarningsTemplates']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves deductions for a specific employee */
  getDeductions: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Deductions']
        }
      }
    }
  }
  /** Creates a new deduction for a specific employee */
  createDeduction: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "deductionName": "My new deduction", "deductionCategory": "NzOther", "liabilityAccountId": "568f2e9a-0870-46cc-8678-f83f132ed4e3" } */
        'application/json': components['schemas']['Deduction']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['DeductionObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a single deduction by using a unique deduction ID */
  getDeduction: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the deduction */
        deductionId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['DeductionObject']
        }
      }
    }
  }
  /** Retrieves statutory deductions */
  getStatutoryDeductions: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['StatutoryDeductions']
        }
      }
    }
  }
  /** Retrieves a specific statutory deduction by using a unique statutory deductions id */
  getStatutoryDeduction: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the statutory deduction */
        id: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['StatutoryDeductionObject']
        }
      }
    }
  }
  /** Retrieves superannuations */
  getSuperannuations: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Superannuations']
        }
      }
    }
  }
  /** Creates a new superannuation */
  createSuperannuation: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "SidSaver", "category": "Other", "liabilityAccountId": "568f2e9a-0870-46cc-8678-f83f132ed4e3", "expenseAccountId": "e4eb36f6-97e3-4427-a394-dd4e1b355c2e", "CalculationTypeNZ": "FixedAmount", "standardAmount": 10 } */
        'application/json': components['schemas']['Benefit']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SuperannuationObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific superannuation using a unique superannuation ID */
  getSuperannuation: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the superannuation */
        SuperannuationID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SuperannuationObject']
        }
      }
    }
  }
  /** Retrieves earnings rates */
  getEarningsRates: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRates']
        }
      }
    }
  }
  /** Creates a new earnings rate */
  createEarningsRate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My Earnings Rate", "earningsType": "RegularEarnings", "rateType": "RatePerUnit", "typeOfUnits": "hours", "expenseAccountID": "e4eb36f6-97e3-4427-a394-dd4e1b355c2e" } */
        'application/json': components['schemas']['EarningsRate']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRateObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific earnings rates by using a unique earnings rate id */
  getEarningsRate: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the earnings rate */
        EarningsRateID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['EarningsRateObject']
        }
      }
    }
  }
  /** Retrieves leave types */
  getLeaveTypes: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /**
         * @description Filters leave types by active status. By default the API returns all leave types.
         * @example true
         */
        ActiveOnly?: boolean
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypes']
        }
      }
    }
  }
  /** Creates a new leave type */
  createLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My wqwhhiktun Leave", "isPaidLeave": false, "showOnPayslip": true } */
        'application/json': components['schemas']['LeaveType']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypeObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific leave type by using a unique leave type ID */
  getLeaveType: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the leave type */
        LeaveTypeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveTypeObject']
        }
      }
    }
  }
  /** Retrieves reimbursements */
  getReimbursements: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Reimbursements']
        }
      }
    }
  }
  /** Creates a new reimbursement */
  createReimbursement: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My new Reimburse", "accountID": "fa5cdc43-643b-4ad8-b4ac-3ffe0d0f4488", "reimbursementCategory": "GSTInclusive", "calculationType": "FixedAmount" } */
        'application/json': components['schemas']['Reimbursement']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['ReimbursementObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific reimbursement by using a unique reimbursement ID */
  getReimbursement: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the reimbursement */
        ReimbursementID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['ReimbursementObject']
        }
      }
    }
  }
  /** Retrieves timesheets */
  getTimesheets: {
    parameters: {
      query?: {
        /**
         * @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100.
         * @example 5
         */
        page?: number
        /**
         * @description Filter by employeeId and/or payrollCalendarId
         * @example employeeId==00000000-0000-0000-0000-000000000000,payrollCalendarId==00000000-0000-0000-0000-000000000000
         */
        filter?: string
        /**
         * @description filter results by any timesheets with a matching timesheet status
         * @example Draft
         */
        status?: string
        /**
         * @description filter results by any timesheets with a startDate on or after the provided date
         * @example 2019-01-02
         */
        startDate?: string
        /**
         * @description filter results by any timesheets with a endDate on or before the provided date
         * @example 2020-01-02
         */
        endDate?: string
        /**
         * @description sort the order of timesheets returned. The default is based on the timesheets createdDate, sorted oldest to newest. Currently, the only other option is to reverse the order based on the timesheets startDate, sorted newest to oldest.
         * @example startDate
         */
        sort?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Timesheets']
        }
      }
    }
  }
  /** Creates a new timesheet */
  createTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030", "employeeID": "68342973-c405-4b86-b5d3-d7b877c27995", "startDate": "2020-04-13", "endDate": "2020-04-19", "timesheetLines": [ { "date": "2020-04-13", "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnits": 8 }, { "date": "2020-04-15", "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnits": 6 } ] } */
        'application/json': components['schemas']['Timesheet']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific timesheet by using a unique timesheet ID */
  getTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
    }
  }
  /** Deletes a timesheet */
  deleteTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLine']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Create a new timesheet line for a specific time sheet */
  createTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "date": "2020-08-03", "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnits": 1 } */
        'application/json': components['schemas']['TimesheetLine']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLineObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Approves a timesheet */
  approveTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Reverts a timesheet to draft */
  revertTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Updates a timesheet line for a specific timesheet */
  updateTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
        /** @description Identifier for the timesheet line */
        TimesheetLineID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "date": "2020-08-04", "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnits": 2 } */
        'application/json': components['schemas']['TimesheetLine']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLineObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes a timesheet line for a specific timesheet */
  deleteTimesheetLine: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the timesheet */
        TimesheetID: string
        /** @description Identifier for the timesheet line */
        TimesheetLineID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetLine']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves payrun calendars */
  getPayRunCalendars: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendars']
        }
      }
    }
  }
  /** Creates a new payrun calendar */
  createPayRunCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "name": "My Weekly Cal", "calendarType": "Weekly", "periodStartDate": "2020-05-01", "paymentDate": "2020-05-15" } */
        'application/json': components['schemas']['PayRunCalendar']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendarObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific payrun calendar by using a unique payroll calendar ID */
  getPayRunCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the payrun calendars */
        PayrollCalendarID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunCalendarObject']
        }
      }
    }
  }
  /** Retrieves an employee's salary and wages */
  getEmployeeSalaryAndWages: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWages']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Creates an employee salary and wage record */
  createEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnitsPerWeek": 2, "ratePerUnit": 10, "numberOfUnitsPerDay": 2, "daysPerWeek": 1, "effectiveFrom": "2020-05-01", "annualSalary": 100, "status": "Active", "paymentType": "Salary" } */
        'application/json': components['schemas']['SalaryAndWage']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWageObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves an employee's salary and wages record by using a unique salary and wage ID */
  getEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        SalaryAndWagesID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWages']
        }
      }
    }
  }
  /** Updates an employee's salary and wages record */
  updateEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single pay template earnings object */
        SalaryAndWagesID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "numberOfUnitsPerWeek": 3, "ratePerUnit": 11, "numberOfUnitsPerDay": 3, "daysPerWeek": 1, "effectiveFrom": "2020-05-15", "annualSalary": 101, "status": "Active", "paymentType": "Salary" } */
        'application/json': components['schemas']['SalaryAndWage']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWageObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Deletes an employee's salary and wages record */
  deleteEmployeeSalaryAndWage: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
        /** @description Id for single salary and wages object */
        SalaryAndWagesID: string
      }
    }
    responses: {
      /** @description deletion successful */
      200: {
        content: {
          'application/json': components['schemas']['SalaryAndWageObject']
        }
      }
    }
  }
  /** Retrieves pay runs */
  getPayRuns: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /** @description By default get payruns will return all the payruns for an organization. You can add GET https://api.xero.com/payroll.xro/2.0/payRuns?statu={PayRunStatus} to filter the payruns by status. */
        status?: 'Draft' | 'Posted'
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
    }
  }
  /** Creates a pay run */
  createPayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "payrollCalendarID": "9aa56064-990f-4ad3-a189-d966d8f6a030", "periodStartDate": "2020-09-08", "periodEndDate": "2020-09-15", "paymentDate": "2020-09-20", "payRunStatus": "Draft", "payRunType": "Scheduled", "calendarType": "Weekly" } */
        'application/json': components['schemas']['PayRun']
      }
    }
    responses: {
      /** @description created payrun results */
      200: {
        content: {
          'application/json': components['schemas']['PayRunObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves a specific pay run by using a unique pay run ID */
  getPayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the pay run */
        PayRunID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunObject']
        }
      }
    }
  }
  /** Updates a pay run */
  updatePayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the pay run */
        PayRunID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "paymentDate": "2019-07-01" } */
        'application/json': components['schemas']['PayRun']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRunObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves payslips */
  getPaySlips: {
    parameters: {
      query: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 100. */
        page?: number
        /** @description PayrunID which specifies the containing payrun of payslips to retrieve. By default, the API does not group payslips by payrun. */
        PayRunID: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaySlips']
        }
      }
    }
  }
  /** Retrieves a specific payslip by a unique pay slip ID */
  getPaySlip: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier for the payslip */
        PaySlipID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaySlipObject']
        }
      }
    }
  }
  /** Creates an employee pay slip */
  updatePaySlipLineItems: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Identifier for the payslip */
        PaySlipID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "earningsLines": [ { "earningsLineID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "earningsRateID": "f9d8f5b5-9049-47f4-8541-35e200f750a5", "displayName": "Ordinary Time", "ratePerUnit": 25, "numberOfUnits": 0, "amount": 0, "isLinkedToTimesheet": false, "isSystemGenerated": true }, { "earningsLineID": "65b83d94-f20f-45e1-85ae-387fcf460c26", "earningsRateID": "65b83d94-f20f-45e1-85ae-387fcf460c26", "displayName": "Salary", "ratePerUnit": 0, "numberOfUnits": 8, "amount": 0, "isLinkedToTimesheet": false, "isSystemGenerated": false } ], "leaveEarningsLines": [ { "earningsLineID": "0441497f-5dc7-4cd3-a90d-f2e07e21b2a6", "earningsRateID": "39b3560a-5d2f-4538-924a-4349dc86396e", "displayName": "Holiday Pay", "fixedAmount": 268.8, "amount": 268.8, "isLinkedToTimesheet": false, "isSystemGenerated": true } ], "deductionLines": [ { "deductionTypeID": "a3760fe4-68a4-4e38-8326-fe616af7dc74", "amount": 100 } ], "leaveAccrualLines": [ { "leaveTypeID": "0441497f-5dc7-4cd3-a90d-f2e07e21b2a6", "numberOfUnits": 268.8 }, { "leaveTypeID": "b0b1b79e-2a25-46c2-ad08-ca25ef48d7e4", "numberOfUnits": 0 }, { "leaveTypeID": "f2f994cf-1899-46f3-ad4f-5d92d78c3719", "numberOfUnits": 0 }, { "leaveTypeID": "34129765-11cb-4d8c-b568-84a2219beda3", "numberOfUnits": 0 } ], "superannuationLines": [ { "superannuationTypeID": "563273ea-0dae-4f82-86a4-e0db77c008ea", "displayName": "KiwiSaver", "amount": 108.86, "fixedAmount": 3, "percentage": 3, "manualAdjustment": false } ], "employeeTaxLines": [ { "taxLineID": "1084146b-e890-489c-aed3-06de80f63d84", "amount": 1057.22, "globalTaxTypeID": "11", "manualAdjustment": false } ], "employerTaxLines": [ { "taxLineID": "6f9eb8cd-0f4a-440b-939c-bdb0f6ad694c", "amount": 18.9, "globalTaxTypeID": "10", "manualAdjustment": false } ], "statutoryDeductionLines": [ { "statutoryDeductionTypeID": "b5efd8d1-0c93-4a14-a314-b5cba4a4e6b3", "amount": 108.86 } ], "grossEarningsHistory": { "daysPaid": 3, "unpaidWeeks": 0 } } */
        'application/json': components['schemas']['PaySlip']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PaySlipObject']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /** Retrieves settings */
  getSettings: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Settings']
        }
      }
    }
  }
  /** Retrieves tracking categories */
  getTrackingCategories: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TrackingCategories']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
