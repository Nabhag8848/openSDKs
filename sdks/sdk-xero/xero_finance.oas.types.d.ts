/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/CashValidation': {
    /**
     * Get cash validation
     * @description Summarizes the total cash position for each account for an org
     */
    get: operations['getCashValidation']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/AccountingActivities/AccountUsage': {
    /**
     * Get account usage
     * @description A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
     */
    get: operations['getAccountingActivityAccountUsage']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/AccountingActivities/LockHistory': {
    /**
     * Get lock history
     * @description Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
     */
    get: operations['getAccountingActivityLockHistory']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/AccountingActivities/ReportHistory': {
    /**
     * Get report history
     * @description For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
     */
    get: operations['getAccountingActivityReportHistory']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/AccountingActivities/UserActivities': {
    /**
     * Get user activities
     * @description For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
     */
    get: operations['getAccountingActivityUserActivities']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/BalanceSheet': {
    /**
     * Get Balance Sheet report
     * @description The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
     */
    get: operations['getFinancialStatementBalanceSheet']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/Cashflow': {
    /**
     * Get Cash flow report
     * @description The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
     */
    get: operations['getFinancialStatementCashflow']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/ProfitAndLoss': {
    /**
     * Get Profit & Loss report
     * @description The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
     */
    get: operations['getFinancialStatementProfitAndLoss']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/TrialBalance': {
    /**
     * Get Trial Balance report
     * @description The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
     */
    get: operations['getFinancialStatementTrialBalance']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/contacts/revenue': {
    /**
     * Get revenue by contacts report
     * @description The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
     */
    get: operations['getFinancialStatementContactsRevenue']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FinancialStatements/contacts/expense': {
    /**
     * Get expense by contacts report
     * @description The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
     */
    get: operations['getFinancialStatementContactsExpense']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/BankStatementsPlus/statements': {
    /**
     * Get Bank Statement Accounting
     * @description For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender's assessment measures.
     */
    get: operations['getBankStatementAccounting']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    AccountUsage: {
      /** @description The month this usage item contains data for */
      month?: string
      /**
       * Format: uuid
       * @description The account this usage item contains data for
       */
      accountId?: string
      /** @description The currency code this usage item contains data for */
      currencyCode?: string
      /**
       * Format: double
       * @description Total received
       */
      totalReceived?: number
      /**
       * Format: int32
       * @description Count of received
       */
      countReceived?: number
      /**
       * Format: double
       * @description Total paid
       */
      totalPaid?: number
      /**
       * Format: int32
       * @description Count of paid
       */
      countPaid?: number
      /**
       * Format: double
       * @description Total value of manual journals
       */
      totalManualJournal?: number
      /**
       * Format: int32
       * @description Count of manual journals
       */
      countManualJournal?: number
      /** @description The name of the account */
      accountName?: string
      /** @description Shown if set */
      reportingCode?: string
      /** @description Shown if set */
      reportingCodeName?: string
      /**
       * Format: date-time
       * @description Last modified date UTC format
       */
      reportCodeUpdatedDateUtc?: string
    }
    AccountUsageResponse: {
      /**
       * Format: uuid
       * @description The requested Organisation to which the data pertains
       */
      organisationId?: string
      /** @description The start month of the report */
      startMonth?: string
      /** @description The end month of the report */
      endMonth?: string
      accountUsage?: components['schemas']['AccountUsage'][]
    }
    HistoryRecordResponse: {
      /** @description The type of change recorded against the document */
      changes?: string
      /** @description UTC date that the history record was created */
      dateUTCString?: string
      /**
       * Format: date-time
       * @description UTC date that the history record was created
       */
      dateUTC?: string
      /** @description The users first and last name */
      user?: string
      /** @description Description of the change event or transaction */
      details?: string
    }
    LockHistoryModel: {
      /**
       * Format: date
       * @description Date the account hard lock was set
       */
      hardLockDate?: string
      /**
       * Format: date
       * @description Date the account soft lock was set
       */
      softLockDate?: string
      /**
       * Format: date-time
       * @description The system date time that the lock was updated
       */
      updatedDateUtc?: string
    }
    LockHistoryResponse: {
      /**
       * Format: uuid
       * @description The requested Organisation to which the data pertains
       */
      organisationId?: string
      /**
       * Format: date
       * @description The end date of the report
       */
      endDate?: string
      lockDates?: components['schemas']['LockHistoryModel'][]
    }
    PracticeResponse: {
      /**
       * Format: int32
       * @description Year of becoming a partner.
       */
      xeroPartnerSince?: number
      /** @description Customer tier e.g. Silver */
      tier?: string
      /** @description Country of location. */
      location?: string
      /**
       * Format: int32
       * @description Organisation count.
       */
      organisationCount?: number
      /** @description Staff certified (true/false). */
      staffCertified?: boolean
    }
    Problem: {
      type?: components['schemas']['ProblemType']
      title?: string
      /** Format: int32 */
      status?: number
      detail?: string
    }
    /** @enum {string} */
    ProblemType:
      | 'NotSet'
      | 'bank-account-not-found'
      | 'internal-error'
      | 'invalid-application'
      | 'invalid-request'
      | 'organisation-not-found'
      | 'organisation-offline'
      | 'request-timeout'
      | 'service-unavailable'
      | 'unauthorized'
      | 'rate-limit-error'
    ReportHistoryModel: {
      /** @description Report code or report title */
      reportName?: string
      /** @description The date or date range of the report */
      reportDateText?: string
      /**
       * Format: date-time
       * @description The system date time that the report was published
       */
      publishedDateUtc?: string
    }
    ReportHistoryResponse: {
      /**
       * Format: uuid
       * @description The requested Organisation to which the data pertains
       */
      organisationId?: string
      /**
       * Format: date
       * @description The end date of the report
       */
      endDate?: string
      reports?: components['schemas']['ReportHistoryModel'][]
    }
    UserActivitiesResponse: {
      /**
       * Format: uuid
       * @description The requested Organisation to which the data pertains
       */
      organisationId?: string
      /** @description The month of the report */
      dataMonth?: string
      users?: components['schemas']['UserResponse'][]
    }
    UserResponse: {
      /**
       * Format: uuid
       * @description The Xero identifier for the user
       */
      userId?: string
      /**
       * Format: date-time
       * @description Timestamp of user creation.
       */
      userCreatedDateUtc?: string
      /**
       * Format: date-time
       * @description Timestamp of user last login
       */
      lastLoginDateUtc?: string
      /** @description User is external partner. */
      isExternalPartner?: boolean
      /** @description User has Accountant role. */
      hasAccountantRole?: boolean
      /** @description Month period in format  yyyy-MM. */
      monthPeriod?: string
      /**
       * Format: int32
       * @description Number of times the user has logged in.
       */
      numberOfLogins?: number
      /**
       * Format: int32
       * @description Number of documents created.
       */
      numberOfDocumentsCreated?: number
      /**
       * Format: double
       * @description Net value of documents created.
       */
      netValueDocumentsCreated?: number
      /**
       * Format: double
       * @description Absolute value of documents created.
       */
      absoluteValueDocumentsCreated?: number
      attachedPractices?: components['schemas']['PracticeResponse'][]
      historyRecords?: components['schemas']['HistoryRecordResponse'][]
    }
    BankStatementResponse: {
      statementLines?: components['schemas']['StatementLinesResponse']
      currentStatement?: components['schemas']['CurrentStatementResponse']
    }
    CashAccountResponse: {
      /**
       * Format: double
       * @description Total value of transactions in the journals which are not reconciled to bank statement lines, and have a positive (debit) value.
       */
      unreconciledAmountPos?: number
      /**
       * Format: double
       * @description Total value of transactions in the journals which are not reconciled to bank statement lines, and have a negative (credit) value.
       */
      unreconciledAmountNeg?: number
      /**
       * Format: double
       * @description Starting (or historic) balance from the journals (manually keyed in by users on account creation - unverified).
       */
      startingBalance?: number
      /**
       * Format: double
       * @description Current cash at bank accounting value from the journals.
       */
      accountBalance?: number
      /** @description Currency which the cashAccount transactions relate to. */
      balanceCurrency?: string
    }
    CashValidationResponse: {
      /**
       * Format: uuid
       * @description The Xero identifier for an account
       */
      accountId?: string
      statementBalance?: components['schemas']['StatementBalanceResponse']
      /**
       * Format: date
       * @description UTC Date when the last bank statement item was entered into Xero. This date is represented in ISO 8601 format.
       */
      statementBalanceDate?: string
      bankStatement?: components['schemas']['BankStatementResponse']
      cashAccount?: components['schemas']['CashAccountResponse']
    }
    CurrentStatementResponse: {
      /**
       * Format: date
       * @description Looking at the most recent bank statement, this field indicates the first date which transactions on this statement pertain to. This date is represented in ISO 8601 format.
       */
      startDate?: string
      /**
       * Format: date
       * @description Looking at the most recent bank statement, this field indicates the last date which transactions on this statement pertain to. This date is represented in ISO 8601 format.
       */
      endDate?: string
      /**
       * Format: double
       * @description Looking at the most recent bank statement, this field indicates the balance before the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).
       */
      startBalance?: number
      /**
       * Format: double
       * @description Looking at the most recent bank statement, this field indicates the balance after the transactions on the statement are applied (note, this is not always populated by the bank in every single instance (~10%)).
       */
      endBalance?: number
      /**
       * Format: date-time
       * @description Looking at the most recent bank statement, this field indicates when the document was imported into Xero.  This date is represented in ISO 8601 format.
       */
      importedDateTimeUtc?: string
      /** @description Looking at the most recent bank statement, this field indicates the source of the data (direct bank feed, indirect bank feed, file upload, or manual keying). */
      importSourceType?: string
    }
    DataSourceResponse: {
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.
       */
      directBankFeed?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.
       */
      indirectBankFeed?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.
       */
      fileUpload?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.
       */
      manual?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.  This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
       */
      directBankFeedPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
       */
      indirectBankFeedPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
       */
      fileUploadPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data. Only positive transactions are included.
       */
      manualPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a direct bank feed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
       */
      directBankFeedNeg?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a indirect bank feed to Xero (usually via Yodlee).   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
       */
      indirectBankFeedNeg?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was a CSV file upload in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
       */
      fileUploadNeg?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was manually keyed in to Xero.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
       */
      manualNeg?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only positive transactions are included.
       */
      otherPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.  Only negative transactions are included.
       */
      otherNeg?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the source of the data was any other category.   This gives an indication on the certainty of correctness of the data.
       */
      other?: number
    }
    StatementBalanceResponse: {
      /**
       * Format: double
       * @description Total closing balance of the account. This includes both reconciled and unreconciled bank statement lines. The closing balance will always be represented as a positive number, with it’s debit/credit status defined in the statementBalanceDebitCredit field.
       */
      value?: number
      /** @description The DEBIT or CREDIT status of the account. Cash accounts in credit have a negative balance. */
      type?: string
    }
    StatementLinesResponse: {
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is positive.
       */
      unreconciledAmountPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where both the reconciled flag is set to FALSE, and the amount is negative.
       */
      unreconciledAmountNeg?: number
      /**
       * Format: int32
       * @description Count of all statement lines where the reconciled flag is set to FALSE.
       */
      unreconciledLines?: number
      /**
       * Format: double
       * @description Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is positive. Provides an indication of the age of unreconciled transactions.
       */
      avgDaysUnreconciledPos?: number
      /**
       * Format: double
       * @description Sum-product of age of statement line in days multiplied by transaction amount, divided by the sum of transaction amount - in for those statement lines in which the reconciled flag is set to FALSE, and the amount is negative. Provides an indication of the age of unreconciled transactions.
       */
      avgDaysUnreconciledNeg?: number
      /**
       * Format: date
       * @description UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.
       */
      earliestUnreconciledTransaction?: string
      /**
       * Format: date
       * @description UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to FALSE.  This date is represented in ISO 8601 format.
       */
      latestUnreconciledTransaction?: string
      /**
       * Format: double
       * @description Sum of the amounts of all deleted statement lines.  Transactions may be deleted due to duplication or otherwise.
       */
      deletedAmount?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines.  This is used as a metric of comparison to the unreconciled figures above.
       */
      totalAmount?: number
      dataSource?: components['schemas']['DataSourceResponse']
      /**
       * Format: date
       * @description UTC Date which is the earliest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.
       */
      earliestReconciledTransaction?: string
      /**
       * Format: date
       * @description UTC Date which is the latest transaction date of a statement line for which the reconciled flag is set to TRUE.  This date is represented in ISO 8601 format.
       */
      latestReconciledTransaction?: string
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is positive.
       */
      reconciledAmountPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where both the reconciled flag is set to TRUE, and the amount is negative.
       */
      reconciledAmountNeg?: number
      /**
       * Format: int32
       * @description Count of all statement lines where the reconciled flag is set to TRUE
       */
      reconciledLines?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the amount is positive
       */
      totalAmountPos?: number
      /**
       * Format: double
       * @description Sum of the amounts of all statement lines where the amount is negative.
       */
      totalAmountNeg?: number
    }
    BalanceSheetAccountDetail: {
      /** @description Accounting code */
      code?: string
      /**
       * Format: uuid
       * @description ID of the account
       */
      accountID?: string
      /** @description Account name */
      name?: string
      /** @description Reporting code */
      reportingCode?: string
      /**
       * Format: double
       * @description Total movement on this account
       */
      total?: number
    }
    BalanceSheetAccountGroup: {
      accountTypes?: components['schemas']['BalanceSheetAccountType'][]
      /**
       * Format: double
       * @description Total value of all the accounts in this type
       */
      total?: number
    }
    BalanceSheetAccountType: {
      /** @description The type of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountTypes'>Account Types</a> */
      accountType?: string
      /** @description A list of all accounts of this type. Refer to the Account section below for each account element detail. */
      accounts?: components['schemas']['BalanceSheetAccountDetail'][]
      /**
       * Format: double
       * @description Total value of all the accounts in this type
       */
      total?: number
    }
    BalanceSheetResponse: {
      /**
       * Format: date
       * @description Balance date of the report
       */
      balanceDate?: string
      asset?: components['schemas']['BalanceSheetAccountGroup']
      liability?: components['schemas']['BalanceSheetAccountGroup']
      equity?: components['schemas']['BalanceSheetAccountGroup']
    }
    CashBalance: {
      /**
       * Format: double
       * @description Opening balance of cash and cash equivalents
       */
      openingCashBalance?: number
      /**
       * Format: double
       * @description Closing balance of cash and cash equivalents
       */
      closingCashBalance?: number
      /**
       * Format: double
       * @description Net movement of cash and cash equivalents for the period
       */
      netCashMovement?: number
    }
    CashflowAccount: {
      /**
       * Format: uuid
       * @description ID of the account
       */
      accountId?: string
      /** @description The type of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountTypes'>Account Types</a> */
      accountType?: string
      /** @description The class of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountClassTypes'>Account Class Types</a> */
      accountClass?: string
      /** @description Account code */
      code?: string
      /** @description Account name */
      name?: string
      /** @description Reporting code used for cash flow classification */
      reportingCode?: string
      /**
       * Format: double
       * @description Total amount for the account
       */
      total?: number
    }
    CashflowActivity: {
      /** @description Name of the cashflow activity type. It will be either Operating Activities, Investing Activities or Financing Activities */
      name?: string
      /**
       * Format: double
       * @description Total value of the activity type
       */
      total?: number
      cashflowTypes?: components['schemas']['CashflowType'][]
    }
    CashflowResponse: {
      /**
       * Format: date
       * @description Start date of the report
       */
      startDate?: string
      /**
       * Format: date
       * @description End date of the report
       */
      endDate?: string
      cashBalance?: components['schemas']['CashBalance']
      /** @description Break down of cash and cash equivalents for the period */
      cashflowActivities?: components['schemas']['CashflowActivity'][]
    }
    CashflowType: {
      /** @description Name of the activity */
      name?: string
      /**
       * Format: double
       * @description Total value of the activity
       */
      total?: number
      /** @description List of the accounts in this activity */
      accounts?: components['schemas']['CashflowAccount'][]
    }
    PnlAccount: {
      /**
       * Format: uuid
       * @description ID of the account
       */
      accountID?: string
      /** @description The type of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountTypes'>Account Types</a> */
      accountType?: string
      /** @description Account code */
      code?: string
      /** @description Account name */
      name?: string
      /** @description Reporting code (Shown if set) */
      reportingCode?: string
      /**
       * Format: double
       * @description Total movement on this account
       */
      total?: number
    }
    PnlAccountClass: {
      /**
       * Format: double
       * @description Total revenue/expense value
       */
      total?: number
      /** @description Contains trading income and other income for revenue section / operating expenses and direct cost for expense section if the data is available for each section. Refer to the account type element below */
      accountTypes?: components['schemas']['PnlAccountType'][]
    }
    PnlAccountType: {
      /**
       * Format: double
       * @description Total movement on this account type
       */
      total?: number
      /** @description Name of this account type, it will be either Trading Income or Other Income for Revenue section / Direct Cost or Operating Expenses for Expense section */
      title?: string
      /** @description A list of the movement on each account detail during the query period. Refer to the account detail element below */
      accounts?: components['schemas']['PnlAccount'][]
    }
    ProfitAndLossResponse: {
      /**
       * Format: date
       * @description Start date of the report
       */
      startDate?: string
      /**
       * Format: date
       * @description End date of the report
       */
      endDate?: string
      /**
       * Format: double
       * @description Net profit loss value
       */
      netProfitLoss?: number
      revenue?: components['schemas']['PnlAccountClass']
      expense?: components['schemas']['PnlAccountClass']
    }
    TrialBalanceAccount: {
      /**
       * Format: uuid
       * @description ID of the account
       */
      accountId?: string
      /** @description The type of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountTypes'>Account Types</a> */
      accountType?: string
      /** @description Customer defined alpha numeric account code e.g 200 or SALES */
      accountCode?: string
      /** @description The class of the account. See <a href='https://developer.xero.com/documentation/api/types#AccountClassTypes'>Account Class Types</a> */
      accountClass?: string
      /** @description Accounts with a status of ACTIVE can be updated to ARCHIVED. See <a href='https://developer.xero.com/documentation/api/types#AccountStatusCodes'>Account Status Codes</a> */
      status?: string
      /** @description Reporting code (Shown if set) */
      reportingCode?: string
      /** @description Name of the account */
      accountName?: string
      balance?: components['schemas']['TrialBalanceEntry']
      /**
       * Format: double
       * @description Value of balance. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
       */
      signedBalance?: number
      accountMovement?: components['schemas']['TrialBalanceMovement']
    }
    TrialBalanceEntry: {
      /**
       * Format: double
       * @description Net movement or net balance in the account
       */
      value?: number
      /** @description Sign (Debit/Credit) of the movement of balance in the account */
      entryType?: string
    }
    TrialBalanceMovement: {
      /**
       * Format: double
       * @description Debit amount
       */
      debits?: number
      /**
       * Format: double
       * @description Credit amount
       */
      credits?: number
      movement?: components['schemas']['TrialBalanceEntry']
      /**
       * Format: double
       * @description Value of movement. Expense and Asset accounts code debits as positive. Revenue, Liability, and Equity accounts code debits as negative
       */
      signedMovement?: number
    }
    TrialBalanceResponse: {
      /**
       * Format: date
       * @description Start date of the report
       */
      startDate?: string
      /**
       * Format: date
       * @description End date of the report
       */
      endDate?: string
      /** @description Refer to the accounts section below */
      accounts?: components['schemas']['TrialBalanceAccount'][]
    }
    IncomeByContactResponse: {
      /**
       * Format: date
       * @description Start date of the report
       */
      startDate?: string
      /**
       * Format: date
       * @description End date of the report
       */
      endDate?: string
      /**
       * Format: double
       * @description Total value
       */
      total?: number
      totalDetail?: components['schemas']['TotalDetail']
      totalOther?: components['schemas']['TotalOther']
      contacts?: components['schemas']['ContactDetail'][]
      manualJournals?: components['schemas']['ManualJournalTotal']
    }
    ManualJournalTotal: {
      /**
       * Format: double
       * @description Total value of manual journals.
       */
      total?: number
    }
    TotalDetail: {
      /**
       * Format: double
       * @description Total paid invoice and cash value within the period.
       */
      totalPaid?: number
      /**
       * Format: double
       * @description Total outstanding invoice value within the period.
       */
      totalOutstanding?: number
      /**
       * Format: double
       * @description Total unapplied credited value within the period.
       */
      totalCreditedUnApplied?: number
    }
    TotalOther: {
      /**
       * Format: double
       * @description Total outstanding invoice value within the period where the invoices are more than 90 days old
       */
      totalOutstandingAged?: number
      /**
       * Format: double
       * @description Total voided value.
       */
      totalVoided?: number
      /**
       * Format: double
       * @description Total credited value.
       */
      totalCredited?: number
    }
    ContactDetail: {
      /**
       * Format: uuid
       * @description ID of the contact associated with the transactions.
       *
       * Transactions with no contact will be grouped under the special ID: 86793108-198C-46D8-90A3-43C1D12686CE.
       *
       * Transactions that are receive or spend bank transfers will be grouped under the special ID: 207322B3-6A58-4BE7-80F1-430123914AD6
       */
      contactId?: string
      /**
       * @description Name of the contact associated with the transactions.
       *
       * If no contact is associated with the transactions this will appear as “None Provided”,
       *
       * For receive or spend bank transfer transactions, this will appear as “Bank Transfer”.
       */
      name?: string
      /**
       * Format: double
       * @description Total value for the contact
       */
      total?: number
      totalDetail?: components['schemas']['ContactTotalDetail']
      totalOther?: components['schemas']['ContactTotalOther']
      /** @description A list of account codes involved in transactions. */
      accountCodes?: string[]
    }
    ContactTotalDetail: {
      /**
       * Format: double
       * @description Total paid invoice and cash value for the contact within the period.
       */
      totalPaid?: number
      /**
       * Format: double
       * @description Total outstanding invoice value for the contact within the period.
       */
      totalOutstanding?: number
      /**
       * Format: double
       * @description Total unapplied credited value for the contact within the period.
       */
      totalCreditedUnApplied?: number
    }
    ContactTotalOther: {
      /**
       * Format: double
       * @description Total outstanding invoice value for the contact within the period where the invoices are more than 90 days old
       */
      totalOutstandingAged?: number
      /**
       * Format: double
       * @description Total voided value for the contact.
       */
      totalVoided?: number
      /**
       * Format: double
       * @description Total credited value for the contact.
       */
      totalCredited?: number
      /**
       * Format: int32
       * @description Number of transactions for the contact.
       */
      transactionCount?: number
    }
    BankStatementAccountingResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of bank account
       */
      bankAccountId?: string
      /** @description Name of bank account */
      bankAccountName?: string
      /** @description Currency code of the bank account */
      bankAccountCurrencyCode?: string
      /** @description List of bank statements and linked accounting data for the requested period */
      statements?: components['schemas']['StatementResponse'][]
    }
    BankTransactionResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of transaction
       */
      bankTransactionId?: string
      /**
       * Format: uuid
       * @description Xero Identifier of batch payment. Present if the transaction is part of a batch.
       */
      batchPaymentId?: string
      contact?: components['schemas']['ContactResponse']
      /**
       * Format: date
       * @description Date of transaction - YYYY-MM-DD
       */
      date?: string
      /**
       * Format: double
       * @description Amount of transaction
       */
      amount?: number
      /** @description The LineItems element can contain any number of individual LineItem sub-elements. Not included in summary mode */
      lineItems?: components['schemas']['LineItemResponse'][]
    }
    ContactResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of contact
       */
      contactId?: string
      /** @description Full name of contact/organisation */
      contactName?: string
    }
    CreditNoteResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of credit note
       */
      creditNoteId?: string
      contact?: components['schemas']['ContactResponse']
      /**
       * Format: double
       * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
       */
      total?: number
      /** @description Not included in summary mode */
      lineItems?: components['schemas']['LineItemResponse'][]
    }
    InvoiceResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of invoice
       */
      invoiceId?: string
      contact?: components['schemas']['ContactResponse']
      /**
       * Format: double
       * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
       */
      total?: number
      /** @description Not included in summary mode */
      lineItems?: components['schemas']['LineItemResponse'][]
    }
    LineItemResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of account
       */
      accountId?: string
      /** @description Shown if set */
      reportingCode?: string
      /**
       * Format: double
       * @description Amount of line item
       */
      lineAmount?: number
      /** @description Account type */
      accountType?: string
    }
    OverpaymentResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of overpayment
       */
      overpaymentId?: string
      contact?: components['schemas']['ContactResponse']
      /**
       * Format: double
       * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
       */
      total?: number
      /** @description Not included in summary mode */
      lineItems?: components['schemas']['LineItemResponse'][]
    }
    PaymentResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of payment
       */
      paymentId?: string
      /**
       * Format: uuid
       * @description Xero Identifier of batch payment. Present if the payment was created as part of a batch.
       */
      batchPaymentId?: string
      /**
       * Format: date
       * @description Date the payment is being made (YYYY-MM-DD) e.g. 2009-09-06
       */
      date?: string
      /**
       * Format: double
       * @description The amount of the payment
       */
      amount?: number
      /**
       * Format: double
       * @description The bank amount of the payment
       */
      bankAmount?: number
      /**
       * Format: double
       * @description Exchange rate when payment is received. Only used for non base currency invoices and credit notes e.g. 0.7500
       */
      currencyRate?: number
      invoice?: components['schemas']['InvoiceResponse']
      creditNote?: components['schemas']['CreditNoteResponse']
      prepayment?: components['schemas']['PrepaymentResponse']
      overpayment?: components['schemas']['OverpaymentResponse']
    }
    PrepaymentResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of prepayment
       */
      prepaymentId?: string
      contact?: components['schemas']['ContactResponse']
      /**
       * Format: double
       * @description Total of Invoice tax inclusive (i.e. SubTotal + TotalTax); Not included in summary mode
       */
      total?: number
      /** @description Not included in summary mode */
      lineItems?: components['schemas']['LineItemResponse'][]
    }
    StatementLineResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of statement line
       */
      statementLineId?: string
      /**
       * Format: date
       * @description Date of when statement line was posted
       */
      postedDate?: string
      /** @description Payee description of statement line */
      payee?: string
      /** @description Reference description of statement line */
      reference?: string
      /** @description Notes description of statement line */
      notes?: string
      /** @description Cheque number of statement line */
      chequeNo?: string
      /**
       * Format: double
       * @description Amount of statement line
       */
      amount?: number
      /**
       * Format: date
       * @description Transaction date of statement line
       */
      transactionDate?: string
      /** @description Type of statement line */
      type?: string
      /** @description Boolean to show if statement line is reconciled */
      isReconciled?: boolean
      /** @description Boolean to show if statement line is duplicate */
      isDuplicate?: boolean
      /** @description Boolean to show if statement line is deleted */
      isDeleted?: boolean
      /** @description List of payments associated with reconciled statement lines */
      payments?: components['schemas']['PaymentResponse'][]
      /** @description List of bank transactions associated with reconciled statement lines */
      bankTransactions?: components['schemas']['BankTransactionResponse'][]
    }
    StatementResponse: {
      /**
       * Format: uuid
       * @description Xero Identifier of statement
       */
      statementId?: string
      /**
       * Format: date
       * @description Start date of statement
       */
      startDate?: string
      /**
       * Format: date
       * @description End date of statement
       */
      endDate?: string
      /**
       * Format: date-time
       * @description Utc date time of when the statement was imported in Xero
       */
      importedDateTimeUtc?: string
      /** @description Identifies where the statement data in Xero was sourced, 1) direct bank feed, automatically loaded from the bank (eg STMTIMPORTSRC/CBAFEED); 2) indirect bank feed, automatically loaded from a 3rd party provider (eg STMTIMPORTSRC/YODLEE); 3) manually uploaded bank feed (eg STMTIMPORTSRC/CSV) or 4) manually entered statement data (STMTIMPORTSRC/MANUAL). */
      importSource?: string
      /**
       * Format: double
       * @description Opening balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied. Where not supplied, the value will be 0.
       */
      startBalance?: number
      /**
       * Format: double
       * @description Closing balance sourced from imported bank statements (if supplied). Note, for manually uploaded statements, this balance is also manual and usually not supplied. Where not supplied, the value will be 0.
       */
      endBalance?: number
      /**
       * Format: double
       * @description Opening statement balance calculated in Xero (= bank account conversion balance plus sum of imported bank statement lines). Note: If indicative statement balance doesn't match imported statement balance for the same date, either the conversion (opening at inception) balance in Xero is wrong or there's an error in the bank statement lines in Xero. Ref: https://central.xero.com/s/article/Compare-the-statement-balance-in-Xero-to-your-actual-bank-balance?userregion=true
       */
      indicativeStartBalance?: number
      /**
       * Format: double
       * @description Closing statement balance calculated in Xero (= bank account conversion balance plus sum of imported bank statement lines). Note: If indicative statement balance doesn't match imported statement balance for the same date, either the conversion (opening at inception) balance in Xero is wrong or there's an error in the bank statement lines in Xero. Ref: https://central.xero.com/s/article/Compare-the-statement-balance-in-Xero-to-your-actual-bank-balance?userregion=true
       */
      indicativeEndBalance?: number
      /** @description List of statement lines */
      statementLines?: components['schemas']['StatementLineResponse'][]
    }
  }
  responses: never
  parameters: {
    /**
     * @description Xero identifier for Tenant
     * @example YOUR_XERO_TENANT_ID
     */
    requiredHeader?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Get cash validation
   * @description Summarizes the total cash position for each account for an org
   */
  getCashValidation: {
    parameters: {
      query?: {
        /**
         * @description date, yyyy-MM-dd
         *
         * If no parameter is provided, the current date will be used.
         *
         * The ‘balance date’ will return transactions based on the accounting date entered by the user.  Transactions before the balanceDate will be included.
         * The user has discretion as to which accounting period the transaction relates to.
         *
         * The ‘balance date’  will control the latest maximum date of transactions included in the aggregate numbers.  Balance date does not affect the CurrentStatement object, as this will always return the most recent statement before asAtSystemDate (if specified)
         * @example 2021-09-15
         */
        balanceDate?: string
        /**
         * @description date, yyyy-MM-dd
         *
         * If no parameter is provided, the current date will be used.
         *
         * The ‘as at’ date will return transactions based on the  creation date.  It reflects the date the transactions were entered into Xero, not the accounting date.
         * The ‘as at’ date can not be overridden by the user.  This can be used to estimate a ‘historical frequency of reconciliation’.
         *
         * The ‘as at’ date will affect the current statement in the response, as any candidate statements created after this date will be filtered out.  Thus the current statement returned will be the most recent statement prior to the specified ‘as at’ date.  Be aware that neither the begin date, nor the balance date, will affect the current statement.
         *
         * Note;  information is only presented when system architecture allows, meaning historical cash validation information will be an estimate. In addition, delete events are not aware of the ‘as at’ functionality in this endpoint, meaning that transactions deleted at the time the API is accessed will be considered to always have been deleted.
         * @example 2021-09-15
         */
        asAtSystemDate?: string
        /**
         * @description date, yyyy-MM-dd
         *
         * If no parameter is provided, the aggregate results will be drawn from the user’s total history.
         *
         * The ‘begin date’ will return transactions based on the accounting date entered by the user. Transactions after the beginDate will be included.
         * The user has discretion as to which accounting period the transaction relates to.
         * @example 2021-09-15
         */
        beginDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['CashValidationResponse'][]
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get account usage
   * @description A summary of how each account is being transacted on exposing the level of detail and amounts attributable to manual adjustments.
   */
  getAccountingActivityAccountUsage: {
    parameters: {
      query?: {
        /**
         * @description date, yyyy-MM
         *
         * If no parameter is provided, the month 12 months prior to the end month will be used.
         *
         * Account usage for up to 12 months from this date will be returned.
         * @example 2020-09
         */
        startMonth?: string
        /**
         * @description date, yyyy-MM
         *
         * If no parameter is provided, the current month will be used.
         *
         * Account usage for up to 12 months prior to this date will be returned.
         * @example 2021-09
         */
        endMonth?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['AccountUsageResponse']
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get lock history
   * @description Provides a history of locking of accounting books. Locking may be an indicator of good accounting practices that could reduce the risk of changes to accounting records in prior periods.
   */
  getAccountingActivityLockHistory: {
    parameters: {
      query?: {
        /**
         * @description date, yyyy-MM-dd
         *
         * If no parameter is provided, the current date will be used.
         *
         * Any changes to hard or soft lock dates that were made within the period up to 12 months before this date will be returned.
         *
         * Please be aware that there may be a delay of up to 3 days before a change is visible from this API.
         * @example 2021-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['LockHistoryResponse']
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get report history
   * @description For a specified organisation, provides a summary of all the reports published within a given period, which may be an indicator for good business management and oversight.
   */
  getAccountingActivityReportHistory: {
    parameters: {
      query?: {
        /**
         * @description date, yyyy-MM-dd
         *
         * If no parameter is provided, the current date will be used.
         *
         * Any reports that were published within the period up to 12 months before this date will be returned.
         *
         * Please be aware that there may be a delay of up to 3 days before a published report is visible from this API.
         * @example 2021-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['ReportHistoryResponse']
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get user activities
   * @description For a specified organisation, provides a list of all the users registered, and a history of their accounting transactions. Also identifies the existence of an external accounting advisor and the level of interaction.
   */
  getAccountingActivityUserActivities: {
    parameters: {
      query?: {
        /**
         * @description date, yyyy-MM
         *
         * The specified month must be complete (in the past); The current month cannot be specified since it is not complete.
         *
         * If no parameter is provided, the month immediately previous to the current month will be used.
         *
         * Any user activities occurring within the specified month will be returned.
         *
         * Please be aware that there may be a delay of up to 3 days before a user activity is visible from this API.
         * @example 2021-09
         */
        dataMonth?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['UserActivitiesResponse']
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get Balance Sheet report
   * @description The balance sheet report is a standard financial report which describes the financial position of an organisation at a point in time.
   */
  getFinancialStatementBalanceSheet: {
    parameters: {
      query?: {
        /**
         * @description Specifies the date for balance sheet report.
         *
         * Format yyyy-MM-dd. If no parameter is provided, the current date will be used.
         * @example 2020-06-30
         */
        balanceDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['BalanceSheetResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
      /** @description Server Error */
      503: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get Cash flow report
   * @description The statement of cash flows - direct method, provides the year to date changes in operating, financing and investing cash flow activities for an organisation. Cashflow statement is not available in US region at this stage.
   */
  getFinancialStatementCashflow: {
    parameters: {
      query?: {
        /**
         * @description Date e.g. yyyy-MM-dd
         *
         * Specifies the start date for cash flow report.
         *
         * If no parameter is provided, the date of 12 months before the end date will be used.
         * @example 2020-09-15
         */
        startDate?: string
        /**
         * @description Date e.g. yyyy-MM-dd
         *
         * Specifies the end date for cash flow report.
         *
         * If no parameter is provided, the current date will be used.
         * @example 2021-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['CashflowResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
      /** @description Server Error */
      503: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get Profit & Loss report
   * @description The profit and loss statement is a standard financial report providing detailed year to date income and expense detail for an organisation.
   */
  getFinancialStatementProfitAndLoss: {
    parameters: {
      query?: {
        /**
         * @description Date e.g. yyyy-MM-dd
         *
         * Specifies the start date for profit and loss report
         *
         * If no parameter is provided, the date of 12 months before the end date will be used.
         * @example 2020-09-15
         */
        startDate?: string
        /**
         * @description Date e.g. yyyy-MM-dd
         *
         * Specifies the end date for profit and loss report
         *
         * If no parameter is provided, the current date will be used.
         * @example 2021-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['ProfitAndLossResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get Trial Balance report
   * @description The trial balance provides a detailed list of all accounts of an organisation at a point in time, with revenue and expense items being year to date.
   */
  getFinancialStatementTrialBalance: {
    parameters: {
      query?: {
        /**
         * @description Date e.g. yyyy-MM-dd
         *
         * Specifies the end date for trial balance report
         *
         * If no parameter is provided, the current date will be used.
         * @example 2021-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['TrialBalanceResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get revenue by contacts report
   * @description The revenue by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
   */
  getFinancialStatementContactsRevenue: {
    parameters: {
      query?: {
        /**
         * @description Specifies the customer contacts to be included in the report.
         *
         * If no parameter is provided, all customer contacts will be included
         */
        contactIds?: string[]
        /**
         * @description Specifies whether to include the manual journals in the report.
         *
         * If no parameter is provided, manual journals will not be included.
         * @example true
         */
        includeManualJournals?: boolean
        /**
         * @description Date yyyy-MM-dd
         *
         * Specifies the start date for the report.
         *
         * If no parameter is provided, the date of 12 months before the end date will be used.
         *
         * It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency.
         * @example 2020-09-15
         */
        startDate?: string
        /**
         * @description Date yyyy-MM-dd
         *
         * Specifies the end date for the report.
         *
         * If no parameter is provided, the current date will be used.
         *
         * It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency.
         * @example 2020-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['IncomeByContactResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get expense by contacts report
   * @description The expense by contact report provides a year to date profit and loss for customers and suppliers for a given organisation, including detailed contact information.
   */
  getFinancialStatementContactsExpense: {
    parameters: {
      query?: {
        /**
         * @description Specifies the customer contacts to be included in the report.
         *
         * If no parameter is provided, all customer contacts will be included
         */
        contactIds?: string[]
        /**
         * @description Specifies whether to include the manual journals in the report.
         *
         * If no parameter is provided, manual journals will not be included.
         * @example true
         */
        includeManualJournals?: boolean
        /**
         * @description Date yyyy-MM-dd
         *
         * Specifies the start date for the report.
         *
         * If no parameter is provided, the date of 12 months before the end date will be used.
         *
         * It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency.
         * @example 2020-09-15
         */
        startDate?: string
        /**
         * @description Date yyyy-MM-dd
         *
         * Specifies the end date for the report.
         *
         * If no parameter is provided, the current date will be used.
         *
         * It is recommended to always specify both a start date and end date; While the initial range may be set to 12 months, this may need to be reduced for high volume organisations in order to improve latency.
         * @example 2020-09-15
         */
        endDate?: string
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['IncomeByContactResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
  /**
   * Get Bank Statement Accounting
   * @description For lenders that prefer using bank statement data as the source of truth.  We provide a data point that will allow access to customer bank statements, plus for reconciled bank transactions the matching accounting, invoice and billing data as well.  As customers reconcile bank statements to invoices and bills, this transaction detail will provide valuable insight for lender's assessment measures.
   */
  getBankStatementAccounting: {
    parameters: {
      query: {
        /**
         * @description string, GUID
         *
         * Bank account Id
         */
        BankAccountID: string
        /**
         * @description date, yyyy-MM-dd
         *
         * Specifies the start date of the query period.
         * The maximum range of the query period is 12 months. If the specified query period is more than 12 months the request will be rejected.
         * @example 2020-07-01
         */
        FromDate: string
        /**
         * @description date, yyyy-MM-dd
         *
         * Specifies the end date of the query period.
         * If the end date is a future date, the request will be rejected.
         * @example 2021-06-30
         */
        ToDate: string
        /**
         * @description boolean, true/false
         *
         * The default value is true if no parameter is provided.
         *
         * In summary mode, the response will exclude the computation-heavy LineItems fields from bank transaction, invoice, credit note, prepayment and overpayment data, making the API calls quicker and more efficient.
         * @example true
         */
        SummaryOnly?: boolean
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['BankStatementAccountingResponse']
        }
      }
      /** @description BadRequest */
      400: {
        content: {
          'application/json': components['schemas']['Problem']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
