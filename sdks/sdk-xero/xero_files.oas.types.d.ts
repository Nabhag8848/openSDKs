/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/Files': {
    /** Retrieves files */
    get: operations['getFiles']
    /** Uploads a File to the inbox */
    post: operations['uploadFile']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Files/{FileId}': {
    /** Retrieves a file by a unique file ID */
    get: operations['getFile']
    /**
     * Update a file
     * @description Updates file properties of a single file
     */
    put: operations['updateFile']
    /**
     * Deletes a specific file
     * @description Delete a specific file
     */
    delete: operations['deleteFile']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Files/{FolderId}': {
    /** Uploads a File to a specific folder */
    post: operations['uploadFileToFolder']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Files/{FileId}/Content': {
    /**
     * Retrieves the content of a specific file
     * @description By passing in the appropriate options, retrieve data for specific file
     */
    get: operations['getFileContent']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Files/{FileId}/Associations': {
    /**
     * Retrieves a specific file associations
     * @description By passing in the appropriate options,
     */
    get: operations['getFileAssociations']
    /**
     * Creates a new file association
     * @description By passing in the appropriate options, you can create a new folder
     */
    post: operations['createFileAssociation']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Files/{FileId}/Associations/{ObjectId}': {
    /**
     * Deletes an existing file association
     * @description By passing in the appropriate options, you can create a new folder
     */
    delete: operations['deleteFileAssociation']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Associations/{ObjectId}': {
    /**
     * Retrieves an association object using a unique object ID
     * @description By passing in the appropriate options, you can retrieve an association
     */
    get: operations['getAssociationsByObject']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Associations/Count': {
    /**
     * Retrieves a count of associations for a list of objects.
     * @description By passing in the appropriate options, you can retrieve the association count for objects
     */
    get: operations['getAssociationsCount']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Folders': {
    /**
     * Retrieves folders
     * @description By passing in the appropriate options, you can search for available folders
     */
    get: operations['getFolders']
    /**
     * Creates a new folder
     * @description By passing in the appropriate properties, you can create a new folder
     */
    post: operations['createFolder']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Folders/{FolderId}': {
    /**
     * Retrieves specific folder by using a unique folder ID
     * @description By passing in the appropriate ID, you can search for specific folder
     */
    get: operations['getFolder']
    /**
     * Updates an existing folder
     * @description By passing in the appropriate ID and properties, you can update a folder
     */
    put: operations['updateFolder']
    /**
     * Deletes a folder
     * @description By passing in the appropriate ID, you can delete a folder
     */
    delete: operations['deleteFolder']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Inbox': {
    /**
     * Retrieves inbox folder
     * @description Search for the user inbox
     */
    get: operations['getInbox']
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Files: {
      /** @example 2 */
      TotalCount?: number
      /** @example 1 */
      Page?: number
      /** @example 50 */
      PerPage?: number
      Items?: components['schemas']['FileObject'][]
    }
    FileObject: {
      /**
       * @description File Name
       * @example File2.jpg
       */
      Name?: string
      /**
       * @description MimeType of the file (image/png, image/jpeg, application/pdf, etc..)
       * @example image/jpeg
       */
      MimeType?: string
      /**
       * @description Numeric value in bytes
       * @example 3615
       */
      Size?: number
      /**
       * @description Created date in UTC
       * @example 2020-12-03T19:04:58.6970000
       */
      CreatedDateUtc?: string
      /**
       * @description Updated date in UTC
       * @example 2020-12-03T19:04:58.6970000
       */
      UpdatedDateUtc?: string
      User?: components['schemas']['User']
      /**
       * Format: uuid
       * @description File object's UUID
       * @example d290f1ee-6c54-4b01-90e6-d701748f0851
       */
      Id?: string
      /**
       * Format: uuid
       * @description Folder relation object's UUID
       * @example 0f8ccf21-7267-4268-9167-a1e2c40c84c8
       */
      FolderId?: string
    }
    UploadObject: {
      /** Format: byte */
      body: string
      /** @description exact name of the file you are uploading */
      name: string
      filename: string
      mimeType?: string
    }
    User: {
      /**
       * Format: uuid
       * @description Xero identifier
       * @example 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
       */
      Id: string
      /**
       * @description Key is Name, but returns Email address of user who created the file
       * @example john.smith@mail.com
       */
      Name?: string
      /**
       * @description First name of user
       * @example John
       */
      FirstName?: string
      /**
       * @description Last name of user
       * @example Smith
       */
      LastName?: string
      /**
       * @description Last name of user
       * @example Smith
       */
      FullName?: string
    }
    Folders: {
      Folders?: components['schemas']['Folder'][]
    }
    Folder: {
      /**
       * @description The name of the folder
       * @example assets
       */
      Name?: string
      /**
       * @description The number of files in the folder
       * @example 5
       */
      FileCount?: number
      /**
       * @description The email address used to email files to the inbox. Only the inbox will have this element.
       * @example foo@bar.com
       */
      Email?: string
      /**
       * @description to indicate if the folder is the Inbox. The Inbox cannot be renamed or deleted.
       * @example true
       */
      IsInbox?: boolean
      /**
       * Format: uuid
       * @description Xero unique identifier for a folder  Files
       * @example 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
       */
      Id?: string
    }
    Association: {
      /**
       * Format: uuid
       * @description The unique identifier of the file
       */
      FileId?: string
      /**
       * Format: uuid
       * @description The identifier of the object that the file is being associated with (e.g. InvoiceID, BankTransactionID, ContactID)
       */
      ObjectId?: string
      ObjectGroup?: components['schemas']['ObjectGroup']
      ObjectType?: components['schemas']['ObjectType']
    }
    /**
     * @description The Object Group that the object is in. These roughly correlate to the endpoints that can be used to retrieve the object via the core accounting API.
     * @enum {string}
     */
    ObjectGroup:
      | 'Account'
      | 'BankTransaction'
      | 'Contact'
      | 'CreditNote'
      | 'Invoice'
      | 'Item'
      | 'ManualJournal'
      | 'Overpayment'
      | 'Payment'
      | 'Prepayment'
      | 'Quote'
      | 'Receipt'
    /**
     * @description The Object Type
     * @enum {string}
     */
    ObjectType:
      | 'Unknown'
      | 'Accpay'
      | 'AccPayCredit'
      | 'AccPayPayment'
      | 'AccRec'
      | 'AccRecCredit'
      | 'AccRecPayment'
      | 'Adjustment'
      | 'ApCreditPayment'
      | 'ApOverPayment'
      | 'ApOverPaymentPayment'
      | 'ApOverPaymentSourcePayment'
      | 'ApPrepayment'
      | 'ApPrepaymentPayment'
      | 'ApPrepaymentSourcePayment'
      | 'ArCreditPayment'
      | 'ArOverPayment'
      | 'ArOverpaymentPayment'
      | 'ArOverpaymentSourcePayment'
      | 'ArPrepayment'
      | 'ArPrepaymentPayment'
      | 'ArPrepaymentSourcePayment'
      | 'CashPaid'
      | 'CashRec'
      | 'ExpPayment'
      | 'ManJournal'
      | 'PurchaseOrder'
      | 'Receipt'
      | 'Transfer'
      | 'Account'
      | 'Contact'
      | 'Business'
      | 'Employee'
      | 'Person'
      | 'User'
      | 'Org'
      | 'FixedAsset'
      | 'PayRun'
      | 'PriceListItem'
      | 'Bank'
      | 'Current'
      | 'Equity'
      | 'Expense'
      | 'Fixed'
      | 'Liability'
      | 'Prepayment'
      | 'Revenue'
      | 'Sales'
      | 'Overheads'
      | 'Depreciatn'
      | 'OtherIncome'
      | 'DirectCosts'
      | 'Currliab'
      | 'Termliab'
      | 'NonCurrent'
      | 'SalesQuote'
  }
  responses: never
  parameters: {
    /**
     * @description Xero identifier for Tenant
     * @example YOUR_XERO_TENANT_ID
     */
    requiredHeader?: string
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Retrieves files */
  getFiles: {
    parameters: {
      query?: {
        /** @description pass an optional page size value */
        pagesize?: number
        /** @description number of records to skip for pagination */
        page?: number
        /** @description values to sort by */
        sort?: 'Name' | 'Size' | 'CreatedDateUTC'
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Files']
        }
      }
    }
  }
  /** Uploads a File to the inbox */
  uploadFile: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadObject']
      }
    }
    responses: {
      /** @description A successful request */
      201: {
        content: {
          'application/json': components['schemas']['FileObject']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /** Retrieves a file by a unique file ID */
  getFile: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['FileObject']
        }
      }
    }
  }
  /**
   * Update a file
   * @description Updates file properties of a single file
   */
  updateFile: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    requestBody: {
      content: {
        /** @example { "FolderId": "bf924975-7097-46f2-a143-1ecfbab3c8c3" } */
        'application/json': components['schemas']['FileObject']
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['FileObject']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Deletes a specific file
   * @description Delete a specific file
   */
  deleteFile: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    responses: {
      /** @description Successful deletion - return response 204 no content */
      204: {
        content: never
      }
    }
  }
  /** Uploads a File to a specific folder */
  uploadFileToFolder: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description pass required folder id to save file to specific folder */
        FolderId: string
      }
    }
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadObject']
      }
    }
    responses: {
      /** @description A successful request */
      201: {
        content: {
          'application/json': components['schemas']['FileObject']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Retrieves the content of a specific file
   * @description By passing in the appropriate options, retrieve data for specific file
   */
  getFileContent: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    responses: {
      /** @description returns the byte array of the specific file based on id */
      200: {
        content: {
          'application/octet-stream': string
        }
      }
    }
  }
  /**
   * Retrieves a specific file associations
   * @description By passing in the appropriate options,
   */
  getFileAssociations: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Association'][]
        }
      }
    }
  }
  /**
   * Creates a new file association
   * @description By passing in the appropriate options, you can create a new folder
   */
  createFileAssociation: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description File id for single object */
        FileId: string
      }
    }
    requestBody: {
      content: {
        /** @example { "ObjectId": "1270bf7c-5d18-473a-9231-1e36c4bd33ed", "ObjectGroup": "Contact", "ObjectType": "Business" } */
        'application/json': components['schemas']['Association']
      }
    }
    responses: {
      /** @description A successful request */
      201: {
        content: {
          'application/json': components['schemas']['Association']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Deletes an existing file association
   * @description By passing in the appropriate options, you can create a new folder
   */
  deleteFileAssociation: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description File id for single object */
        FileId: string
        /** @description Object id for single object */
        ObjectId: string
      }
    }
    responses: {
      /** @description Successful deletion - return response 204 no content */
      204: {
        content: never
      }
    }
  }
  /**
   * Retrieves an association object using a unique object ID
   * @description By passing in the appropriate options, you can retrieve an association
   */
  getAssociationsByObject: {
    parameters: {
      query?: {
        /** @description pass an optional page size value */
        pagesize?: number
        /** @description number of records to skip for pagination */
        page?: number
        /** @description values to sort by */
        sort?: 'Name' | 'CreatedDateUTC'
        /** @description direction to sort by */
        direction?: 'ASC' | 'DESC'
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Object id for single object */
        ObjectId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Association'][]
        }
      }
    }
  }
  /**
   * Retrieves a count of associations for a list of objects.
   * @description By passing in the appropriate options, you can retrieve the association count for objects
   */
  getAssociationsCount: {
    parameters: {
      query: {
        /** @description A comma-separated list of object ids */
        ObjectIds: string[]
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description A dictionary of the object Ids and associations count */
      200: {
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  /**
   * Retrieves folders
   * @description By passing in the appropriate options, you can search for available folders
   */
  getFolders: {
    parameters: {
      query?: {
        /** @description values to sort by */
        sort?: 'Name' | 'Size' | 'CreatedDateUTC'
      }
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Folder'][]
        }
      }
    }
  }
  /**
   * Creates a new folder
   * @description By passing in the appropriate properties, you can create a new folder
   */
  createFolder: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "Name": "My Docs" } */
        'application/json': components['schemas']['Folder']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Retrieves specific folder by using a unique folder ID
   * @description By passing in the appropriate ID, you can search for specific folder
   */
  getFolder: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Folder id for single object */
        FolderId: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
    }
  }
  /**
   * Updates an existing folder
   * @description By passing in the appropriate ID and properties, you can update a folder
   */
  updateFolder: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Folder id for single object */
        FolderId: string
      }
    }
    requestBody: {
      content: {
        /** @example { "Name": "Your Docs" } */
        'application/json': components['schemas']['Folder']
      }
    }
    responses: {
      /** @description return the updated object */
      200: {
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
      /** @description invalid input, object invalid */
      400: {
        content: {
          'application/json': unknown
        }
      }
    }
  }
  /**
   * Deletes a folder
   * @description By passing in the appropriate ID, you can delete a folder
   */
  deleteFolder: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Folder id for single object */
        FolderId: string
      }
    }
    responses: {
      /** @description Successful deletion - return response 204 no content */
      204: {
        content: never
      }
    }
  }
  /**
   * Retrieves inbox folder
   * @description Search for the user inbox
   */
  getInbox: {
    parameters: {
      header?: {
        'xero-tenant-id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Folder']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
