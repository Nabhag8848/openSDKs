/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/FeedConnections': {
    /**
     * Searches for feed connections
     * @description By passing in the appropriate options, you can search for available feed connections in the system.
     */
    get: operations['getFeedConnections']
    /**
     * Create one or more new feed connection
     * @description By passing in the FeedConnections array object in the body, you can create one or more new feed connections
     */
    post: operations['createFeedConnections']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FeedConnections/{id}': {
    /**
     * Retrieve single feed connection based on a unique id provided
     * @description By passing in a FeedConnection Id options, you can search for matching feed connections
     */
    get: operations['getFeedConnection']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/FeedConnections/DeleteRequests': {
    /**
     * Delete an existing feed connection
     * @description By passing in FeedConnections array object in the body, you can delete a feed connection.
     */
    post: operations['deleteFeedConnections']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Statements': {
    /**
     * Retrieve all statements
     * @description By passing in parameters, you can search for matching statements
     */
    get: operations['getStatements']
    /** Creates one or more new statements */
    post: operations['createStatements']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Statements/{statementId}': {
    /**
     * Retrieve single statement based on unique id provided
     * @description By passing in a statement id, you can search for matching statements
     */
    get: operations['getStatement']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    FeedConnections: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['FeedConnection'][]
    }
    FeedConnection: {
      /**
       * Format: uuid
       * @description GUID used to identify the Account.
       * @example 0d3cf8d-95dc-4466-8dc0-47e6d1197e28
       */
      id?: string
      /**
       * @description This account identifier is generated by the financial institute (FI). This must be unique for your financial institute.
       * @example 10000123
       */
      accountToken?: string
      /**
       * @description String(40) when AccountType is BANK String(4) when AccountType is CREDITCARD The Account Number is used to match the feed to a Xero Bank Account. The API will create a new Xero Bank Account if a match to an existing Xero Bank Account is not found. Only the last 4 digits must be supplied for Credit Card numbers. Must be included if AccountId is not specified.
       * @example 3809087654321500
       */
      accountNumber?: string
      /**
       * @description The Account Name will be used for the creation of a new Xero Bank Account if a matching Xero Bank Account is not found.
       * @example Joe's Savings Account
       */
      accountName?: string
      /**
       * Format: uuid
       * @description Xero identifier for a bank account in Xero. Must be included if AccountNumber is not specified.
       * @example 079a88ea-276d-41fb-a1f1-366ef3e22921
       */
      accountId?: string
      /**
       * @description High level bank account type - BANK CREDITCARD BANK encompasses all bank account types other than credit cards.
       * @example BANK
       * @enum {unknown}
       */
      accountType?: 'BANK' | 'CREDITCARD'
      currency?: components['schemas']['CurrencyCode']
      country?: components['schemas']['CountryCode']
      /**
       * @description the current status of the feed connection
       * @example REJECTED
       * @enum {string}
       */
      status?: 'PENDING' | 'REJECTED'
      error?: components['schemas']['Error']
    }
    Statements: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['Statement'][]
    }
    Pagination: {
      /**
       * @description Page number which specifies the set of records to retrieve. Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?page=2 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned.
       * @example 1
       */
      page?: number
      /**
       * @description Page size which specifies how many records per page will be returned (default 50). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100.
       * @example 10
       */
      pageSize?: number
      /**
       * @description Number of pages available
       * @example 1
       */
      pageCount?: number
      /**
       * @description Number of items returned
       * @example 2
       */
      itemCount?: number
    }
    Statement: {
      /**
       * Format: uuid
       * @description GUID used to identify the Statement.
       * @example ba4f3127-5e46-427d-80ea-dea2fcd26afe
       */
      id?: string
      /**
       * Format: uuid
       * @description The Xero generated feed connection Id that identifies the Xero Bank Account Container into which the statement should be delivered. This is obtained by calling GET FeedConnections.
       * @example 87cb0dc8-fa32-409c-b622-19f8de8dcc83
       */
      feedConnectionId?: string
      /**
       * @description Current status of statements
       * @example PENDING
       * @enum {unknown}
       */
      status?: 'PENDING' | 'REJECTED' | 'DELIVERED'
      /**
       * Format: date
       * @description Opening balance date (can be no older than one year from the current date) ISO-8601 YYYY-MM-DD
       * @example 2018-07-27
       */
      startDate?: string
      /**
       * Format: date
       * @description Closing balance date ISO-8601 YYYY-MM-DD
       * @example 2018-07-27
       */
      endDate?: string
      startBalance?: components['schemas']['StartBalance']
      endBalance?: components['schemas']['EndBalance']
      statementLines?: components['schemas']['StatementLines']
      errors?: components['schemas']['Error'][]
      /** @example 1 */
      statementLineCount?: number
    }
    /** @description The starting balance of the statement */
    StartBalance: {
      /**
       * Format: double
       * @description decimal(19,4) unsigned Opening/closing balance amount.
       * @example 9.0000
       */
      amount?: number
      creditDebitIndicator?: components['schemas']['CreditDebitIndicator']
    }
    /** @description The StartBalance plus all the Statement Line Amounts should be equal to the EndBalance Amount. */
    EndBalance: {
      /**
       * Format: double
       * @example 10.1340
       */
      amount?: number
      creditDebitIndicator?: components['schemas']['CreditDebitIndicator']
    }
    StatementLines: components['schemas']['StatementLine'][]
    /** @description the lines details for a statement */
    StatementLine: {
      /**
       * Format: date
       * @description The date that the transaction was processed or cleared as seen in internet banking ISO-8601 YYYY-MM-DD
       * @example 2018-06-10
       */
      postedDate?: string
      /**
       * @description Transaction description
       * @example Description for statement line 2
       */
      description?: string
      /**
       * Format: double
       * @description Transaction amount
       * @example 5.00
       */
      amount?: number
      creditDebitIndicator?: components['schemas']['CreditDebitIndicator']
      /**
       * @description Financial institute's internal transaction identifier. If provided this field is factored into duplicate detection.
       * @example transaction-id-2
       */
      transactionId?: string
      /**
       * @description Typically the merchant or payee name
       * @example Payee name for statement line 2
       */
      payeeName?: string
      /**
       * @description Optional field to enhance the Description
       * @example Reference for statement line 2
       */
      reference?: string
      /**
       * @description The cheque/check number
       * @example 021
       */
      chequeNumber?: string
      /**
       * @description Descriptive transaction type
       * @example Refund
       */
      transactionType?: string
    }
    /** @description On error, the API consumer will receive an HTTP response with a HTTP Status Code of 4xx or 5xx and a Content-Type of application/problem+json. */
    Error: {
      /**
       * @description Human readable high level error description.
       * @example Invalid Application
       */
      title?: string
      /**
       * @description The numeric HTTP Status Code, e.g. 404
       * @example 403
       */
      status?: number
      /**
       * @description Human readable detailed error description.
       * @example The application has not been configured to use these API endpoints.
       */
      detail?: string
      /**
       * @description Identifies the type of error.
       * @example invalid-application
       * @enum {string}
       */
      type?:
        | 'invalid-request'
        | 'invalid-application'
        | 'invalid-feed-connection'
        | 'duplicate-statement'
        | 'invalid-end-balance'
        | 'invalid-start-and-end-date'
        | 'invalid-start-date'
        | 'internal-error'
        | 'feed-already-connected-in-current-organisation'
        | 'invalid-end-date'
        | 'statement-not-found'
        | 'feed-connected-in-different-organisation'
        | 'feed-already-connected-in-different-organisation'
        | 'bank-feed-not-found'
        | 'invalid-country-specified'
        | 'invalid-organisation-bank-feeds'
        | 'invalid-organisation-multi-currency'
        | 'invalid-feed-connection-for-organisation'
        | 'invalid-user-role'
        | 'account-not-valid'
        | 'feed-not-found-or-already-deleted'
    }
    /**
     * @description If the statement balances are credit or debit, the CreditDebitIndicator should be specified from the perspective of the Customer.
     * @enum {string}
     */
    CreditDebitIndicator: 'CREDIT' | 'DEBIT'
    /**
     * @description 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
     * @example AUD
     * @enum {string}
     */
    CurrencyCode:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRU'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STN'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZMK'
      | 'ZWD'
    /**
     * @description ISO-3166 alpha-2 country code, e.g. US, AU This element is required only when the Application supports multi-region. Talk to your Partner Manager to confirm if this is the case.
     * @example GB
     * @enum {string}
     */
    CountryCode:
      | 'AD'
      | 'AE'
      | 'AF'
      | 'AG'
      | 'AI'
      | 'AL'
      | 'AM'
      | 'AN'
      | 'AO'
      | 'AQ'
      | 'AR'
      | 'AS'
      | 'AT'
      | 'AU'
      | 'AW'
      | 'AZ'
      | 'BA'
      | 'BB'
      | 'BD'
      | 'BE'
      | 'BF'
      | 'BG'
      | 'BH'
      | 'BI'
      | 'BJ'
      | 'BL'
      | 'BM'
      | 'BN'
      | 'BO'
      | 'BR'
      | 'BS'
      | 'BT'
      | 'BW'
      | 'BY'
      | 'BZ'
      | 'CA'
      | 'CC'
      | 'CD'
      | 'CF'
      | 'CG'
      | 'CH'
      | 'CI'
      | 'CK'
      | 'CL'
      | 'CM'
      | 'CN'
      | 'CO'
      | 'CR'
      | 'CU'
      | 'CV'
      | 'CW'
      | 'CX'
      | 'CY'
      | 'CZ'
      | 'DE'
      | 'DJ'
      | 'DK'
      | 'DM'
      | 'DO'
      | 'DZ'
      | 'EC'
      | 'EE'
      | 'EG'
      | 'EH'
      | 'ER'
      | 'ES'
      | 'ET'
      | 'FI'
      | 'FJ'
      | 'FK'
      | 'FM'
      | 'FO'
      | 'FR'
      | 'GA'
      | 'GB'
      | 'GD'
      | 'GE'
      | 'GG'
      | 'GH'
      | 'GI'
      | 'GL'
      | 'GM'
      | 'GN'
      | 'GQ'
      | 'GR'
      | 'GT'
      | 'GU'
      | 'GW'
      | 'GY'
      | 'HK'
      | 'HN'
      | 'HR'
      | 'HT'
      | 'HU'
      | 'ID'
      | 'IE'
      | 'IL'
      | 'IM'
      | 'IN'
      | 'IO'
      | 'IQ'
      | 'IR'
      | 'IS'
      | 'IT'
      | 'JE'
      | 'JM'
      | 'JO'
      | 'JP'
      | 'KE'
      | 'KG'
      | 'KH'
      | 'KI'
      | 'KM'
      | 'KN'
      | 'KP'
      | 'KR'
      | 'KW'
      | 'KY'
      | 'KZ'
      | 'LA'
      | 'LB'
      | 'LC'
      | 'LI'
      | 'LK'
      | 'LR'
      | 'LS'
      | 'LT'
      | 'LU'
      | 'LV'
      | 'LY'
      | 'MA'
      | 'MC'
      | 'MD'
      | 'ME'
      | 'MF'
      | 'MG'
      | 'MH'
      | 'MK'
      | 'ML'
      | 'MM'
      | 'MN'
      | 'MO'
      | 'MP'
      | 'MR'
      | 'MS'
      | 'MT'
      | 'MU'
      | 'MV'
      | 'MW'
      | 'MX'
      | 'MY'
      | 'MZ'
      | 'NA'
      | 'NC'
      | 'NE'
      | 'NG'
      | 'NI'
      | 'NL'
      | 'NO'
      | 'NP'
      | 'NR'
      | 'NU'
      | 'NZ'
      | 'OM'
      | 'PA'
      | 'PE'
      | 'PF'
      | 'PG'
      | 'PH'
      | 'PK'
      | 'PL'
      | 'PM'
      | 'PN'
      | 'PR'
      | 'PS'
      | 'PT'
      | 'PW'
      | 'PY'
      | 'QA'
      | 'RE'
      | 'RO'
      | 'RS'
      | 'RU'
      | 'RW'
      | 'SA'
      | 'SB'
      | 'SC'
      | 'SD'
      | 'SE'
      | 'SG'
      | 'SH'
      | 'SI'
      | 'SJ'
      | 'SK'
      | 'SL'
      | 'SM'
      | 'SN'
      | 'SO'
      | 'SR'
      | 'SS'
      | 'ST'
      | 'SV'
      | 'SX'
      | 'SY'
      | 'SZ'
      | 'TC'
      | 'TD'
      | 'TG'
      | 'TH'
      | 'TJ'
      | 'TK'
      | 'TL'
      | 'TM'
      | 'TN'
      | 'TO'
      | 'TR'
      | 'TT'
      | 'TV'
      | 'TW'
      | 'TZ'
      | 'UA'
      | 'UG'
      | 'US'
      | 'UY'
      | 'UZ'
      | 'VA'
      | 'VC'
      | 'VE'
      | 'VG'
      | 'VI'
      | 'VN'
      | 'VU'
      | 'WF'
      | 'WS'
      | 'XK'
      | 'YE'
      | 'YT'
      | 'ZA'
      | 'ZM'
      | 'ZW'
  }
  responses: never
  parameters: {
    /** @description Xero identifier for Tenant */
    requiredHeader?: string
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Searches for feed connections
   * @description By passing in the appropriate options, you can search for available feed connections in the system.
   */
  getFeedConnections: {
    parameters: {
      query?: {
        /** @description Page number which specifies the set of records to retrieve. By default the number of the records per set is 10. Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?page=1 to get the second set of the records. When page value is not a number or a negative number, by default, the first set of records is returned. */
        page?: number
        /** @description Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/FeedConnections?pageSize=100 to specify page size of 100. */
        pageSize?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria returned with pagination and items array */
      202: {
        content: {
          'application/json': components['schemas']['FeedConnections']
        }
      }
      /** @description validation error response */
      400: {
        content: never
      }
    }
  }
  /**
   * Create one or more new feed connection
   * @description By passing in the FeedConnections array object in the body, you can create one or more new feed connections
   */
  createFeedConnections: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    /** @description Feed Connection(s) array object in the body */
    requestBody: {
      content: {
        /**
         * @example {
         *   "items": [
         *     {
         *       "accountToken": "foobar71760",
         *       "accountNumber": "123458637",
         *       "accountName": "SDK Bank 90861",
         *       "accountType": "BANK",
         *       "currency": "GBP"
         *     }
         *   ]
         * }
         */
        'application/json': components['schemas']['FeedConnections']
      }
    }
    responses: {
      /** @description success new feed connection(s)response */
      202: {
        content: {
          'application/json': components['schemas']['FeedConnections']
        }
      }
      /** @description failed to create new feed connection(s)response */
      400: {
        content: {
          'application/json': components['schemas']['FeedConnections']
        }
      }
    }
  }
  /**
   * Retrieve single feed connection based on a unique id provided
   * @description By passing in a FeedConnection Id options, you can search for matching feed connections
   */
  getFeedConnection: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Unique identifier for retrieving single object */
        id: string
      }
    }
    responses: {
      /** @description success returns a FeedConnection object matching the id in response */
      200: {
        content: {
          'application/json': components['schemas']['FeedConnection']
        }
      }
      /** @description bad input parameter */
      400: {
        content: never
      }
    }
  }
  /**
   * Delete an existing feed connection
   * @description By passing in FeedConnections array object in the body, you can delete a feed connection.
   */
  deleteFeedConnections: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    /** @description Feed Connections array object in the body */
    requestBody: {
      content: {
        /**
         * @example {
         *   "items": [
         *     {
         *       "id": "b4cc693b-24d9-42ec-a6d4-2943d253ff63"
         *     }
         *   ]
         * }
         */
        'application/json': components['schemas']['FeedConnections']
      }
    }
    responses: {
      /** @description Success response for deleted feed connection */
      202: {
        content: {
          'application/json': components['schemas']['FeedConnections']
        }
      }
      /** @description bad input parameter */
      400: {
        content: never
      }
    }
  }
  /**
   * Retrieve all statements
   * @description By passing in parameters, you can search for matching statements
   */
  getStatements: {
    parameters: {
      query?: {
        /** @description unique id for single object */
        page?: number
        /** @description Page size which specifies how many records per page will be returned (default 10). Example - https://api.xero.com/bankfeeds.xro/1.0/Statements?pageSize=100 to specify page size of 100. */
        pageSize?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Xero-Application-Id'?: string
        'Xero-User-Id'?: string
      }
    }
    responses: {
      /** @description success returns Statements array of objects response */
      200: {
        content: {
          'application/json': components['schemas']['Statements']
        }
      }
      /** @description bad input parameter */
      400: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
    }
  }
  /** Creates one or more new statements */
  createStatements: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    /** @description Statements array of objects in the body */
    requestBody: {
      content: {
        /**
         * @example {
         *   "items": [
         *     {
         *       "feedConnectionId": "6a4b9ff5-3a5f-4321-936b-4796163550f6",
         *       "startDate": "2019-08-11",
         *       "endDate": "2019-08-11",
         *       "startBalance": {
         *         "amount": "100",
         *         "creditDebitIndicator": "CREDIT"
         *       },
         *       "endBalance": {
         *         "amount": "150",
         *         "creditDebitIndicator": "CREDIT"
         *       },
         *       "statementLines": [
         *         {
         *           "postedDate": "2019-08-11",
         *           "description": "My new line",
         *           "amount": "50",
         *           "creditDebitIndicator": "CREDIT",
         *           "transactionId": "123446422",
         *           "payeeName": "StarLord90315",
         *           "reference": "Foobar95578",
         *           "chequeNumber": "12379009",
         *           "transactionType": "Refund"
         *         }
         *       ]
         *     },
         *     {
         *       "feedConnectionId": "2ebe6393-f3bb-48ab-9a0e-b04fa8585a70",
         *       "startDate": "2019-08-11",
         *       "endDate": "2019-08-11",
         *       "startBalance": {
         *         "amount": "100",
         *         "creditDebitIndicator": "CREDIT"
         *       },
         *       "endBalance": {
         *         "amount": "150",
         *         "creditDebitIndicator": "CREDIT"
         *       },
         *       "statementLines": [
         *         {
         *           "postedDate": "2019-08-11",
         *           "description": "My new line",
         *           "amount": "50",
         *           "creditDebitIndicator": "CREDIT",
         *           "transactionId": "123449402",
         *           "payeeName": "StarLord56705",
         *           "reference": "Foobar67355",
         *           "chequeNumber": "12379350",
         *           "transactionType": "Currency Conversion Fee"
         *         }
         *       ]
         *     }
         *   ]
         * }
         */
        'application/json': components['schemas']['Statements']
      }
    }
    responses: {
      /** @description Success returns Statements array of objects in response */
      202: {
        content: {
          'application/json': components['schemas']['Statements']
        }
      }
      /** @description Statement failed validation */
      400: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
      /** @description Invalid application or feed connection */
      403: {
        content: {
          'application/problem+json': components['schemas']['Error']
        }
      }
      /** @description Duplicate statement received */
      409: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
      /** @description Statement exceeds size limit */
      413: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
      /** @description Unprocessable Entity */
      422: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
      /** @description Intermittent Xero Error */
      500: {
        content: {
          'application/problem+json': components['schemas']['Statements']
        }
      }
    }
  }
  /**
   * Retrieve single statement based on unique id provided
   * @description By passing in a statement id, you can search for matching statements
   */
  getStatement: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description statement id for single object */
        statementId: string
      }
    }
    responses: {
      /** @description search results matching id for single statement */
      200: {
        content: {
          'application/json': components['schemas']['Statement']
        }
      }
      /** @description Statement not found */
      404: {
        content: never
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
