/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/Projects': {
    /**
     * Retrieves all projects
     * @description Allows you to retrieve, create and update projects.
     */
    get: operations['getProjects']
    /** Create one or more new projects */
    post: operations['createProject']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Projects/{projectId}': {
    /**
     * Retrieves a single project
     * @description Allows you to retrieve a specific project using the projectId
     */
    get: operations['getProject']
    /**
     * Updates a specific project
     * @description Allows you to update a specific projects.
     */
    put: operations['updateProject']
    /**
     * creates a project for the specified contact
     * @description Allows you to update a specific projects.
     */
    patch: operations['patchProject']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/ProjectsUsers': {
    /**
     * Retrieves a list of all project users
     * @description Allows you to retrieve the users on a projects.
     */
    get: operations['getProjectUsers']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Projects/{projectId}/Tasks': {
    /**
     * Retrieves all project tasks
     * @description Allows you to retrieve a specific project
     */
    get: operations['getTasks']
    /**
     * Allows you to create a task
     * @description Allows you to create a specific task
     */
    post: operations['createTask']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Projects/{projectId}/Tasks/{taskId}': {
    /**
     * Retrieves a single project task
     * @description Allows you to retrieve a specific project
     */
    get: operations['getTask']
    /**
     * Allows you to update a task
     * @description Allows you to update a specific task
     */
    put: operations['updateTask']
    /**
     * Allows you to delete a task
     * @description Allows you to delete a specific task
     */
    delete: operations['deleteTask']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Projects/{projectId}/Time': {
    /**
     * Retrieves all time entries associated with a specific project
     * @description Allows you to retrieve the time entries associated with a specific project
     */
    get: operations['getTimeEntries']
    /**
     * Creates a time entry for a specific project
     * @description Allows you to create a specific task
     */
    post: operations['createTimeEntry']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Projects/{projectId}/Time/{timeEntryId}': {
    /**
     * Retrieves a single time entry for a specific project
     * @description Allows you to get a single time entry in a project
     */
    get: operations['getTimeEntry']
    /**
     * Updates a time entry for a specific project
     * @description Allows you to update time entry in a project
     */
    put: operations['updateTimeEntry']
    /**
     * Deletes a time entry for a specific project
     * @description Allows you to delete a specific time entry
     */
    delete: operations['deleteTimeEntry']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Projects: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['Project'][]
    }
    ProjectCreateOrUpdate: {
      /**
       * Format: uuid
       * @description Identifier of the contact this project was created for.
       * @example 01234567-89ab-cdef-0123-456789abcdef
       */
      contactId?: string
      /**
       * @description Name of the project.
       * @example New Kitchen
       */
      name: string
      /**
       * Format: double
       * @example 1
       */
      estimateAmount?: number
      /**
       * Format: date-time
       * @description Deadline for the project. UTC Date Time in ISO-8601 format.
       * @example 2019-12-10T12:59:59Z
       */
      deadlineUtc?: string
    }
    ProjectPatch: {
      status: components['schemas']['ProjectStatus']
    }
    Project: {
      /**
       * Format: uuid
       * @description Identifier of the project.
       * @example 254553fa-2be8-4991-bd5e-70a97ea12ef8
       */
      projectId?: string
      /**
       * Format: uuid
       * @description Identifier of the contact this project was created for.
       * @example 01234567-89ab-cdef-0123-456789abcdef
       */
      contactId?: string
      /**
       * @description Name of the project.
       * @example New Kitchen
       */
      name: string
      currencyCode?: components['schemas']['CurrencyCode']
      /**
       * @description A total of minutes logged against all tasks on the Project.
       * @example 0
       */
      minutesLogged?: number
      totalTaskAmount?: components['schemas']['Amount']
      totalExpenseAmount?: components['schemas']['Amount']
      estimateAmount?: components['schemas']['Amount']
      /**
       * @description Minutes which have not been invoiced across all chargeable tasks in the project.
       * @example 0
       */
      minutesToBeInvoiced?: number
      taskAmountToBeInvoiced?: components['schemas']['Amount']
      taskAmountInvoiced?: components['schemas']['Amount']
      expenseAmountToBeInvoiced?: components['schemas']['Amount']
      expenseAmountInvoiced?: components['schemas']['Amount']
      projectAmountInvoiced?: components['schemas']['Amount']
      deposit?: components['schemas']['Amount']
      depositApplied?: components['schemas']['Amount']
      creditNoteAmount?: components['schemas']['Amount']
      /**
       * Format: date-time
       * @description Deadline for the project. UTC Date Time in ISO-8601 format.
       * @example 2019-12-10T12:59:59Z
       */
      deadlineUtc?: string
      totalInvoiced?: components['schemas']['Amount']
      totalToBeInvoiced?: components['schemas']['Amount']
      estimate?: components['schemas']['Amount']
      status?: components['schemas']['ProjectStatus']
    }
    Pagination: {
      /**
       * @description Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0.
       * @example 1
       */
      page?: number
      /**
       * @description Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500.
       * @example 10
       */
      pageSize?: number
      /**
       * @description Number of pages available
       * @example 1
       */
      pageCount?: number
      /**
       * @description Number of items returned
       * @example 2
       */
      itemCount?: number
    }
    ProjectUsers: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['ProjectUser'][]
    }
    ProjectUser: {
      /**
       * Format: uuid
       * @description Identifier of the user of the project.
       * @example 254553fa-2be8-4991-bd5e-70a97ea12ef8
       */
      userId?: string
      /**
       * @description Full name of the user.
       * @example Sidney Allen
       */
      name?: string
      /**
       * @description Email address of the user.
       * @example sidneyallen@xero.com
       */
      email?: string
    }
    Amount: {
      currency?: components['schemas']['CurrencyCode']
      /**
       * Format: double
       * @example 1
       */
      value?: number
    }
    /**
     * @description Status for project
     * @example INPROGRESS
     * @enum {string}
     */
    ProjectStatus: 'INPROGRESS' | 'CLOSED'
    /**
     * @description 3 letter alpha code for the ISO-4217 currency code, e.g. USD, AUD.
     * @example AUD
     * @enum {string}
     */
    CurrencyCode:
      | 'AED'
      | 'AFN'
      | 'ALL'
      | 'AMD'
      | 'ANG'
      | 'AOA'
      | 'ARS'
      | 'AUD'
      | 'AWG'
      | 'AZN'
      | 'BAM'
      | 'BBD'
      | 'BDT'
      | 'BGN'
      | 'BHD'
      | 'BIF'
      | 'BMD'
      | 'BND'
      | 'BOB'
      | 'BRL'
      | 'BSD'
      | 'BTN'
      | 'BWP'
      | 'BYN'
      | 'BZD'
      | 'CAD'
      | 'CDF'
      | 'CHF'
      | 'CLP'
      | 'CNY'
      | 'COP'
      | 'CRC'
      | 'CUC'
      | 'CUP'
      | 'CVE'
      | 'CZK'
      | 'DJF'
      | 'DKK'
      | 'DOP'
      | 'DZD'
      | 'EGP'
      | 'ERN'
      | 'ETB'
      | 'EUR'
      | 'FJD'
      | 'FKP'
      | 'GBP'
      | 'GEL'
      | 'GGP'
      | 'GHS'
      | 'GIP'
      | 'GMD'
      | 'GNF'
      | 'GTQ'
      | 'GYD'
      | 'HKD'
      | 'HNL'
      | 'HRK'
      | 'HTG'
      | 'HUF'
      | 'IDR'
      | 'ILS'
      | 'IMP'
      | 'INR'
      | 'IQD'
      | 'IRR'
      | 'ISK'
      | 'JEP'
      | 'JMD'
      | 'JOD'
      | 'JPY'
      | 'KES'
      | 'KGS'
      | 'KHR'
      | 'KMF'
      | 'KPW'
      | 'KRW'
      | 'KWD'
      | 'KYD'
      | 'KZT'
      | 'LAK'
      | 'LBP'
      | 'LKR'
      | 'LRD'
      | 'LSL'
      | 'LYD'
      | 'MAD'
      | 'MDL'
      | 'MGA'
      | 'MKD'
      | 'MMK'
      | 'MNT'
      | 'MOP'
      | 'MRU'
      | 'MUR'
      | 'MVR'
      | 'MWK'
      | 'MXN'
      | 'MYR'
      | 'MZN'
      | 'NAD'
      | 'NGN'
      | 'NIO'
      | 'NOK'
      | 'NPR'
      | 'NZD'
      | 'OMR'
      | 'PAB'
      | 'PEN'
      | 'PGK'
      | 'PHP'
      | 'PKR'
      | 'PLN'
      | 'PYG'
      | 'QAR'
      | 'RON'
      | 'RSD'
      | 'RUB'
      | 'RWF'
      | 'SAR'
      | 'SBD'
      | 'SCR'
      | 'SDG'
      | 'SEK'
      | 'SGD'
      | 'SHP'
      | 'SLL'
      | 'SOS'
      | 'SPL'
      | 'SRD'
      | 'STN'
      | 'SVC'
      | 'SYP'
      | 'SZL'
      | 'THB'
      | 'TJS'
      | 'TMT'
      | 'TND'
      | 'TOP'
      | 'TRY'
      | 'TTD'
      | 'TVD'
      | 'TWD'
      | 'TZS'
      | 'UAH'
      | 'UGX'
      | 'USD'
      | 'UYU'
      | 'UZS'
      | 'VEF'
      | 'VND'
      | 'VUV'
      | 'WST'
      | 'XAF'
      | 'XCD'
      | 'XDR'
      | 'XOF'
      | 'XPF'
      | 'YER'
      | 'ZAR'
      | 'ZMW'
      | 'ZMK'
      | 'ZWD'
    Error: {
      /** @description Exception message */
      message?: string
      /** @description Array of Elements of validation Errors */
      modelState?: Record<string, never>
    }
    Tasks: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['Task'][]
    }
    Task: {
      /**
       * Format: uuid
       * @description Identifier of the task.
       * @example 00000000-0000-0000-000-000000000000
       */
      taskId?: string
      /** @description Name of the task. */
      name?: string
      rate?: components['schemas']['Amount']
      chargeType?: components['schemas']['ChargeType']
      /** @description An estimated time to perform the task */
      estimateMinutes?: number
      /**
       * Format: uuid
       * @description Identifier of the project task belongs to.
       * @example 00000000-0000-0000-000-000000000000
       */
      projectId?: string
      /** @description Total minutes which have been logged against the task. Logged by assigning a time entry to a task */
      totalMinutes?: number
      totalAmount?: components['schemas']['Amount']
      /** @description Minutes on this task which have been invoiced. */
      minutesInvoiced?: number
      /** @description Minutes on this task which have not been invoiced. */
      minutesToBeInvoiced?: number
      /** @description Minutes logged against this task if its charge type is `FIXED`. */
      fixedMinutes?: number
      /** @description Minutes logged against this task if its charge type is `NON_CHARGEABLE`. */
      nonChargeableMinutes?: number
      amountToBeInvoiced?: components['schemas']['Amount']
      amountInvoiced?: components['schemas']['Amount']
      /**
       * @description Status of the task. When a task of ChargeType is `FIXED` and the rate amount is invoiced the status will be set to `INVOICED` and can't be modified. A task with ChargeType of `TIME` or `NON_CHARGEABLE` cannot have a status of `INVOICED`. A `LOCKED` state indicates that the task is currently changing state (for example being invoiced) and can't be modified.
       * @enum {string}
       */
      status?: 'ACTIVE' | 'INVOICED' | 'LOCKED'
    }
    /**
     * @description Can be `TIME`, `FIXED` or `NON_CHARGEABLE`, defines how the task will be charged. Use `TIME` when you want to charge per hour and `FIXED` to charge as a fixed amount. If the task will not be charged use `NON_CHARGEABLE`.
     * @enum {string}
     */
    ChargeType: 'TIME' | 'FIXED' | 'NON_CHARGEABLE'
    TaskCreateOrUpdate: {
      /** @description Name of the task. Max length 100 characters. */
      name: string
      rate: components['schemas']['Amount']
      chargeType: components['schemas']['ChargeType']
      /** @description An estimated time to perform the task */
      estimateMinutes?: number
    }
    TimeEntries: {
      pagination?: components['schemas']['Pagination']
      items?: components['schemas']['TimeEntry'][]
    }
    TimeEntry: {
      /**
       * Format: uuid
       * @description Identifier of the time entry.
       * @example 00000000-0000-0000-000-000000000000
       */
      timeEntryId?: string
      /**
       * Format: uuid
       * @description The xero user identifier of the person who logged time.
       * @example 00000000-0000-0000-000-000000000000
       */
      userId?: string
      /**
       * Format: uuid
       * @description Identifier of the project, that the task (which the time entry is logged against) belongs to.
       * @example 00000000-0000-0000-000-000000000000
       */
      projectId?: string
      /**
       * Format: uuid
       * @description Identifier of the task that time entry is logged against.
       * @example 00000000-0000-0000-000-000000000000
       */
      taskId?: string
      /**
       * Format: date-time
       * @description The date time that time entry is logged on. UTC Date Time in ISO-8601 format.
       */
      dateUtc?: string
      /**
       * Format: date-time
       * @description The date time that time entry is created. UTC Date Time in ISO-8601 format. By default it is set to server time.
       */
      dateEnteredUtc?: string
      /** @description The duration of logged minutes. */
      duration?: number
      /** @description A description of the time entry. */
      description?: string
      /**
       * @description Status of the time entry. By default a time entry is created with status of `ACTIVE`. A `LOCKED` state indicates that the time entry is currently changing state (for example being invoiced). Updates are not allowed when in this state. It will have a status of INVOICED once it is invoiced.
       * @enum {string}
       */
      status?: 'ACTIVE' | 'LOCKED' | 'INVOICED'
    }
    TimeEntryCreateOrUpdate: {
      /**
       * Format: uuid
       * @description The xero user identifier of the person logging the time.
       * @example 00000000-0000-0000-000-000000000000
       */
      userId: string
      /**
       * Format: uuid
       * @description Identifier of the task that time entry is logged against.
       * @example 00000000-0000-0000-000-000000000000
       */
      taskId: string
      /**
       * Format: date-time
       * @description Date time entry is logged on. UTC Date Time in ISO-8601 format.
       */
      dateUtc: string
      /** @description Number of minutes to be logged. Duration is between 1 and 59940 inclusively. */
      duration: number
      /** @description An optional description of the time entry, will be set to null if not provided during update. */
      description?: string
    }
  }
  responses: {
    /** @description A failed request due to validation error */
    '400Error': {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: {
    /** @description Xero identifier for Tenant */
    requiredHeader?: string
    chargeType?: components['schemas']['ChargeType']
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Retrieves all projects
   * @description Allows you to retrieve, create and update projects.
   */
  getProjects: {
    parameters: {
      query?: {
        /** @description Search for all projects that match a comma separated list of projectIds */
        projectIds?: string[]
        /** @description Filter for projects for a specific contact */
        contactID?: string
        /** @description Filter for projects in a particular state (INPROGRESS or CLOSED) */
        states?: string
        /** @description set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. */
        page?: number
        /** @description Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. */
        pageSize?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description OK/success, returns a list of project objects */
      200: {
        content: {
          'application/json': components['schemas']['Projects']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /** Create one or more new projects */
  createProject: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    /** @description Create a new project with ProjectCreateOrUpdate object */
    requestBody: {
      content: {
        /** @example { "contactId": "00000000-0000-0000-000-000000000000", "name": "New Kitchen", "deadlineUtc": "2019-12-10T12:59:59Z", "estimateAmount": "99.99" } */
        'application/json': components['schemas']['ProjectCreateOrUpdate']
      }
    }
    responses: {
      /** @description OK/success, returns the new project object */
      201: {
        content: {
          'application/json': components['schemas']['Project']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves a single project
   * @description Allows you to retrieve a specific project using the projectId
   */
  getProject: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
      }
    }
    responses: {
      /** @description OK/success, returns the specified project object */
      200: {
        content: {
          'application/json': components['schemas']['Project']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Updates a specific project
   * @description Allows you to update a specific projects.
   */
  updateProject: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
      }
    }
    /** @description Request of type ProjectCreateOrUpdate */
    requestBody: {
      content: {
        /** @example { "name": "New Kitchen", "deadlineUtc": "2017-04-23T18:25:43.511Z", "estimateAmount": 99.99 } */
        'application/json': components['schemas']['ProjectCreateOrUpdate']
      }
    }
    responses: {
      /** @description Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * creates a project for the specified contact
   * @description Allows you to update a specific projects.
   */
  patchProject: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
      }
    }
    /** @description Update the status of an existing Project */
    requestBody: {
      content: {
        /** @example { "status": "INPROGRESS" } */
        'application/json': components['schemas']['ProjectPatch']
      }
    }
    responses: {
      /** @description Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves a list of all project users
   * @description Allows you to retrieve the users on a projects.
   */
  getProjectUsers: {
    parameters: {
      query?: {
        /** @description set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. */
        page?: number
        /** @description Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. */
        pageSize?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description OK/success, returns a list of project users */
      200: {
        content: {
          'application/json': components['schemas']['ProjectUsers']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves all project tasks
   * @description Allows you to retrieve a specific project
   */
  getTasks: {
    parameters: {
      query?: {
        /** @description Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. */
        page?: number
        /** @description Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. */
        pageSize?: number
        /** @description Search for all tasks that match a comma separated list of taskIds, i.e. GET https://.../tasks?taskIds={taskID},{taskID} */
        taskIds?: string
        chargeType?: components['parameters']['chargeType']
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
      }
    }
    responses: {
      /** @description OK/success, returns a list of task objects */
      200: {
        content: {
          'application/json': components['schemas']['Tasks']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Allows you to create a task
   * @description Allows you to create a specific task
   */
  createTask: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can create a task on a specified projectId */
        projectId: string
      }
    }
    /** @description The task object you are creating */
    requestBody: {
      content: {
        /** @example { "status": "INPROGRESS" } */
        'application/json': components['schemas']['TaskCreateOrUpdate']
      }
    }
    responses: {
      /** @description OK/success, returns the new task object */
      201: {
        content: {
          'application/json': components['schemas']['Task']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves a single project task
   * @description Allows you to retrieve a specific project
   */
  getTask: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual task by appending the taskId to the endpoint, i.e. GET https://.../tasks/{taskID} */
        taskId: string
      }
    }
    responses: {
      /** @description OK/success, returns the specified task object */
      200: {
        content: {
          'application/json': components['schemas']['Task']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Allows you to update a task
   * @description Allows you to update a specific task
   */
  updateTask: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual task by appending the id to the endpoint */
        taskId: string
      }
    }
    /** @description The task object you are updating */
    requestBody: {
      content: {
        /** @example */
        'application/json': components['schemas']['TaskCreateOrUpdate']
      }
    }
    responses: {
      /** @description OK/Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Allows you to delete a task
   * @description Allows you to delete a specific task
   */
  deleteTask: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual task by appending the id to the endpoint */
        taskId: string
      }
    }
    responses: {
      /** @description Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves all time entries associated with a specific project
   * @description Allows you to retrieve the time entries associated with a specific project
   */
  getTimeEntries: {
    parameters: {
      query?: {
        /** @description The xero user identifier of the person who logged time. */
        userId?: string
        /** @description Identifier of the task that time entry is logged against. */
        taskId?: string
        /** @description Finds all time entries for this invoice. */
        invoiceId?: string
        /** @description Finds all time entries for this contact identifier. */
        contactId?: string
        /** @description Set to 1 by default. The requested number of the page in paged response - Must be a number greater than 0. */
        page?: number
        /** @description Optional, it is set to 50 by default. The number of items to return per page in a paged response - Must be a number between 1 and 500. */
        pageSize?: number
        /** @description Comma-separated list of states to find. Will find all time entries that are in the status of whatever is specified. */
        states?: string[]
        /** @description Finds all time entries which relate to tasks with the charge type `TIME` or `FIXED`. */
        isChargeable?: boolean
        /** @description ISO 8601 UTC date. Finds all time entries on or after this date filtered on the `dateUtc` field. */
        dateAfterUtc?: string
        /** @description ISO 8601 UTC date. Finds all time entries on or before this date filtered on the `dateUtc` field. */
        dateBeforeUtc?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Identifier of the project, that the task (which the time entry is logged against) belongs to. */
        projectId: string
      }
    }
    responses: {
      /** @description OK/success, returns a list of time entry objects */
      200: {
        content: {
          'application/json': components['schemas']['TimeEntries']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Creates a time entry for a specific project
   * @description Allows you to create a specific task
   */
  createTimeEntry: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
      }
    }
    /** @description The time entry object you are creating */
    requestBody: {
      content: {
        /** @example { "userId": "00000000-0000-0000-0000-000000000000", "taskId": "00000000-0000-0000-0000-000000000000", "dateUtc": "2020-02-26T15:00:00Z", "duration":30, "description": "My description" } */
        'application/json': components['schemas']['TimeEntryCreateOrUpdate']
      }
    }
    responses: {
      /** @description OK/success, returns the newly created time entry */
      200: {
        content: {
          'application/json': components['schemas']['TimeEntry']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Retrieves a single time entry for a specific project
   * @description Allows you to get a single time entry in a project
   */
  getTimeEntry: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual time entry by appending the id to the endpoint */
        timeEntryId: string
      }
    }
    responses: {
      /** @description OK/success, returns the specified time entry */
      200: {
        content: {
          'application/json': components['schemas']['TimeEntry']
        }
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Updates a time entry for a specific project
   * @description Allows you to update time entry in a project
   */
  updateTimeEntry: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual time entry by appending the id to the endpoint */
        timeEntryId: string
      }
    }
    /** @description The time entry object you are updating */
    requestBody: {
      content: {
        /** @example { "userId": "00000000-0000-0000-0000-000000000000", "taskId": "00000000-0000-0000-0000-000000000000", "dateUtc": "2020-02-27T15:00:00Z", "duration":45, "description": "My UPDATED description" } */
        'application/json': components['schemas']['TimeEntryCreateOrUpdate']
      }
    }
    responses: {
      /** @description Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
  /**
   * Deletes a time entry for a specific project
   * @description Allows you to delete a specific time entry
   */
  deleteTimeEntry: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description You can specify an individual project by appending the projectId to the endpoint */
        projectId: string
        /** @description You can specify an individual task by appending the id to the endpoint */
        timeEntryId: string
      }
    }
    responses: {
      /** @description Success - return response 204 no content */
      204: {
        content: never
      }
      400: components['responses']['400Error']
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
