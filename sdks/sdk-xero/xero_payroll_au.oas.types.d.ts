/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/Employees': {
    /** Searches payroll employees */
    get: operations['getEmployees']
    /** Creates a payroll employee */
    post: operations['createEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Employees/{EmployeeID}': {
    /** Retrieves an employee's detail by unique employee id */
    get: operations['getEmployee']
    /**
     * Updates an employee's detail
     * @description Update properties on a single employee
     */
    post: operations['updateEmployee']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveApplications': {
    /** Retrieves leave applications */
    get: operations['getLeaveApplications']
    /** Creates a leave application */
    post: operations['createLeaveApplication']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveApplications/v2': {
    /** Retrieves leave applications including leave requests */
    get: operations['getLeaveApplicationsV2']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveApplications/{LeaveApplicationID}': {
    /** Retrieves a leave application by a unique leave application id */
    get: operations['getLeaveApplication']
    /** Updates a specific leave application */
    post: operations['updateLeaveApplication']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveApplications/{LeaveApplicationID}/approve': {
    /** Approve a requested leave application by a unique leave application id */
    post: operations['approveLeaveApplication']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/LeaveApplications/{LeaveApplicationID}/reject': {
    /** Reject a leave application by a unique leave application id */
    post: operations['rejectLeaveApplication']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayItems': {
    /** Retrieves pay items */
    get: operations['getPayItems']
    /** Creates a pay item */
    post: operations['createPayItem']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayrollCalendars': {
    /** Retrieves payroll calendars */
    get: operations['getPayrollCalendars']
    /** Creates a Payroll Calendar */
    post: operations['createPayrollCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayrollCalendars/{PayrollCalendarID}': {
    /** Retrieves payroll calendar by using a unique payroll calendar ID */
    get: operations['getPayrollCalendar']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns': {
    /** Retrieves pay runs */
    get: operations['getPayRuns']
    /** Creates a pay run */
    post: operations['createPayRun']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/PayRuns/{PayRunID}': {
    /** Retrieves a pay run by using a unique pay run id */
    get: operations['getPayRun']
    /**
     * Updates a pay run
     * @description Update properties on a single PayRun
     */
    post: operations['updatePayRun']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Payslip/{PayslipID}': {
    /** Retrieves for a payslip by a unique payslip id */
    get: operations['getPayslip']
    /**
     * Updates a payslip
     * @description Update lines on a single payslips
     */
    post: operations['updatePayslip']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Settings': {
    /** Retrieves payroll settings */
    get: operations['getSettings']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Superfunds': {
    /** Retrieves superfunds */
    get: operations['getSuperfunds']
    /** Creates a superfund */
    post: operations['createSuperfund']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Superfunds/{SuperFundID}': {
    /** Retrieves a superfund by using a unique superfund ID */
    get: operations['getSuperfund']
    /**
     * Updates a superfund
     * @description Update properties on a single Superfund
     */
    post: operations['updateSuperfund']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/SuperfundProducts': {
    /** Retrieves superfund products */
    get: operations['getSuperfundProducts']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets': {
    /** Retrieves timesheets */
    get: operations['getTimesheets']
    /** Creates a timesheet */
    post: operations['createTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
  '/Timesheets/{TimesheetID}': {
    /** Retrieves a timesheet by using a unique timesheet id */
    get: operations['getTimesheet']
    /**
     * Updates a timesheet
     * @description Update properties on a single timesheet
     */
    post: operations['updateTimesheet']
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Employees: {
      Employees?: components['schemas']['Employee'][]
    }
    Employee: {
      /**
       * @description First name of employee
       * @example Karen
       */
      FirstName: string
      /**
       * @description Last name of employee
       * @example Jones
       */
      LastName: string
      /**
       * @description Date of birth of the employee (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      DateOfBirth: string
      HomeAddress?: components['schemas']['HomeAddress']
      /**
       * @description Start date for an employee (YYYY-MM-DD)
       * @example /Date(320284900000+0000)/
       */
      StartDate?: string
      /**
       * @description Title of the employee
       * @example Mrs
       */
      Title?: string
      /**
       * @description Middle name(s) of the employee
       * @example Adena
       */
      MiddleNames?: string
      /**
       * @description The email address for the employee
       * @example developer@me.com
       */
      Email?: string
      /**
       * @description The employee’s gender. See Employee Gender
       * @example F
       * @enum {string}
       */
      Gender?: 'N' | 'M' | 'F' | 'I'
      /**
       * @description Employee phone number
       * @example 415-555-1212
       */
      Phone?: string
      /**
       * @description Employee mobile number
       * @example 415-234-5678
       */
      Mobile?: string
      /**
       * @description Employee’s twitter name
       * @example xeroapi
       */
      TwitterUserName?: string
      /**
       * @description Authorised to approve other employees' leave requests
       * @example false
       */
      IsAuthorisedToApproveLeave?: boolean
      /**
       * @description Authorised to approve timesheets
       * @example true
       */
      IsAuthorisedToApproveTimesheets?: boolean
      /**
       * @description JobTitle of the employee
       * @example Manager
       */
      JobTitle?: string
      /**
       * @description Employees classification
       * @example 99383
       */
      Classification?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for earnings rate
       * @example 5gj1e5cc-9835-40d5-bb18-09fdb118db9c
       */
      OrdinaryEarningsRateID?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for payroll calendar for the employee
       * @example 2ee8e5cc-9835-40d5-bb18-09fdb118db9c
       */
      PayrollCalendarID?: string
      /**
       * @description The Employee Group allows you to report on payroll expenses and liabilities for each group of employees
       * @example marketing
       */
      EmployeeGroupName?: string
      /**
       * Format: uuid
       * @description Xero unique identifier for an Employee
       * @example 4ff1e5cc-9835-40d5-bb18-09fdb118db9c
       */
      EmployeeID?: string
      /**
       * @description Employee Termination Date (YYYY-MM-DD)
       * @example /Date(1584662400000+0000)/
       */
      TerminationDate?: string
      /**
       * @description * `V` Voluntary cessation - An employee resignation, retirement, domestic or pressing necessity or abandonment of employment
       * * `I` Ill health - An employee resignation due to medical condition that prevents the continuation of employment, such as for illness, ill-health, medical unfitness or total permanent disability
       * * `D` Deceased - The death of an employee
       * * `R` Redundancy - An employer-initiated termination of employment due to a genuine redundancy or approved early retirement scheme
       * * `F` Dismissal - An employer-initiated termination of employment due to dismissal, inability to perform the required work, misconduct or inefficiency
       * * `C` Contract cessation - The natural conclusion of a limited employment relationship due to contract/engagement duration or task completion, seasonal work completion, or to cease casuals that are no longer required
       * * `T` Transfer - The administrative arrangements performed to transfer employees across payroll systems, move them temporarily to another employer (machinery of government for public servants), transfer of business, move them to outsourcing arrangements or other such technical activities.
       *
       * @example F
       * @enum {string}
       */
      TerminationReason?: 'V' | 'I' | 'D' | 'R' | 'F' | 'C' | 'T'
      BankAccounts?: components['schemas']['BankAccount'][]
      PayTemplate?: components['schemas']['PayTemplate']
      OpeningBalances?: components['schemas']['OpeningBalances']
      TaxDeclaration?: components['schemas']['TaxDeclaration']
      IncomeType?: components['schemas']['IncomeType']
      EmploymentType?: components['schemas']['EmploymentType']
      CountryOfResidence?: components['schemas']['CountryOfResidence']
      /**
       * @description Indicates if the employee has been updated for STP Phase 2 compliance. Doesn't indicate that the employee is payable.
       * @example true
       */
      IsSTP2Qualified?: boolean
      LeaveBalances?: components['schemas']['LeaveBalance'][]
      LeaveLines?: components['schemas']['LeaveLine'][]
      SuperMemberships?: components['schemas']['SuperMembership'][]
      Status?: components['schemas']['EmployeeStatus']
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    LeaveApplications: {
      LeaveApplications?: components['schemas']['LeaveApplication'][]
    }
    LeaveApplication: {
      /**
       * Format: uuid
       * @description The Xero identifier for Payroll Employee
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      LeaveApplicationID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for Payroll Employee
       * @example fb4ebd68-6568-41eb-96ab-628a0f54b4b8
       */
      EmployeeID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for Leave Type
       * @example 742998cb-7584-4ecf-aa88-d694f59c50f9
       */
      LeaveTypeID?: string
      /**
       * @description The title of the leave
       * @example Annual Leave
       */
      Title?: string
      /**
       * @description Start date of the leave (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      StartDate?: string
      /**
       * @description End date of the leave (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      EndDate?: string
      /**
       * @description The Description of the Leave
       * @example My leave
       */
      Description?: string
      PayOutType?: components['schemas']['PayOutType']
      LeavePeriods?: components['schemas']['LeavePeriod'][]
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    /**
     * @description How the requested leave will be paid out, e.g. cashed out.
     * @enum {string}
     */
    PayOutType: 'DEFAULT' | 'CASHED_OUT'
    LeavePeriod: {
      /**
       * Format: double
       * @description The Number of Units for the leave
       * @example 22.8
       */
      NumberOfUnits?: number
      /**
       * @description The Pay Period End Date (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PayPeriodEndDate?: string
      /**
       * @description The Pay Period Start Date (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PayPeriodStartDate?: string
      LeavePeriodStatus?: components['schemas']['LeavePeriodStatus']
    }
    /** @enum {string} */
    LeavePeriodStatus: 'SCHEDULED' | 'PROCESSED' | 'REQUESTED' | 'REJECTED'
    PayItems: {
      PayItems?: components['schemas']['PayItem']
    }
    PayItem: {
      EarningsRates?: components['schemas']['EarningsRate'][]
      DeductionTypes?: components['schemas']['DeductionType'][]
      LeaveTypes?: components['schemas']['LeaveType'][]
      ReimbursementTypes?: components['schemas']['ReimbursementType'][]
    }
    PayrollCalendars: {
      PayrollCalendars?: components['schemas']['PayrollCalendar'][]
    }
    PayrollCalendar: {
      /**
       * @description Name of the Payroll Calendar
       * @example Fortnightly Calendar
       */
      Name?: string
      CalendarType?: components['schemas']['CalendarType']
      /**
       * @description The start date of the upcoming pay period. The end date will be calculated based upon this date, and the calendar type selected (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      StartDate?: string
      /**
       * @description The date on which employees will be paid for the upcoming pay period (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PaymentDate?: string
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      PayrollCalendarID?: string
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /**
       * @description Reference Date (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      ReferenceDate?: string
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    Timesheets: {
      Timesheets?: components['schemas']['Timesheet'][]
    }
    TimesheetObject: {
      Timesheet?: components['schemas']['Timesheet']
    }
    Timesheet: {
      /**
       * Format: uuid
       * @description The Xero identifier for an employee
       * @example 72a0d0c2-0cf8-4f0b-ade1-33231f47b41b
       */
      EmployeeID: string
      /**
       * @description Period start date (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      StartDate: string
      /**
       * @description Period end date (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      EndDate: string
      Status?: components['schemas']['TimesheetStatus']
      /**
       * Format: double
       * @description Timesheet total hours
       * @example 31
       */
      Hours?: number
      /**
       * Format: uuid
       * @description The Xero identifier for a Payroll Timesheet
       * @example 049765fc-4506-48fb-bf88-3578dec0ec47
       */
      TimesheetID?: string
      TimesheetLines?: components['schemas']['TimesheetLines']
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    TimesheetLines: components['schemas']['TimesheetLine'][]
    TimesheetLine: {
      /**
       * Format: uuid
       * @description The Xero identifier for an Earnings Rate
       * @example 966c5c77-2ef0-4320-b6a9-6c27b080ecc5
       */
      EarningsRateID?: string
      /**
       * Format: uuid
       * @description The Xero identifier for a Tracking Category. The TrackingOptionID must belong to the TrackingCategory selected as TimesheetCategories under Payroll Settings.
       * @example ae777a87-5ef3-4fa0-a4f0-d10e1f13073a
       */
      TrackingItemID?: string
      /** @description The number of units on a timesheet line */
      NumberOfUnits?: number[]
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
    }
    PayRuns: {
      PayRuns?: components['schemas']['PayRun'][]
    }
    PayRun: {
      /**
       * Format: uuid
       * @description Xero identifier for pay run
       * @example bfac31bd-ea62-4fc8-a5e7-7965d9504b15
       */
      PayrollCalendarID: string
      /**
       * Format: uuid
       * @description Xero identifier for pay run
       * @example bba1d10f-63b1-4692-b5c5-a99f869523a4
       */
      PayRunID?: string
      /**
       * @description Period Start Date for the PayRun (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PayRunPeriodStartDate?: string
      /**
       * @description Period End Date for the PayRun (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PayRunPeriodEndDate?: string
      PayRunStatus?: components['schemas']['PayRunStatus']
      /**
       * @description Payment Date for the PayRun (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PaymentDate?: string
      /**
       * @description Payslip message for the PayRun
       * @example Thanks for being awesome
       */
      PayslipMessage?: string
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @description The payslips in the payrun */
      Payslips?: components['schemas']['PayslipSummary'][]
      /**
       * Format: double
       * @description The total Wages for the Payrun
       * @example 1060.5
       */
      Wages?: number
      /**
       * Format: double
       * @description The total Deductions for the Payrun
       * @example 0
       */
      Deductions?: number
      /**
       * Format: double
       * @description The total Tax for the Payrun
       * @example 198
       */
      Tax?: number
      /**
       * Format: double
       * @description The total Super for the Payrun
       * @example 75.6
       */
      Super?: number
      /**
       * Format: double
       * @description The total Reimbursements for the Payrun
       * @example 0
       */
      Reimbursement?: number
      /**
       * Format: double
       * @description The total NetPay for the Payrun
       * @example 862.5
       */
      NetPay?: number
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    PayslipSummary: {
      /**
       * Format: uuid
       * @description The Xero identifier for an employee
       * @example 4729f087-8eec-49c1-8294-4d11a5a0a37c
       */
      EmployeeID?: string
      /**
       * Format: uuid
       * @description Xero identifier for the payslip
       * @example f3c0874d-7cdd-459a-a95c-d90d51decc42
       */
      PayslipID?: string
      /**
       * @description First name of employee
       * @example Karen
       */
      FirstName?: string
      /**
       * @description Last name of employee
       * @example Jones
       */
      LastName?: string
      /**
       * @description Employee group name
       * @example Marketing
       */
      EmployeeGroup?: string
      /**
       * Format: double
       * @description The Wages for the Payslip
       * @example 1060.5
       */
      Wages?: number
      /**
       * Format: double
       * @description The Deductions for the Payslip
       * @example 0
       */
      Deductions?: number
      /**
       * Format: double
       * @description The Tax for the Payslip
       * @example 198
       */
      Tax?: number
      /**
       * Format: double
       * @description The Super for the Payslip
       * @example 75.6
       */
      Super?: number
      /**
       * Format: double
       * @description The Reimbursements for the Payslip
       * @example 0
       */
      Reimbursements?: number
      /**
       * Format: double
       * @description The NetPay for the Payslip
       * @example 862.5
       */
      NetPay?: number
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
    }
    PayslipLines: {
      EarningsLines?: components['schemas']['EarningsLine'][]
      LeaveEarningsLines?: components['schemas']['LeaveEarningsLine'][]
      TimesheetEarningsLines?: components['schemas']['EarningsLine'][]
      DeductionLines?: components['schemas']['DeductionLine'][]
      LeaveAccrualLines?: components['schemas']['LeaveAccrualLine'][]
      ReimbursementLines?: components['schemas']['ReimbursementLine'][]
      SuperannuationLines?: components['schemas']['SuperannuationLine'][]
      TaxLines?: components['schemas']['TaxLine'][]
    }
    PayslipObject: {
      Payslip?: components['schemas']['Payslip']
    }
    Payslips: {
      Payslips?: components['schemas']['Payslip'][]
    }
    Payslip: {
      /**
       * Format: uuid
       * @description The Xero identifier for an employee
       * @example 4729f087-8eec-49c1-8294-4d11a5a0a37c
       */
      EmployeeID?: string
      /**
       * Format: uuid
       * @description Xero identifier for the payslip
       * @example f3c0874d-7cdd-459a-a95c-d90d51decc42
       */
      PayslipID?: string
      /**
       * @description First name of employee
       * @example Karen
       */
      FirstName?: string
      /**
       * @description Last name of employee
       * @example Jones
       */
      LastName?: string
      /**
       * Format: double
       * @description The Wages for the Payslip
       * @example 1060.5
       */
      Wages?: number
      /**
       * Format: double
       * @description The Deductions for the Payslip
       * @example 0
       */
      Deductions?: number
      /**
       * Format: double
       * @description The Tax for the Payslip
       * @example 198
       */
      Tax?: number
      /**
       * Format: double
       * @description The Super for the Payslip
       * @example 75.6
       */
      Super?: number
      /**
       * Format: double
       * @description The Reimbursements for the Payslip
       * @example 0
       */
      Reimbursements?: number
      /**
       * Format: double
       * @description The NetPay for the Payslip
       * @example 862.5
       */
      NetPay?: number
      EarningsLines?: components['schemas']['EarningsLine'][]
      LeaveEarningsLines?: components['schemas']['LeaveEarningsLine'][]
      TimesheetEarningsLines?: components['schemas']['EarningsLine'][]
      DeductionLines?: components['schemas']['DeductionLine'][]
      LeaveAccrualLines?: components['schemas']['LeaveAccrualLine'][]
      ReimbursementLines?: components['schemas']['ReimbursementLine'][]
      SuperannuationLines?: components['schemas']['SuperannuationLine'][]
      TaxLines?: components['schemas']['TaxLine'][]
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
    }
    LeaveAccrualLine: {
      /**
       * Format: uuid
       * @description Xero identifier for the Leave type.
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      LeaveTypeID?: string
      /**
       * Format: double
       * @description Leave Accrual number of units
       * @example 105.5
       */
      NumberOfUnits?: number
      /**
       * @description If you want to auto calculate leave.
       * @example true
       */
      AutoCalculate?: boolean
    }
    SuperannuationLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payroll super fund membership ID.
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      SuperMembershipID?: string
      ContributionType?: components['schemas']['SuperannuationContributionType']
      CalculationType?: components['schemas']['SuperannuationCalculationType']
      /**
       * Format: double
       * @description Superannuation minimum monthly earnings.
       * @example 100.5
       */
      MinimumMonthlyEarnings?: number
      /**
       * @description Superannuation expense account code.
       * @example 450
       */
      ExpenseAccountCode?: string
      /**
       * @description Superannuation liability account code
       * @example 650
       */
      LiabilityAccountCode?: string
      /**
       * @description Superannuation payment date for the current period (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      PaymentDateForThisPeriod?: string
      /**
       * Format: double
       * @description Superannuation percentage
       * @example 4
       */
      Percentage?: number
      /**
       * Format: double
       * @description Superannuation amount
       * @example 10.5
       */
      Amount?: number
    }
    TaxLine: {
      /**
       * Format: uuid
       * @description Xero identifier for payslip tax line ID.
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      PayslipTaxLineID?: string
      /**
       * Format: double
       * @description The tax line amount
       * @example 50
       */
      Amount?: number
      /**
       * @description Name of the tax type.
       * @example Manual Adjustment
       */
      TaxTypeName?: string
      /** @description Description of the tax line. */
      Description?: string
      ManualTaxType?: components['schemas']['ManualTaxType']
      /**
       * @description The tax line liability account code. For posted pay run you should be able to see liability account code
       * @example 620
       */
      LiabilityAccount?: string
    }
    LeaveEarningsLine: {
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      EarningsRateID?: string
      /**
       * Format: double
       * @description Rate per unit of the EarningsLine.
       * @example 38
       */
      RatePerUnit?: number
      /**
       * Format: double
       * @description Earnings rate number of units.
       * @example 2.5
       */
      NumberOfUnits?: number
      PayOutType?: components['schemas']['PayOutType']
    }
    SettingsObject: {
      Settings?: components['schemas']['Settings']
    }
    Settings: {
      /** @description Payroll Account details for SuperExpense, SuperLiabilty, WagesExpense, PAYGLiability & WagesPayable. */
      Accounts?: components['schemas']['Account'][]
      /** @description Tracking categories for Employees and Timesheets */
      TrackingCategories?: {
        /** @description The tracking category used for employees */
        EmployeeGroups?: {
          /**
           * Format: uuid
           * @description The identifier for the tracking category
           * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
           */
          TrackingCategoryID?: string
          /** @description Name of the tracking category */
          TrackingCategoryName?: string
        }
        /** @description The tracking category used for timesheets */
        TimesheetCategories?: {
          /**
           * Format: uuid
           * @description The identifier for the tracking category
           * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
           */
          TrackingCategoryID?: string
          /** @description Name of the tracking category */
          TrackingCategoryName?: string
        }
      }
      /**
       * Format: int32
       * @description Number of days in the Payroll year
       * @example 365
       */
      DaysInPayrollYear?: number
      /**
       * @description Indicates if the organisation has been enabled for STP Phase 2 editing of employees.
       * @example true
       */
      EmployeesAreSTP2?: boolean
    }
    SuperFunds: {
      SuperFunds?: components['schemas']['SuperFund'][]
    }
    SuperFund: {
      /**
       * Format: uuid
       * @description Xero identifier for a super fund
       * @example bfac31bd-ea62-4fc8-a5e7-7965d9504b15
       */
      SuperFundID?: string
      Type: components['schemas']['SuperFundType']
      /**
       * @description Name of the super fund
       * @example MLC Navigator Retirement Plan - Superannuation Service (including Series 2) (MLC Superannuation Fund)
       */
      Name?: string
      /**
       * @description ABN of the self managed super fund
       * @example 40022701955
       */
      ABN?: string
      /**
       * @description BSB of the self managed super fund
       * @example 234324
       */
      BSB?: string
      /**
       * @description The account number for the self managed super fund.
       * @example 234234234
       */
      AccountNumber?: string
      /**
       * @description The account name for the self managed super fund.
       * @example Money account
       */
      AccountName?: string
      /**
       * @description The electronic service address for the self managed super fund.
       * @example 12345678
       */
      ElectronicServiceAddress?: string
      /**
       * @description Some funds assign a unique number to each employer
       * @example 324324
       */
      EmployerNumber?: string
      /**
       * @description The SPIN of the Regulated SuperFund. This field has been deprecated. It will only be present for legacy superfunds. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN.
       * @example 4545445454
       */
      SPIN?: string
      /**
       * @description The USI of the Regulated SuperFund
       * @example 40022701955001
       */
      USI?: string
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @description Displays array of validation error messages from the API */
      ValidationErrors?: components['schemas']['ValidationError'][]
    }
    SuperFundProducts: {
      SuperFundProducts?: components['schemas']['SuperFundProduct'][]
    }
    SuperFundProduct: {
      /**
       * @description The ABN of the Regulated SuperFund
       * @example 839182848805
       */
      ABN?: string
      /**
       * @description The USI of the Regulated SuperFund
       * @example 839182848805001
       */
      USI?: string
      /**
       * @description The SPIN of the Regulated SuperFund. This field has been deprecated. New superfunds will not have a SPIN value. The USI field should be used instead of SPIN
       * @example NML0117AU
       */
      SPIN?: string
      /**
       * @description The name of the Regulated SuperFund
       * @example MLC Navigator Retirement Plan - Superannuation Service (including Series 2) (MLC Superannuation Fund)
       */
      ProductName?: string
    }
    Account: {
      /**
       * Format: uuid
       * @description Xero identifier for accounts
       * @example c56b19ef-75bf-45e8-98a4-e699a96609f7
       */
      AccountID?: string
      Type?: components['schemas']['AccountType']
      /**
       * @description Customer defined account code
       * @example 420
       */
      Code?: string
      /**
       * @description Name of account
       * @example General expenses
       */
      Name?: string
    }
    EarningsRate: {
      /**
       * @description Name of the earnings rate (max length = 100)
       * @example PTO
       */
      Name?: string
      /**
       * @description See Accounts
       * @example 720
       */
      AccountCode?: string
      /**
       * @description Type of units used to record earnings (max length = 50). Only When RateType is RATEPERUNIT
       * @example Fixed
       */
      TypeOfUnits?: string
      /**
       * @description Most payments are subject to tax, so you should only set this value if you are sure that a payment is exempt from PAYG withholding
       * @example false
       */
      IsExemptFromTax?: boolean
      /**
       * @description See the ATO website for details of which payments are exempt from SGC
       * @example false
       */
      IsExemptFromSuper?: boolean
      /**
       * @description Boolean to determine if the earnings rate is reportable or exempt from W1
       * @example false
       */
      IsReportableAsW1?: boolean
      /**
       * @description Boolean to determine if the allowance earnings rate contributes towards annual leave rate. Only applicable if EarningsType is ALLOWANCE and RateType is RATEPERUNIT
       * @example false
       */
      AllowanceContributesToAnnualLeaveRate?: boolean
      /**
       * @description Boolean to determine if the allowance earnings rate contributes towards overtime allowance rate. Only applicable if EarningsType is ALLOWANCE and RateType is RATEPERUNIT
       * @example false
       */
      AllowanceContributesToOvertimeRate?: boolean
      EarningsType?: components['schemas']['EarningsType']
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      EarningsRateID?: string
      RateType?: components['schemas']['RateType']
      /**
       * @description Default rate per unit (optional). Only applicable if RateType is RATEPERUNIT.
       * @example 10
       */
      RatePerUnit?: string
      /**
       * Format: double
       * @description This is the multiplier used to calculate the rate per unit, based on the employee’s ordinary earnings rate. For example, for time and a half enter 1.5. Only applicable if RateType is MULTIPLE
       * @example 1.5
       */
      Multiplier?: number
      /**
       * @description Indicates that this earnings rate should accrue leave. Only applicable if RateType is MULTIPLE
       * @example false
       */
      AccrueLeave?: boolean
      /**
       * Format: double
       * @description Optional Amount for FIXEDAMOUNT RateType EarningsRate
       * @example 50.3
       */
      Amount?: number
      EmploymentTerminationPaymentType?: components['schemas']['EmploymentTerminationPaymentType']
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /**
       * @description Is the current record
       * @example true
       */
      CurrentRecord?: boolean
      AllowanceType?: components['schemas']['AllowanceType']
      AllowanceCategory?: components['schemas']['AllowanceCategory']
    }
    DeductionType: {
      /**
       * @description Name of the earnings rate (max length = 100)
       * @example PTO
       */
      Name?: string
      /**
       * @description See Accounts
       * @example 720
       */
      AccountCode?: string
      /**
       * @description Indicates that this is a pre-tax deduction that will reduce the amount of tax you withhold from an employee.
       * @example false
       */
      ReducesTax?: boolean
      /**
       * @description Most deductions don’t reduce your superannuation guarantee contribution liability, so typically you will not set any value for this.
       * @example false
       */
      ReducesSuper?: boolean
      /**
       * @description Boolean to determine if the deduction type is reportable or exempt from W1
       * @example false
       */
      IsExemptFromW1?: boolean
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      DeductionTypeID?: string
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /** @enum {string} */
      DeductionCategory?: 'NONE' | 'UNIONFEES' | 'WORKPLACEGIVING'
      /**
       * @description Is the current record
       * @example true
       */
      CurrentRecord?: boolean
    }
    LeaveType: {
      /**
       * @description Name of the earnings rate (max length = 100)
       * @example PTO
       */
      Name?: string
      /**
       * @description The type of units by which leave entitlements are normally tracked. These are typically the same as the type of units used for the employee’s ordinary earnings rate
       * @example Hours
       */
      TypeOfUnits?: string
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      LeaveTypeID?: string
      /**
       * Format: double
       * @description The number of units the employee is entitled to each year
       * @example 152
       */
      NormalEntitlement?: number
      /**
       * Format: double
       * @description Enter an amount here if your organisation pays an additional percentage on top of ordinary earnings when your employees take leave (typically 17.5%)
       * @example 2
       */
      LeaveLoadingRate?: number
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /**
       * @description Set this to indicate that an employee will be paid when taking this type of leave
       * @example true
       */
      IsPaidLeave?: boolean
      /**
       * @description Set this if you want a balance for this leave type to be shown on your employee’s payslips
       * @example true
       */
      ShowOnPayslip?: boolean
      /**
       * @description Is the current record
       * @example true
       */
      CurrentRecord?: boolean
      LeaveCategoryCode?: components['schemas']['LeaveCategoryCode']
      /**
       * @description Set this to indicate that the leave type is exempt from superannuation guarantee contribution
       * @example true
       */
      SGCExempt?: boolean
    }
    ReimbursementType: {
      /**
       * @description Name of the earnings rate (max length = 100)
       * @example PTO
       */
      Name?: string
      /**
       * @description See Accounts
       * @example 720
       */
      AccountCode?: string
      /**
       * Format: uuid
       * @description Xero identifier
       * @example e0eb6747-7c17-4075-b804-989f8d4e5d39
       */
      ReimbursementTypeID?: string
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
      /**
       * @description Is the current record
       * @example true
       */
      CurrentRecord?: boolean
    }
    HomeAddress: {
      /**
       * @description Address line 1 for employee home address
       * @example 123 Main St
       */
      AddressLine1: string
      /**
       * @description Address line 2 for employee home address
       * @example Apt 4
       */
      AddressLine2?: string
      /**
       * @description Suburb for employee home address
       * @example St. Kilda
       */
      City?: string
      Region?: components['schemas']['State']
      /**
       * @description PostCode for employee home address
       * @example 3182
       */
      PostalCode?: string
      /**
       * @description Country of HomeAddress
       * @example AUSTRALIA
       */
      Country?: string
    }
    TaxDeclaration: {
      /**
       * Format: uuid
       * @description Address line 1 for employee home address
       * @example 123 Main St
       */
      EmployeeID?: string
      EmploymentBasis?: components['schemas']['EmploymentBasis']
      TFNExemptionType?: components['schemas']['TFNExemptionType']
      /**
       * @description The tax file number e.g 123123123.
       * @example 123123123
       */
      TaxFileNumber?: string
      /**
       * @description 11-digit Australian Business Number e.g 21006819692 or an empty string ("") to unset a previously set value. Only applicable, and mandatory if income type is NONEMPLOYEE.
       * @example 21006819692
       */
      ABN?: string
      /**
       * @description If the employee is Australian resident for tax purposes. e.g true or false
       * @example true
       */
      AustralianResidentForTaxPurposes?: boolean
      ResidencyStatus?: components['schemas']['ResidencyStatus']
      TaxScaleType?: components['schemas']['TaxScaleType']
      WorkCondition?: components['schemas']['WorkCondition']
      SeniorMaritalStatus?: components['schemas']['SeniorMaritalStatus']
      /**
       * @description If tax free threshold claimed. e.g true or false
       * @example false
       */
      TaxFreeThresholdClaimed?: boolean
      /**
       * Format: int
       * @description If has tax offset estimated then the tax offset estimated amount. e.g 100
       * @example 100
       */
      TaxOffsetEstimatedAmount?: number
      /**
       * @description If employee has HECS or HELP debt. e.g true or false
       * @example false
       */
      HasHELPDebt?: boolean
      /**
       * @description If employee has financial supplement debt. e.g true or false
       * @example false
       */
      HasSFSSDebt?: boolean
      /**
       * @description If employee has trade support loan. e.g true or false
       * @example false
       */
      HasTradeSupportLoanDebt?: boolean
      /**
       * Format: int
       * @description If the employee has requested that additional tax be withheld each pay run. e.g 50
       * @example 50
       */
      UpwardVariationTaxWithholdingAmount?: number
      /**
       * @description If the employee is eligible to receive an additional percentage on top of ordinary earnings when they take leave (typically 17.5%). e.g true or false
       * @example false
       */
      EligibleToReceiveLeaveLoading?: boolean
      /**
       * Format: int
       * @description If the employee has approved withholding variation. e.g (0 - 100)
       * @example 75
       */
      ApprovedWithholdingVariationPercentage?: number
      /**
       * @description If the employee is eligible for student startup loan rules
       * @example true
       */
      HasStudentStartupLoan?: boolean
      /**
       * @description If the employee has any of the following loans or debts: Higher Education Loan Program (HELP/HECS), VET Student Loan (VSL), Financial Supplement (FS), Student Start-up Loan (SSL), or Trade Support Loan (TSL)
       * @example true
       */
      HasLoanOrStudentDebt?: boolean
      /**
       * @description Last modified timestamp
       * @example /Date(1583967733054+0000)/
       */
      UpdatedDateUTC?: string
    }
    BankAccount: {
      /**
       * @description The text that will appear on your employee's bank statement when they receive payment
       * @example Salary
       */
      StatementText?: string
      /**
       * @description The name of the account
       * @example James Lebron Savings
       */
      AccountName?: string
      /**
       * @description The BSB number of the account
       * @example 122344
       */
      BSB?: string
      /**
       * @description The account number
       * @example 345678
       */
      AccountNumber?: string
      /**
       * @description If this account is the Remaining bank account
       * @example false
       */
      Remainder?: boolean
      /**
       * Format: double
       * @description Fixed amounts (for example, if an employee wants to have $100 of their salary transferred to one account, and the remaining amount to another)
       * @example 200
       */
      Amount?: number
    }
    PayTemplate: {
      EarningsLines?: components['schemas']['EarningsLine'][]
      DeductionLines?: components['schemas']['DeductionLine'][]
      SuperLines?: components['schemas']['SuperLine'][]
      ReimbursementLines?: components['schemas']['ReimbursementLine'][]
      LeaveLines?: components['schemas']['LeaveLine'][]
    }
    EarningsLine: {
      /**
       * Format: uuid
       * @description Xero unique id for earnings rate
       * @example 72e962d1-fcac-4083-8a71-742bb3e7ae14
       */
      EarningsRateID: string
      CalculationType?: components['schemas']['EarningsRateCalculationType']
      /**
       * Format: double
       * @description Annual salary for earnings line
       * @example 40000
       */
      AnnualSalary?: number
      /**
       * Format: double
       * @description number of units for earning line
       * @example 38
       */
      NumberOfUnitsPerWeek?: number
      /**
       * Format: double
       * @description Rate per unit of the EarningsLine.
       * @example 38
       */
      RatePerUnit?: number
      /**
       * Format: double
       * @description Normal number of units for EarningsLine. Applicable when RateType is "MULTIPLE"
       * @example 38
       */
      NormalNumberOfUnits?: number
      /**
       * Format: double
       * @description Earnings rate amount
       * @example 38
       */
      Amount?: number
      /**
       * Format: double
       * @description Earnings rate number of units.
       * @example 2.5
       */
      NumberOfUnits?: number
      /**
       * Format: double
       * @description Earnings rate amount. Only applicable if the EarningsRate RateType is Fixed
       * @example 2.5
       */
      FixedAmount?: number
    }
    DeductionLine: {
      /**
       * Format: uuid
       * @description Xero deduction type identifier
       * @example 59cd9d04-4521-4cc3-93ac-7841651ff407
       */
      DeductionTypeID: string
      CalculationType?: components['schemas']['DeductionTypeCalculationType']
      /**
       * Format: double
       * @description Deduction type amount
       * @example 10
       */
      Amount?: number
      /**
       * Format: double
       * @description The Percentage of the Deduction
       * @example 10
       */
      Percentage?: number
      /**
       * Format: double
       * @description Deduction number of units
       * @example 10
       */
      NumberOfUnits?: number
    }
    SuperLine: {
      /**
       * Format: uuid
       * @description Xero super membership ID
       * @example 4333d5cd-53a5-4c31-98e5-a8b4e5676b0b
       */
      SuperMembershipID?: string
      ContributionType?: components['schemas']['SuperannuationContributionType']
      CalculationType?: components['schemas']['SuperannuationCalculationType']
      /**
       * Format: double
       * @description amount of minimum earnings
       * @example 450
       */
      MinimumMonthlyEarnings?: number
      /**
       * @description expense account code
       * @example 478
       */
      ExpenseAccountCode?: string
      /**
       * @description liabilty account code
       * @example 826
       */
      LiabilityAccountCode?: string
      /**
       * Format: double
       * @description percentage for super line
       * @example 9
       */
      Percentage?: number
      /**
       * Format: double
       * @description Super membership amount
       * @example 10
       */
      Amount?: number
    }
    /** @description The reimbursement type lines */
    ReimbursementLines: {
      ReimbursementLines?: components['schemas']['ReimbursementLine'][]
    }
    ReimbursementLine: {
      /**
       * Format: uuid
       * @description Xero reimbursement type identifier
       * @example bd246b96-c637-4767-81cf-851ba8fa93c2
       */
      ReimbursementTypeID?: string
      /**
       * Format: double
       * @description Reimbursement type amount
       * @example 10
       */
      Amount?: number
      /**
       * @description Reimbursement lines description (max length 50)
       * @example For the taxi
       */
      Description?: string
      /**
       * @description Reimbursement expense account. For posted pay run you should be able to see expense account code.
       * @example 420
       */
      ExpenseAccount?: string
    }
    /** @description The leave type lines */
    LeaveLines: {
      Employee?: components['schemas']['LeaveLine'][]
    }
    LeaveLine: {
      /**
       * Format: uuid
       * @description Xero leave type identifier
       * @example 742998cb-7584-4ecf-aa88-d694f59c50f9
       */
      LeaveTypeID?: string
      CalculationType?: components['schemas']['LeaveLineCalculationType']
      EntitlementFinalPayPayoutType?: components['schemas']['EntitlementFinalPayPayoutType']
      EmploymentTerminationPaymentType?: components['schemas']['EmploymentTerminationPaymentType']
      /**
       * @description amount of leave line
       * @example true
       */
      IncludeSuperannuationGuaranteeContribution?: boolean
      /**
       * Format: double
       * @description Number of units for leave line.
       * @example 2.5
       */
      NumberOfUnits?: number
      /**
       * Format: double
       * @description Hours of leave accrued each year
       * @example 2.5
       */
      AnnualNumberOfUnits?: number
      /**
       * Format: double
       * @description Normal ordinary earnings number of units for leave line.
       * @example 2.5
       */
      FullTimeNumberOfUnitsPerPeriod?: number
    }
    PaidLeaveEarningsLine: {
      /**
       * Format: uuid
       * @description Xero leave type identifier
       * @example 742998cb-7584-4ecf-aa88-d694f59c50f9
       */
      LeaveTypeID: string
      /**
       * Format: double
       * @description Paid leave amount
       * @example 500
       */
      Amount: number
      /**
       * Format: double
       * @description The amount of leave loading applied for the leave type that is subject to Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories
       * @example 50
       */
      SGCAppliedLeaveLoadingAmount?: number
      /**
       * Format: double
       * @description The amount of leave loading applied for the leave type that is exempt from Superannuation Guarantee Contributions. *Only applicable for Leave Types with Annual Leave Categories
       * @example 60
       */
      SGCExemptedLeaveLoadingAmount?: number
      /**
       * @description Reset the STP categorisations for the leave type. *Only applicable for Leave Types with Annual Leave Categories
       * @example true
       */
      ResetSTPCategorisation?: boolean
    }
    OpeningBalances: {
      /**
       * @description Opening Balance Date. (YYYY-MM-DD)
       * @example /Date(322560000000+0000)/
       */
      OpeningBalanceDate?: string
      /**
       * @description Opening Balance tax
       * @example 4333d5cd-53a5-4c31-98e5-a8b4e5676b0b
       */
      Tax?: string
      EarningsLines?: components['schemas']['EarningsLine'][]
      DeductionLines?: components['schemas']['DeductionLine'][]
      SuperLines?: components['schemas']['SuperLine'][]
      ReimbursementLines?: components['schemas']['ReimbursementLine'][]
      LeaveLines?: components['schemas']['LeaveLine'][]
      PaidLeaveEarningsLines?: components['schemas']['PaidLeaveEarningsLine'][]
    }
    LeaveBalance: {
      /**
       * @description The name of the leave type
       * @example Annual Leave
       */
      LeaveName?: string
      /**
       * @description Identifier of the leave type (see PayItems)
       * @example 544d9292-4329-4512-bfff-a9f15236d776
       */
      LeaveTypeID?: string
      /**
       * Format: double
       * @description The balance of the leave available
       * @example 81.2602
       */
      NumberOfUnits?: number
      /**
       * @description The type of units as specified by the LeaveType (see PayItems)
       * @example Hours
       */
      TypeOfUnits?: string
    }
    /**
     * @description Code used to identify the Leave Category
     * @example ANNUALLEAVE
     * @enum {string}
     */
    LeaveCategoryCode:
      | 'ANNUALLEAVE'
      | 'LONGSERVICELEAVE'
      | 'PERSONALSICKCARERSLEAVE'
      | 'ROSTEREDDAYOFF'
      | 'TIMEOFFINLIEU'
      | 'COMPASSIONATEANDBEREAVEMENTLEAVE'
      | 'STUDYLEAVE'
      | 'FAMILYANDDOMESTICVIOLENCELEAVE'
      | 'SPECIALPAIDLEAVE'
      | 'COMMUNITYSERVICELEAVE'
      | 'JURYDUTYLEAVE'
      | 'DEFENCERESERVELEAVE'
    /** @enum {string} */
    RateType: 'FIXEDAMOUNT' | 'MULTIPLE' | 'RATEPERUNIT'
    /** @enum {string} */
    EarningsType:
      | 'FIXED'
      | 'ORDINARYTIMEEARNINGS'
      | 'OVERTIMEEARNINGS'
      | 'ALLOWANCE'
      | 'LUMPSUMD'
      | 'EMPLOYMENTTERMINATIONPAYMENT'
      | 'LUMPSUMA'
      | 'LUMPSUMB'
      | 'BONUSESANDCOMMISSIONS'
      | 'LUMPSUME'
      | 'LUMPSUMW'
      | 'DIRECTORSFEES'
      | 'PAIDPARENTALLEAVE'
      | 'WORKERSCOMPENSATION'
    /** @enum {string} */
    EmploymentTerminationPaymentType: 'O' | 'R'
    /** @enum {string} */
    AllowanceType:
      | 'CAR'
      | 'TRANSPORT'
      | 'LAUNDRY'
      | 'MEALS'
      | 'TRAVEL'
      | 'OTHER'
      | 'TOOLS'
      | 'TASKS'
      | 'QUALIFICATIONS'
    /** @enum {string} */
    AllowanceCategory:
      | 'NONDEDUCTIBLE'
      | 'UNIFORM'
      | 'PRIVATEVEHICLE'
      | 'HOMEOFFICE'
      | 'TRANSPORT'
      | 'GENERAL'
      | 'OTHER'
    /** @enum {string} */
    CalendarType:
      | 'WEEKLY'
      | 'FORTNIGHTLY'
      | 'FOURWEEKLY'
      | 'MONTHLY'
      | 'TWICEMONTHLY'
      | 'QUARTERLY'
    /** @enum {string} */
    EarningsRateCalculationType:
      | 'USEEARNINGSRATE'
      | 'ENTEREARNINGSRATE'
      | 'ANNUALSALARY'
    /** @enum {string} */
    DeductionTypeCalculationType: 'FIXEDAMOUNT' | 'PRETAX' | 'POSTTAX'
    /**
     * @description Calculation type for leave line for Opening Balance on Employee
     * @enum {string}
     */
    LeaveLineCalculationType:
      | 'NOCALCULATIONREQUIRED'
      | 'FIXEDAMOUNTEACHPERIOD'
      | 'ENTERRATEINPAYTEMPLATE'
      | 'BASEDONORDINARYEARNINGS'
    /** @enum {string} */
    SuperannuationContributionType:
      | 'SGC'
      | 'SALARYSACRIFICE'
      | 'EMPLOYERADDITIONAL'
      | 'EMPLOYEE'
    /** @enum {string} */
    SuperannuationCalculationType:
      | 'FIXEDAMOUNT'
      | 'PERCENTAGEOFEARNINGS'
      | 'STATUTORY'
    /** @enum {string} */
    PaymentFrequencyType:
      | 'WEEKLY'
      | 'MONTHLY'
      | 'FORTNIGHTLY'
      | 'QUARTERLY'
      | 'TWICEMONTHLY'
      | 'FOURWEEKLY'
      | 'YEARLY'
    /** @enum {string} */
    LeaveTypeContributionType:
      | 'SGC'
      | 'SALARYSACRIFICE'
      | 'EMPLOYERADDITIONAL'
      | 'EMPLOYEE'
    /** @enum {string} */
    EntitlementFinalPayPayoutType: 'NOTPAIDOUT' | 'PAIDOUT'
    /** @enum {string} */
    PayRunStatus: 'DRAFT' | 'POSTED'
    /** @enum {string} */
    ManualTaxType:
      | 'PAYGMANUAL'
      | 'ETPOMANUAL'
      | 'ETPRMANUAL'
      | 'SCHEDULE5MANUAL'
      | 'SCHEDULE5STSLMANUAL'
      | 'SCHEDULE4MANUAL'
    /** @enum {string} */
    SuperFundType: 'REGULATED' | 'SMSF'
    /** @enum {string} */
    EmploymentType: 'EMPLOYEE' | 'CONTRACTOR'
    /**
     * @description Country of residence as a valid ISO 3166-1 alpha-2 country code e.g. "AU", "NZ", "CA". Only applicable, and mandatory if income type is WORKINGHOLIDAYMAKER.
     * @example AU
     * @enum {string}
     */
    CountryOfResidence:
      | 'AF'
      | 'AX'
      | 'AL'
      | 'DZ'
      | 'AS'
      | 'AD'
      | 'AO'
      | 'AI'
      | 'AQ'
      | 'AG'
      | 'AR'
      | 'AM'
      | 'AW'
      | 'AU'
      | 'AT'
      | 'AZ'
      | 'BS'
      | 'BH'
      | 'BD'
      | 'BB'
      | 'BY'
      | 'BE'
      | 'BZ'
      | 'BJ'
      | 'BM'
      | 'BT'
      | 'BO'
      | 'BA'
      | 'BW'
      | 'BV'
      | 'BR'
      | 'IO'
      | 'BN'
      | 'BG'
      | 'BF'
      | 'BI'
      | 'KH'
      | 'CM'
      | 'CA'
      | 'CV'
      | 'KY'
      | 'CF'
      | 'TD'
      | 'CL'
      | 'CN'
      | 'CX'
      | 'CC'
      | 'CO'
      | 'KM'
      | 'CG'
      | 'CD'
      | 'CK'
      | 'CR'
      | 'CI'
      | 'HR'
      | 'CU'
      | 'CY'
      | 'CZ'
      | 'DK'
      | 'DJ'
      | 'DM'
      | 'DO'
      | 'EC'
      | 'EG'
      | 'SV'
      | 'GQ'
      | 'ER'
      | 'EE'
      | 'ET'
      | 'FK'
      | 'FO'
      | 'FJ'
      | 'FI'
      | 'FR'
      | 'GF'
      | 'PF'
      | 'TF'
      | 'GA'
      | 'GM'
      | 'GE'
      | 'DE'
      | 'GH'
      | 'GI'
      | 'GR'
      | 'GL'
      | 'GD'
      | 'GP'
      | 'GU'
      | 'GT'
      | 'GG'
      | 'GN'
      | 'GW'
      | 'GY'
      | 'HT'
      | 'HM'
      | 'VA'
      | 'HN'
      | 'HK'
      | 'HU'
      | 'IS'
      | 'IN'
      | 'ID'
      | 'IR'
      | 'IQ'
      | 'IE'
      | 'IM'
      | 'IL'
      | 'IT'
      | 'JM'
      | 'JP'
      | 'JE'
      | 'JO'
      | 'KZ'
      | 'KE'
      | 'KI'
      | 'KP'
      | 'KR'
      | 'KW'
      | 'KG'
      | 'LA'
      | 'LV'
      | 'LB'
      | 'LS'
      | 'LR'
      | 'LY'
      | 'LI'
      | 'LT'
      | 'LU'
      | 'MO'
      | 'MK'
      | 'MG'
      | 'MW'
      | 'MY'
      | 'MV'
      | 'ML'
      | 'MT'
      | 'MH'
      | 'MQ'
      | 'MR'
      | 'MU'
      | 'YT'
      | 'MX'
      | 'FM'
      | 'MD'
      | 'MC'
      | 'MN'
      | 'ME'
      | 'MS'
      | 'MA'
      | 'MZ'
      | 'MM'
      | 'NA'
      | 'NR'
      | 'NP'
      | 'NL'
      | 'AN'
      | 'NC'
      | 'NZ'
      | 'NI'
      | 'NE'
      | 'NG'
      | 'NU'
      | 'NF'
      | 'MP'
      | 'NO'
      | 'OM'
      | 'PK'
      | 'PW'
      | 'PS'
      | 'PA'
      | 'PG'
      | 'PY'
      | 'PE'
      | 'PH'
      | 'PN'
      | 'PL'
      | 'PT'
      | 'PR'
      | 'QA'
      | 'RE'
      | 'RO'
      | 'RU'
      | 'RW'
      | 'BL'
      | 'SH'
      | 'KN'
      | 'LC'
      | 'MF'
      | 'PM'
      | 'VC'
      | 'WS'
      | 'SM'
      | 'ST'
      | 'SA'
      | 'SN'
      | 'RS'
      | 'SC'
      | 'SL'
      | 'SG'
      | 'SK'
      | 'SI'
      | 'SB'
      | 'SO'
      | 'ZA'
      | 'GS'
      | 'ES'
      | 'LK'
      | 'SD'
      | 'SR'
      | 'SJ'
      | 'SZ'
      | 'SE'
      | 'CH'
      | 'SY'
      | 'TW'
      | 'TJ'
      | 'TZ'
      | 'TH'
      | 'TL'
      | 'TG'
      | 'TK'
      | 'TO'
      | 'TT'
      | 'TN'
      | 'TR'
      | 'TM'
      | 'TC'
      | 'TV'
      | 'UG'
      | 'UA'
      | 'AE'
      | 'GB'
      | 'US'
      | 'UM'
      | 'UY'
      | 'UZ'
      | 'VU'
      | 'VE'
      | 'VN'
      | 'VG'
      | 'VI'
      | 'WF'
      | 'EH'
      | 'YE'
      | 'ZM'
      | 'ZW'
      | 'BQ'
      | 'CW'
      | 'SX'
      | 'SS'
    /** @enum {string} */
    IncomeType:
      | 'SALARYANDWAGES'
      | 'WORKINGHOLIDAYMAKER'
      | 'NONEMPLOYEE'
      | 'CLOSELYHELDPAYEES'
      | 'LABOURHIRE'
    /** @enum {string} */
    TaxScaleType:
      | 'REGULAR'
      | 'ACTORSARTISTSENTERTAINERS'
      | 'HORTICULTURISTORSHEARER'
      | 'SENIORORPENSIONER'
      | 'WORKINGHOLIDAYMAKER'
      | 'FOREIGN'
    /** @enum {string} */
    WorkCondition: 'PROMOTIONAL' | 'THREELESSPERFORMANCESPERWEEK' | 'NONE'
    /** @enum {string} */
    SeniorMaritalStatus:
      | 'MEMBEROFCOUPLE'
      | 'MEMBEROFILLNESSSEPARATEDCOUPLE'
      | 'SINGLE'
    /** @enum {string} */
    EmploymentBasis:
      | 'FULLTIME'
      | 'PARTTIME'
      | 'CASUAL'
      | 'LABOURHIRE'
      | 'SUPERINCOMESTREAM'
      | 'NONEMPLOYEE'
    /** @enum {string} */
    TFNExemptionType: 'NOTQUOTED' | 'PENDING' | 'PENSIONER' | 'UNDER18'
    /** @enum {string} */
    ResidencyStatus:
      | 'AUSTRALIANRESIDENT'
      | 'FOREIGNRESIDENT'
      | 'WORKINGHOLIDAYMAKER'
    /** @enum {string} */
    TimesheetStatus:
      | 'DRAFT'
      | 'PROCESSED'
      | 'APPROVED'
      | 'REJECTED'
      | 'REQUESTED'
    /**
     * @description Employee Status Types
     * @enum {string}
     */
    EmployeeStatus: 'ACTIVE' | 'TERMINATED'
    /**
     * @description State abbreviation for employee home address
     * @example VIC
     * @enum {string}
     */
    State: 'ACT' | 'NSW' | 'NT' | 'QLD' | 'SA' | 'TAS' | 'VIC' | 'WA'
    SuperMembership: {
      /**
       * Format: uuid
       * @description Xero unique identifier for Super membership
       * @example 4333d5cd-53a5-4c31-98e5-a8b4e5676b0b
       */
      SuperMembershipID?: string
      /**
       * Format: uuid
       * @description Xero identifier for super fund
       * @example 2187a42b-639a-45cb-9eed-cd4ae488306a
       */
      SuperFundID: string
      /**
       * @description The membership number assigned to the employee by the super fund.
       * @example 1234
       */
      EmployeeNumber: string
    }
    /**
     * @description See Account Types
     * @enum {string}
     */
    AccountType:
      | 'BANK'
      | 'CURRENT'
      | 'CURRLIAB'
      | 'DEPRECIATN'
      | 'DIRECTCOSTS'
      | 'EQUITY'
      | 'EXPENSE'
      | 'FIXED'
      | 'INVENTORY'
      | 'LIABILITY'
      | 'NONCURRENT'
      | 'OTHERINCOME'
      | 'OVERHEADS'
      | 'PREPAYMENT'
      | 'REVENUE'
      | 'SALES'
      | 'TERMLIAB'
      | 'PAYGLIABILITY'
      | 'PAYG'
      | 'SUPERANNUATIONEXPENSE'
      | 'SUPERANNUATIONLIABILITY'
      | 'WAGESEXPENSE'
      | 'WAGESPAYABLELIABILITY'
    /** @description The object returned for a bad request */
    APIException: {
      /**
       * Format: integer
       * @description The error number
       * @example 16
       */
      ErrorNumber?: number
      /**
       * @description The type of error
       * @example QueryParseException
       */
      Type?: string
      /**
       * @description The message describing the error
       * @example No property or field 'hi' exists in type 'Employee' (at index 0)
       */
      Message?: string
    }
    ValidationError: {
      /** @description Validation error message */
      Message?: string
    }
  }
  responses: never
  parameters: {
    /** @description Xero identifier for Tenant */
    requiredHeader?: string
    /**
     * @description This allows you to safely retry requests without the risk of duplicate processing. 128 character max.
     * @example KEY_VALUE
     */
    idempotencyKey?: string
  }
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** Searches payroll employees */
  getEmployees: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 employees will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a payroll employee */
  createEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [ { "FirstName": "Albus", "LastName": "Dumbledore", "DateOfBirth": "/Date(321523200000+0000)/", "HomeAddress": { "AddressLine1": "101 Green St", "City": "Island Bay", "Region": "NSW", "PostalCode": "6023", "Country": "AUSTRALIA" }, "StartDate": "/Date(321523200000+0000)/", "MiddleNames": "Percival", "Email": "albus39608@hogwarts.edu", "Gender": "M", "Phone": "444-2323", "Mobile": "555-1212", "IsAuthorisedToApproveLeave": true, "IsAuthorisedToApproveTimesheets": true, "JobTitle": "Regional Manager", "Classification": "corporate", "OrdinaryEarningsRateID": "ab874dfb-ab09-4c91-954e-43acf6fc23b4", "Status": "ACTIVE" } ] */
        'application/json': components['schemas']['Employee'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves an employee's detail by unique employee id */
  getEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
    }
  }
  /**
   * Updates an employee's detail
   * @description Update properties on a single employee
   */
  updateEmployee: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Employee id for single object */
        EmployeeID: string
      }
    }
    requestBody: {
      content: {
        /** @example [ { "MiddleNames": "Frank" } ] */
        'application/json': components['schemas']['Employee'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['Employees']
        }
      }
    }
  }
  /** Retrieves leave applications */
  getLeaveApplications: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 objects will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a leave application */
  createLeaveApplication: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [ { "EmployeeID": "cdfb8371-0b21-4b8a-8903-1024df6c391e", "LeaveTypeID": "184ea8f7-d143-46dd-bef3-0c60e1aa6fca", "Title": "Hello World", "StartDate": "/Date(1572559200000+0000)/", "EndDate": "/Date(1572645600000+0000)/" } ] */
        'application/json': components['schemas']['LeaveApplication'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves leave applications including leave requests */
  getLeaveApplicationsV2: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 objects will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Retrieves a leave application by a unique leave application id */
  getLeaveApplication: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Leave Application id for single object */
        LeaveApplicationID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
    }
  }
  /** Updates a specific leave application */
  updateLeaveApplication: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Leave Application id for single object */
        LeaveApplicationID: string
      }
    }
    requestBody: {
      content: {
        /** @example [ { "EmployeeID": "cdfb8371-0b21-4b8a-8903-1024df6c391e", "LeaveApplicationID": "1d4cd583-0107-4386-936b-672eb3d1f624", "LeaveTypeID": "184ea8f7-d143-46dd-bef3-0c60e1aa6fca", "LeavePeriods": [ { "PayPeriodStartDate": "/Date(1572566400000+0000)/", "PayPeriodEndDate": "/Date(1573084800000+0000)/", "LeavePeriodStatus": "SCHEDULED", "NumberOfUnits": 7.6 } ], "Title": "vacation", "Description": "My updated Description", "StartDate": "/Date(1572559200000+0000)/", "EndDate": "/Date(1572645600000+0000)/", "PayOutType": "DEFAULT" } ] */
        'application/json': components['schemas']['LeaveApplication'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Approve a requested leave application by a unique leave application id */
  approveLeaveApplication: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Leave Application id for single object */
        LeaveApplicationID: string
      }
    }
    responses: {
      /** @description Application successfully approved */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Reject a leave application by a unique leave application id */
  rejectLeaveApplication: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Leave Application id for single object */
        LeaveApplicationID: string
      }
    }
    responses: {
      /** @description Application successfully rejected */
      200: {
        content: {
          'application/json': components['schemas']['LeaveApplications']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Retrieves pay items */
  getPayItems: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 objects will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayItems']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a pay item */
  createPayItem: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example { "EarningsRates": [ { "Name": "MyRate", "AccountCode": "400", "TypeOfUnits": "4.00", "IsExemptFromTax": true, "IsExemptFromSuper": true, "IsReportableAsW1": false, "AllowanceContributesToAnnualLeaveRate": false, "AllowanceContributesToOvertimeRate": false, "EarningsType": "ORDINARYTIMEEARNINGS", "EarningsRateID": "1fa4e226-b711-46ba-a8a7-4344c9c5fb87", "RateType": "MULTIPLE", "RatePerUnit": "10.0", "Multiplier": 1.5, "Amount": 5, "EmploymentTerminationPaymentType": "O" } ] } */
        'application/json': components['schemas']['PayItem']
      }
    }
    responses: {
      /** @description A successful request - currently returns empty array for JSON */
      200: {
        content: {
          'application/json': components['schemas']['PayItems']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves payroll calendars */
  getPayrollCalendars: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 objects will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayrollCalendars']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a Payroll Calendar */
  createPayrollCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [  {  "PayrollCalendarID":"78bb86b9-e1ea-47ac-b75d-f087a81931de", "PayRunPeriodStartDate":"/Date(1572566400000+0000)/", "PayRunPeriodEndDate":"/Date(1573084800000+0000)/", "PayRunStatus":"DRAFT", "PaymentDate":"/Date(1573171200000+0000)/" } ] */
        'application/json': components['schemas']['PayrollCalendar'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['PayrollCalendars']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves payroll calendar by using a unique payroll calendar ID */
  getPayrollCalendar: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Payroll Calendar id for single object */
        PayrollCalendarID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayrollCalendars']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Retrieves pay runs */
  getPayRuns: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 PayRuns will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a pay run */
  createPayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [ { "PayrollCalendarID": "78bb86b9-e1ea-47ac-b75d-f087a81931de", "PayRunPeriodStartDate": "/Date(1572566400000+0000)/", "PayRunPeriodEndDate": "/Date(1573084800000+0000)/", "PayRunStatus": "DRAFT", "PaymentDate": "/Date(1573171200000+0000)/" } ] */
        'application/json': components['schemas']['PayRun'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves a pay run by using a unique pay run id */
  getPayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description PayRun id for single object */
        PayRunID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
    }
  }
  /**
   * Updates a pay run
   * @description Update properties on a single PayRun
   */
  updatePayRun: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description PayRun id for single object */
        PayRunID: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PayRun'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['PayRuns']
        }
      }
    }
  }
  /** Retrieves for a payslip by a unique payslip id */
  getPayslip: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Payslip id for single object */
        PayslipID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['PayslipObject']
        }
      }
    }
  }
  /**
   * Updates a payslip
   * @description Update lines on a single payslips
   */
  updatePayslip: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Payslip id for single object */
        PayslipID: string
      }
    }
    requestBody: {
      content: {
        /** @example { "Payslip": { "EmployeeID": "cdfb8371-0b21-4b8a-8903-1024df6c391e", "DeductionLines": [ { "DeductionTypeID": "727af5e8-b347-4ae7-85fc-9b82266d0aec", "CalculationType": "FIXEDAMOUNT", "NumberOfUnits": 10 } ] } } */
        'application/json': components['schemas']['PayslipLines'][]
      }
    }
    responses: {
      /** @description A successful request - currently returns empty array for JSON */
      200: {
        content: {
          'application/json': components['schemas']['Payslips']
        }
      }
    }
  }
  /** Retrieves payroll settings */
  getSettings: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description payroll settings */
      200: {
        content: {
          'application/json': components['schemas']['SettingsObject']
        }
      }
    }
  }
  /** Retrieves superfunds */
  getSuperfunds: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 SuperFunds will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SuperFunds']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a superfund */
  createSuperfund: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [  {  "usi":"PTC0133AU", "Type":"REGULATED", "Name":"Bar99359", "AccountNumber":"FB36350", "AccountName":"Foo38428", "USI":"PTC0133AU" } ] */
        'application/json': components['schemas']['SuperFund'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['SuperFunds']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves a superfund by using a unique superfund ID */
  getSuperfund: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Superfund id for single object */
        SuperFundID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SuperFunds']
        }
      }
    }
  }
  /**
   * Updates a superfund
   * @description Update properties on a single Superfund
   */
  updateSuperfund: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Superfund id for single object */
        SuperFundID: string
      }
    }
    requestBody: {
      content: {
        /** @example  [  {  "Type":"REGULATED", "Name":"Nice23534" } ] */
        'application/json': components['schemas']['SuperFund'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['SuperFunds']
        }
      }
    }
  }
  /** Retrieves superfund products */
  getSuperfundProducts: {
    parameters: {
      query?: {
        /**
         * @description The ABN of the Regulated SuperFund
         * @example 40022701955
         */
        ABN?: string
        /**
         * @description The USI of the Regulated SuperFund
         * @example OSF0001AU
         */
        USI?: string
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['SuperFundProducts']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Retrieves timesheets */
  getTimesheets: {
    parameters: {
      query?: {
        /**
         * @description Filter by an any element
         * @example Status=="ACTIVE"
         */
        where?: string
        /**
         * @description Order by an any element
         * @example EmailAddress%20DESC
         */
        order?: string
        /** @description e.g. page=1 – Up to 100 timesheets will be returned in a single API call */
        page?: number
      }
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        /**
         * @description Only records created or modified since this timestamp will be returned
         * @example 2020-02-06T12:17:43.202-08:00
         */
        'If-Modified-Since'?: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['Timesheets']
        }
      }
      /** @description validation error for a bad request */
      400: {
        content: {
          'application/json': components['schemas']['APIException']
        }
      }
    }
  }
  /** Creates a timesheet */
  createTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
    }
    requestBody: {
      content: {
        /** @example [  {  "EmployeeID":"b34e89ff-770d-4099-b7e5-f968767118bc", "StartDate":"/Date(1573171200000+0000)/", "EndDate":"/Date(1573689600000+0000)/", "Status":"DRAFT", "TimesheetLines":[  {  "EarningsRateID":"ab874dfb-ab09-4c91-954e-43acf6fc23b4", "TrackingItemID":"af5e9ce2-2349-4136-be99-3561b189f473", "NumberOfUnits":[  2.0, 10.0, 0.0, 0.0, 5.0, 0.0, 5.0 ] } ] } ] */
        'application/json': components['schemas']['Timesheet'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['Timesheets']
        }
      }
      /** @description invalid input, object invalid - TODO */
      400: {
        content: never
      }
    }
  }
  /** Retrieves a timesheet by using a unique timesheet id */
  getTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
      }
      path: {
        /** @description Timesheet id for single object */
        TimesheetID: string
      }
    }
    responses: {
      /** @description search results matching criteria */
      200: {
        content: {
          'application/json': components['schemas']['TimesheetObject']
        }
      }
    }
  }
  /**
   * Updates a timesheet
   * @description Update properties on a single timesheet
   */
  updateTimesheet: {
    parameters: {
      header?: {
        'Xero-Tenant-Id'?: components['parameters']['requiredHeader']
        'Idempotency-Key'?: components['parameters']['idempotencyKey']
      }
      path: {
        /** @description Timesheet id for single object */
        TimesheetID: string
      }
    }
    requestBody: {
      content: {
        /** @example [  {  "EmployeeID":"b34e89ff-770d-4099-b7e5-f968767118bc", "StartDate":"/Date(1573171200000+0000)/", "EndDate":"/Date(1573689600000+0000)/", "Status":"APPROVED", "Hours":22.0, "TimesheetID":"a7eb0a79-8511-4ee7-b473-3a25f28abcb9", "TimesheetLines":[  {  "EarningsRateID":"ab874dfb-ab09-4c91-954e-43acf6fc23b4", "TrackingItemID":"af5e9ce2-2349-4136-be99-3561b189f473", "NumberOfUnits":[  2.0, 10.0, 0.0, 0.0, 5.0, 0.0, 5.0 ], "UpdatedDateUTC":"/Date(1573516185127+0000)/" } ] } ] */
        'application/json': components['schemas']['Timesheet'][]
      }
    }
    responses: {
      /** @description A successful request */
      200: {
        content: {
          'application/json': components['schemas']['Timesheets']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
